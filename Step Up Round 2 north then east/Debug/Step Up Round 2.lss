
Step Up Round 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000222a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  0000222a  000022be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000040a  008000f8  008000f8  00002356  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002abb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000128  00000000  00000000  00002aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ee1  00000000  00000000  00002c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000379  00000000  00000000  00004af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a3f  00000000  00000000  00004e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000344  00000000  00000000  000058ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000459  00000000  00000000  00005bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000171c  00000000  00000000  00006049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000118  00000000  00000000  00007765  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	25 e0       	ldi	r18, 0x05	; 5
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 03 	call	0x7bc	; 0x7bc <main>
      8a:	0c 94 13 11 	jmp	0x2226	; 0x2226 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_CMND>:
void DETECT_NEXT_NODE();
int main();

void LCD_CMND(unsigned char cmnd) 
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd & 0xF0);
      92:	9b b3       	in	r25, 0x1b	; 27
      94:	28 2f       	mov	r18, r24
      96:	20 7f       	andi	r18, 0xF0	; 240
      98:	9f 70       	andi	r25, 0x0F	; 15
      9a:	92 2b       	or	r25, r18
      9c:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT &= ~(1<<LCD_RS); 
      9e:	da 98       	cbi	0x1b, 2	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; 
      a0:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      a2:	ef e8       	ldi	r30, 0x8F	; 143
      a4:	f1 e0       	ldi	r31, 0x01	; 1
      a6:	31 97       	sbiw	r30, 0x01	; 1
      a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_CMND+0x14>
      aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_CMND+0x1a>
      ac:	00 00       	nop
	_delay_us(100);
	LCD_DATA_PORT &= ~(1<<LCD_EN); 
      ae:	db 98       	cbi	0x1b, 3	; 27
      b0:	ef ea       	ldi	r30, 0xAF	; 175
      b2:	f4 e0       	ldi	r31, 0x04	; 4
      b4:	31 97       	sbiw	r30, 0x01	; 1
      b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_CMND+0x22>
      b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_CMND+0x28>
      ba:	00 00       	nop
	_delay_us(300);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd << 4); 
      bc:	2b b3       	in	r18, 0x1b	; 27
      be:	f0 e1       	ldi	r31, 0x10	; 16
      c0:	8f 9f       	mul	r24, r31
      c2:	c0 01       	movw	r24, r0
      c4:	11 24       	eor	r1, r1
      c6:	92 2f       	mov	r25, r18
      c8:	9f 70       	andi	r25, 0x0F	; 15
      ca:	89 2b       	or	r24, r25
      cc:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; 
      ce:	db 9a       	sbi	0x1b, 3	; 27
      d0:	8f ea       	ldi	r24, 0xAF	; 175
      d2:	94 e0       	ldi	r25, 0x04	; 4
      d4:	01 97       	sbiw	r24, 0x01	; 1
      d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_CMND+0x42>
      d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_CMND+0x48>
      da:	00 00       	nop
	_delay_us(300);
	LCD_DATA_PORT &= ~(1<<LCD_EN); 
      dc:	db 98       	cbi	0x1b, 3	; 27
      de:	08 95       	ret

000000e0 <LCD_DATA>:
}
void LCD_DATA(unsigned char data) 
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
      e0:	9b b3       	in	r25, 0x1b	; 27
      e2:	28 2f       	mov	r18, r24
      e4:	20 7f       	andi	r18, 0xF0	; 240
      e6:	9f 70       	andi	r25, 0x0F	; 15
      e8:	92 2b       	or	r25, r18
      ea:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT |= 1<<LCD_RS; 
      ec:	da 9a       	sbi	0x1b, 2	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; 
      ee:	db 9a       	sbi	0x1b, 3	; 27
      f0:	ef e1       	ldi	r30, 0x1F	; 31
      f2:	f3 e0       	ldi	r31, 0x03	; 3
      f4:	31 97       	sbiw	r30, 0x01	; 1
      f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_DATA+0x14>
      f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_DATA+0x1a>
      fa:	00 00       	nop
	_delay_us(200);
	LCD_DATA_PORT &= ~(1<<LCD_EN); 
      fc:	db 98       	cbi	0x1b, 3	; 27
      fe:	ef e1       	ldi	r30, 0x1F	; 31
     100:	f3 e0       	ldi	r31, 0x03	; 3
     102:	31 97       	sbiw	r30, 0x01	; 1
     104:	f1 f7       	brne	.-4      	; 0x102 <LCD_DATA+0x22>
     106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_DATA+0x28>
     108:	00 00       	nop
	_delay_us(200);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data << 4);
     10a:	2b b3       	in	r18, 0x1b	; 27
     10c:	f0 e1       	ldi	r31, 0x10	; 16
     10e:	8f 9f       	mul	r24, r31
     110:	c0 01       	movw	r24, r0
     112:	11 24       	eor	r1, r1
     114:	92 2f       	mov	r25, r18
     116:	9f 70       	andi	r25, 0x0F	; 15
     118:	89 2b       	or	r24, r25
     11a:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; 
     11c:	db 9a       	sbi	0x1b, 3	; 27
     11e:	8f e1       	ldi	r24, 0x1F	; 31
     120:	93 e0       	ldi	r25, 0x03	; 3
     122:	01 97       	sbiw	r24, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <LCD_DATA+0x42>
     126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_DATA+0x48>
     128:	00 00       	nop
	_delay_us(200);
	LCD_DATA_PORT &= ~(1<<LCD_EN); 
     12a:	db 98       	cbi	0x1b, 3	; 27
     12c:	08 95       	ret

0000012e <LCD_INITIALIZE>:
}
void LCD_INITIALIZE(void)
{
	LCD_DATA_DDR = 0xFC;
     12e:	8c ef       	ldi	r24, 0xFC	; 252
     130:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PORT &= ~(1<<LCD_EN);
     132:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     134:	2f ef       	ldi	r18, 0xFF	; 255
     136:	83 ec       	ldi	r24, 0xC3	; 195
     138:	99 e0       	ldi	r25, 0x09	; 9
     13a:	21 50       	subi	r18, 0x01	; 1
     13c:	80 40       	sbci	r24, 0x00	; 0
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	e1 f7       	brne	.-8      	; 0x13a <LCD_INITIALIZE+0xc>
     142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_INITIALIZE+0x16>
     144:	00 00       	nop
	_delay_ms(200);
	LCD_CMND(0x33);
     146:	83 e3       	ldi	r24, 0x33	; 51
     148:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     14c:	2f ef       	ldi	r18, 0xFF	; 255
     14e:	89 ef       	ldi	r24, 0xF9	; 249
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	21 50       	subi	r18, 0x01	; 1
     154:	80 40       	sbci	r24, 0x00	; 0
     156:	90 40       	sbci	r25, 0x00	; 0
     158:	e1 f7       	brne	.-8      	; 0x152 <LCD_INITIALIZE+0x24>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_INITIALIZE+0x2e>
     15c:	00 00       	nop
	_delay_ms(20);
	LCD_CMND(0x32);
     15e:	82 e3       	ldi	r24, 0x32	; 50
     160:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     164:	2f ef       	ldi	r18, 0xFF	; 255
     166:	89 ef       	ldi	r24, 0xF9	; 249
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	21 50       	subi	r18, 0x01	; 1
     16c:	80 40       	sbci	r24, 0x00	; 0
     16e:	90 40       	sbci	r25, 0x00	; 0
     170:	e1 f7       	brne	.-8      	; 0x16a <LCD_INITIALIZE+0x3c>
     172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_INITIALIZE+0x46>
     174:	00 00       	nop
	_delay_ms(20);
	LCD_CMND(0x28);
     176:	88 e2       	ldi	r24, 0x28	; 40
     178:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     17c:	2f ef       	ldi	r18, 0xFF	; 255
     17e:	89 ef       	ldi	r24, 0xF9	; 249
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	21 50       	subi	r18, 0x01	; 1
     184:	80 40       	sbci	r24, 0x00	; 0
     186:	90 40       	sbci	r25, 0x00	; 0
     188:	e1 f7       	brne	.-8      	; 0x182 <LCD_INITIALIZE+0x54>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_INITIALIZE+0x5e>
     18c:	00 00       	nop
	_delay_ms(20);
	LCD_CMND(0x0C);
     18e:	8c e0       	ldi	r24, 0x0C	; 12
     190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     194:	2f ef       	ldi	r18, 0xFF	; 255
     196:	89 ef       	ldi	r24, 0xF9	; 249
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	21 50       	subi	r18, 0x01	; 1
     19c:	80 40       	sbci	r24, 0x00	; 0
     19e:	90 40       	sbci	r25, 0x00	; 0
     1a0:	e1 f7       	brne	.-8      	; 0x19a <LCD_INITIALIZE+0x6c>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_INITIALIZE+0x76>
     1a4:	00 00       	nop
	_delay_ms(20);
	LCD_CMND(0x01);
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     1ac:	2f ef       	ldi	r18, 0xFF	; 255
     1ae:	89 ef       	ldi	r24, 0xF9	; 249
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	21 50       	subi	r18, 0x01	; 1
     1b4:	80 40       	sbci	r24, 0x00	; 0
     1b6:	90 40       	sbci	r25, 0x00	; 0
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <LCD_INITIALIZE+0x84>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_INITIALIZE+0x8e>
     1bc:	00 00       	nop
     1be:	08 95       	ret

000001c0 <LCD_CLEAR>:
	_delay_ms(20);
}
void LCD_CLEAR(void)
{
	LCD_CMND(0x01);
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     1c6:	8f e3       	ldi	r24, 0x3F	; 63
     1c8:	9f e1       	ldi	r25, 0x1F	; 31
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_CLEAR+0xa>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_CLEAR+0x10>
     1d0:	00 00       	nop
     1d2:	08 95       	ret

000001d4 <LCD_PRINT>:
	_delay_ms(2);
}
void LCD_PRINT(char * str)
{
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ec 01       	movw	r28, r24
	unsigned char i=0;
	while(str[i] != 0)
     1dc:	88 81       	ld	r24, Y
     1de:	88 23       	and	r24, r24
     1e0:	71 f0       	breq	.+28     	; 0x1fe <LCD_PRINT+0x2a>
	LCD_CMND(0x01);
	_delay_ms(2);
}
void LCD_PRINT(char * str)
{
	unsigned char i=0;
     1e2:	10 e0       	ldi	r17, 0x00	; 0
	while(str[i] != 0)
	{
		LCD_DATA(str[i]);
     1e4:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		i++;
     1e8:	1f 5f       	subi	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ea:	85 e3       	ldi	r24, 0x35	; 53
     1ec:	8a 95       	dec	r24
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_PRINT+0x18>
     1f0:	00 00       	nop
	_delay_ms(2);
}
void LCD_PRINT(char * str)
{
	unsigned char i=0;
	while(str[i] != 0)
     1f2:	fe 01       	movw	r30, r28
     1f4:	e1 0f       	add	r30, r17
     1f6:	f1 1d       	adc	r31, r1
     1f8:	80 81       	ld	r24, Z
     1fa:	81 11       	cpse	r24, r1
     1fc:	f3 cf       	rjmp	.-26     	; 0x1e4 <LCD_PRINT+0x10>
	{
		LCD_DATA(str[i]);
		i++;
		_delay_us(10);
	}
}
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	08 95       	ret

00000206 <LCD_SET_CURSER>:
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	29 f4       	brne	.+10     	; 0x214 <LCD_SET_CURSER+0xe>
	LCD_CMND(0x7F+x);
     20a:	86 2f       	mov	r24, r22
     20c:	81 58       	subi	r24, 0x81	; 129
     20e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     212:	08 95       	ret
	else if(y==2)
     214:	82 30       	cpi	r24, 0x02	; 2
     216:	21 f4       	brne	.+8      	; 0x220 <LCD_SET_CURSER+0x1a>
	LCD_CMND(0xBF+x);
     218:	86 2f       	mov	r24, r22
     21a:	81 54       	subi	r24, 0x41	; 65
     21c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     220:	08 95       	ret

00000222 <LCD_NUM>:
}
void LCD_NUM(unsigned char num)
{
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	c8 2f       	mov	r28, r24
	LCD_DATA(num/10 + 0x30);
     228:	dd ec       	ldi	r29, 0xCD	; 205
     22a:	8d 9f       	mul	r24, r29
     22c:	d1 2d       	mov	r29, r1
     22e:	11 24       	eor	r1, r1
     230:	d6 95       	lsr	r29
     232:	d6 95       	lsr	r29
     234:	d6 95       	lsr	r29
     236:	8d 2f       	mov	r24, r29
     238:	80 5d       	subi	r24, 0xD0	; 208
     23a:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(num%10 + 0x30);
     23e:	dd 0f       	add	r29, r29
     240:	8d 2f       	mov	r24, r29
     242:	88 0f       	add	r24, r24
     244:	88 0f       	add	r24, r24
     246:	d8 0f       	add	r29, r24
     248:	8c 2f       	mov	r24, r28
     24a:	8d 1b       	sub	r24, r29
     24c:	80 5d       	subi	r24, 0xD0	; 208
     24e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	08 95       	ret

00000258 <PORT_INITIALIZE>:

void PORT_INITIALIZE()
{
	SENSOR_DDR = 0x00;
     258:	14 ba       	out	0x14, r1	; 20
	SENSOR_PORT = 0xFF;
     25a:	8f ef       	ldi	r24, 0xFF	; 255
     25c:	85 bb       	out	0x15, r24	; 21
	MOTOR_DDR = 0xFF;
     25e:	81 bb       	out	0x11, r24	; 17
	MOTOR_PORT = 0x00;
     260:	12 ba       	out	0x12, r1	; 18
     262:	08 95       	ret

00000264 <SET_INITIAL_INFO>:
}

void SET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
	SENSOR_PORT = 0xFF;
	MOTOR_DDR = 0xFF;
	MOTOR_PORT = 0x00;
}

void SET_INITIAL_INFO()
     268:	46 e4       	ldi	r20, 0x46	; 70
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	12 c0       	rjmp	.+36     	; 0x292 <SET_INITIAL_INFO+0x2e>
     26e:	df 01       	movw	r26, r30
     270:	11 97       	sbiw	r26, 0x01	; 1
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details1[i][j].X=i;
     272:	8c 93       	st	X, r24
			details1[i][j].Y=j;
     274:	20 83       	st	Z, r18
	SENSOR_PORT = 0xFF;
	MOTOR_DDR = 0xFF;
	MOTOR_PORT = 0x00;
}

void SET_INITIAL_INFO()
     276:	df 01       	movw	r26, r30
     278:	13 97       	sbiw	r26, 0x03	; 3
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details1[i][j].X=i;
			details1[i][j].Y=j;
			details1[i][j].status = UNVISITED;
     27a:	1c 92       	st	X, r1
	SENSOR_PORT = 0xFF;
	MOTOR_DDR = 0xFF;
	MOTOR_PORT = 0x00;
}

void SET_INITIAL_INFO()
     27c:	df 01       	movw	r26, r30
     27e:	12 97       	sbiw	r26, 0x02	; 2
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details1[i][j].X=i;
			details1[i][j].Y=j;
			details1[i][j].status = UNVISITED;
			details1[i][j].priority = 0;
     280:	1c 92       	st	X, r1
     282:	2f 5f       	subi	r18, 0xFF	; 255
     284:	3a 96       	adiw	r30, 0x0a	; 10
void SET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
     286:	27 30       	cpi	r18, 0x07	; 7
     288:	91 f7       	brne	.-28     	; 0x26e <SET_INITIAL_INFO+0xa>
}

void SET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	85 30       	cpi	r24, 0x05	; 5
     28e:	91 05       	cpc	r25, r1
     290:	49 f0       	breq	.+18     	; 0x2a4 <SET_INITIAL_INFO+0x40>
	SENSOR_PORT = 0xFF;
	MOTOR_DDR = 0xFF;
	MOTOR_PORT = 0x00;
}

void SET_INITIAL_INFO()
     292:	48 9f       	mul	r20, r24
     294:	f0 01       	movw	r30, r0
     296:	49 9f       	mul	r20, r25
     298:	f0 0d       	add	r31, r0
     29a:	11 24       	eor	r1, r1
     29c:	e9 55       	subi	r30, 0x59	; 89
     29e:	fc 4f       	sbci	r31, 0xFC	; 252
     2a0:	23 2f       	mov	r18, r19
     2a2:	e5 cf       	rjmp	.-54     	; 0x26e <SET_INITIAL_INFO+0xa>
     2a4:	08 95       	ret

000002a6 <DEFINE_DESTINATION>:
}

void DEFINE_DESTINATION()
{
	unsigned i;
	for (i=0;i<destinationCounter;i++)
     2a6:	20 91 60 00 	lds	r18, 0x0060
     2aa:	22 23       	and	r18, r18
     2ac:	89 f0       	breq	.+34     	; 0x2d0 <DEFINE_DESTINATION+0x2a>
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	e9 e9       	ldi	r30, 0x99	; 153
     2b2:	f2 e0       	ldi	r31, 0x02	; 2
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
	{
		destination[i].X = 2;
     2b8:	52 e0       	ldi	r21, 0x02	; 2
			details1[i][j].priority = 0;
		}
	}
}

void DEFINE_DESTINATION()
     2ba:	df 01       	movw	r26, r30
     2bc:	11 97       	sbiw	r26, 0x01	; 1
{
	unsigned i;
	for (i=0;i<destinationCounter;i++)
	{
		destination[i].X = 2;
     2be:	5c 93       	st	X, r21
			details1[i][j].priority = 0;
		}
	}
}

void DEFINE_DESTINATION()
     2c0:	48 2f       	mov	r20, r24
     2c2:	4f 5f       	subi	r20, 0xFF	; 255
{
	unsigned i;
	for (i=0;i<destinationCounter;i++)
	{
		destination[i].X = 2;
		destination[i].Y = i+1;
     2c4:	40 83       	st	Z, r20
}

void DEFINE_DESTINATION()
{
	unsigned i;
	for (i=0;i<destinationCounter;i++)
     2c6:	01 96       	adiw	r24, 0x01	; 1
     2c8:	3a 96       	adiw	r30, 0x0a	; 10
     2ca:	82 17       	cp	r24, r18
     2cc:	93 07       	cpc	r25, r19
     2ce:	a8 f3       	brcs	.-22     	; 0x2ba <DEFINE_DESTINATION+0x14>
     2d0:	08 95       	ret

000002d2 <SOUND_BUZZER>:
	}
}

void SOUND_BUZZER()
{
	DDRB = 0x03;
     2d2:	83 e0       	ldi	r24, 0x03	; 3
     2d4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x01;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2da:	2f ef       	ldi	r18, 0xFF	; 255
     2dc:	87 e8       	ldi	r24, 0x87	; 135
     2de:	93 e1       	ldi	r25, 0x13	; 19
     2e0:	21 50       	subi	r18, 0x01	; 1
     2e2:	80 40       	sbci	r24, 0x00	; 0
     2e4:	90 40       	sbci	r25, 0x00	; 0
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <SOUND_BUZZER+0xe>
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <SOUND_BUZZER+0x18>
     2ea:	00 00       	nop
	_delay_ms(400);
	PORTB = 0x00;
     2ec:	18 ba       	out	0x18, r1	; 24
     2ee:	08 95       	ret

000002f0 <BOT_MOVE>:
}

void BOT_MOVE(unsigned char direction)
{
	MOTOR_PORT &= 0b00000000;
     2f0:	92 b3       	in	r25, 0x12	; 18
     2f2:	12 ba       	out	0x12, r1	; 18
	switch(direction)
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	81 f0       	breq	.+32     	; 0x318 <BOT_MOVE+0x28>
     2f8:	28 f4       	brcc	.+10     	; 0x304 <BOT_MOVE+0x14>
     2fa:	88 23       	and	r24, r24
     2fc:	49 f0       	breq	.+18     	; 0x310 <BOT_MOVE+0x20>
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	d1 f4       	brne	.+52     	; 0x336 <BOT_MOVE+0x46>
     302:	08 c0       	rjmp	.+16     	; 0x314 <BOT_MOVE+0x24>
     304:	84 30       	cpi	r24, 0x04	; 4
     306:	81 f0       	breq	.+32     	; 0x328 <BOT_MOVE+0x38>
     308:	58 f0       	brcs	.+22     	; 0x320 <BOT_MOVE+0x30>
     30a:	85 30       	cpi	r24, 0x05	; 5
     30c:	a1 f4       	brne	.+40     	; 0x336 <BOT_MOVE+0x46>
     30e:	10 c0       	rjmp	.+32     	; 0x330 <BOT_MOVE+0x40>
	{
		case LEFT:
		MOTOR_PORT |= 0b10000000;
     310:	97 9a       	sbi	0x12, 7	; 18
		break;
     312:	08 95       	ret
		case RIGHT:
		MOTOR_PORT |= 0b01000000;
     314:	96 9a       	sbi	0x12, 6	; 18
		break;
     316:	08 95       	ret
		case FORWARD:
		MOTOR_PORT |= 0b11000000;
     318:	82 b3       	in	r24, 0x12	; 18
     31a:	80 6c       	ori	r24, 0xC0	; 192
     31c:	82 bb       	out	0x12, r24	; 18
		break;
     31e:	08 95       	ret
		case BACKWARD:
		MOTOR_PORT |= 0b00110000;
     320:	82 b3       	in	r24, 0x12	; 18
     322:	80 63       	ori	r24, 0x30	; 48
     324:	82 bb       	out	0x12, r24	; 18
		break;
     326:	08 95       	ret
		case LEFT_BACK:
		MOTOR_PORT |= 0b10010000;
     328:	82 b3       	in	r24, 0x12	; 18
     32a:	80 69       	ori	r24, 0x90	; 144
     32c:	82 bb       	out	0x12, r24	; 18
		break;
     32e:	08 95       	ret
		case RIGHT_BACK:
		MOTOR_PORT |= 0b01100000;
     330:	82 b3       	in	r24, 0x12	; 18
     332:	80 66       	ori	r24, 0x60	; 96
     334:	82 bb       	out	0x12, r24	; 18
     336:	08 95       	ret

00000338 <BLOCK_LIFT>:
	}
}

void BLOCK_LIFT(unsigned char direction)
{
	MOTOR_PORT &= 0b00000000;
     338:	92 b3       	in	r25, 0x12	; 18
     33a:	12 ba       	out	0x12, r1	; 18
	if(direction == FORWARD)
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	11 f4       	brne	.+4      	; 0x344 <BLOCK_LIFT+0xc>
		MOTOR_PORT |= 0b00000001;
     340:	90 9a       	sbi	0x12, 0	; 18
     342:	08 95       	ret
	else if (direction == BACKWARD)
     344:	83 30       	cpi	r24, 0x03	; 3
     346:	09 f4       	brne	.+2      	; 0x34a <BLOCK_LIFT+0x12>
		MOTOR_PORT |= 0b00000010;
     348:	91 9a       	sbi	0x12, 1	; 18
     34a:	08 95       	ret

0000034c <BLOCK_HOLD>:
}

void BLOCK_HOLD(unsigned char direction)
{
		MOTOR_PORT &= 0b00000000;
     34c:	92 b3       	in	r25, 0x12	; 18
     34e:	12 ba       	out	0x12, r1	; 18
		if(direction == FORWARD)
     350:	82 30       	cpi	r24, 0x02	; 2
     352:	11 f4       	brne	.+4      	; 0x358 <BLOCK_HOLD+0xc>
			MOTOR_PORT |= 0b00000100;
     354:	92 9a       	sbi	0x12, 2	; 18
     356:	08 95       	ret
		else if (direction == BACKWARD)
     358:	83 30       	cpi	r24, 0x03	; 3
     35a:	09 f4       	brne	.+2      	; 0x35e <BLOCK_HOLD+0x12>
			MOTOR_PORT |= 0b00001000;
     35c:	93 9a       	sbi	0x12, 3	; 18
     35e:	08 95       	ret

00000360 <STOP_N_UPDATE_XY>:
	}
}

void STOP_N_UPDATE_XY()
{
	MOTOR_PORT = 0x00;
     360:	12 ba       	out	0x12, r1	; 18
	if (dir == 'N')	Y++;
     362:	80 91 62 00 	lds	r24, 0x0062
     366:	8e 34       	cpi	r24, 0x4E	; 78
     368:	31 f4       	brne	.+12     	; 0x376 <STOP_N_UPDATE_XY+0x16>
     36a:	80 91 04 01 	lds	r24, 0x0104
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	80 93 04 01 	sts	0x0104, r24
     374:	17 c0       	rjmp	.+46     	; 0x3a4 <STOP_N_UPDATE_XY+0x44>
	else if (dir == 'E')	X--;
     376:	85 34       	cpi	r24, 0x45	; 69
     378:	31 f4       	brne	.+12     	; 0x386 <STOP_N_UPDATE_XY+0x26>
     37a:	80 91 05 01 	lds	r24, 0x0105
     37e:	81 50       	subi	r24, 0x01	; 1
     380:	80 93 05 01 	sts	0x0105, r24
     384:	0f c0       	rjmp	.+30     	; 0x3a4 <STOP_N_UPDATE_XY+0x44>
	else if (dir == 'W')	X++;
     386:	87 35       	cpi	r24, 0x57	; 87
     388:	31 f4       	brne	.+12     	; 0x396 <STOP_N_UPDATE_XY+0x36>
     38a:	80 91 05 01 	lds	r24, 0x0105
     38e:	8f 5f       	subi	r24, 0xFF	; 255
     390:	80 93 05 01 	sts	0x0105, r24
     394:	07 c0       	rjmp	.+14     	; 0x3a4 <STOP_N_UPDATE_XY+0x44>
	else if (dir == 'S')	Y--	;
     396:	83 35       	cpi	r24, 0x53	; 83
     398:	29 f4       	brne	.+10     	; 0x3a4 <STOP_N_UPDATE_XY+0x44>
     39a:	80 91 04 01 	lds	r24, 0x0104
     39e:	81 50       	subi	r24, 0x01	; 1
     3a0:	80 93 04 01 	sts	0x0104, r24
	count++;
     3a4:	80 91 01 01 	lds	r24, 0x0101
     3a8:	8f 5f       	subi	r24, 0xFF	; 255
     3aa:	80 93 01 01 	sts	0x0101, r24
	SOUND_BUZZER();
     3ae:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SOUND_BUZZER>
     3b2:	08 95       	ret

000003b4 <FOLLOW_LINE_BACKWARD>:
	}
}

void FOLLOW_LINE_BACKWARD()
{
	if (((SENSOR_PIN & GRID_SENSOR_MASK) == 0x00 && prev_count==FALSE))
     3b4:	83 b3       	in	r24, 0x13	; 19
     3b6:	87 70       	andi	r24, 0x07	; 7
     3b8:	69 f4       	brne	.+26     	; 0x3d4 <FOLLOW_LINE_BACKWARD+0x20>
     3ba:	80 91 ff 00 	lds	r24, 0x00FF
     3be:	81 11       	cpse	r24, r1
     3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <FOLLOW_LINE_BACKWARD+0x20>
	{
		prev_count= TRUE;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 ff 00 	sts	0x00FF, r24
		count++;
     3c8:	80 91 01 01 	lds	r24, 0x0101
     3cc:	8f 5f       	subi	r24, 0xFF	; 255
     3ce:	80 93 01 01 	sts	0x0101, r24
     3d2:	08 95       	ret
	}
	else if (((SENSOR_PIN & GRID_SENSOR_MASK) == 0x00 && prev_count==TRUE))
     3d4:	83 b3       	in	r24, 0x13	; 19
     3d6:	87 70       	andi	r24, 0x07	; 7
     3d8:	41 f4       	brne	.+16     	; 0x3ea <FOLLOW_LINE_BACKWARD+0x36>
     3da:	80 91 ff 00 	lds	r24, 0x00FF
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	21 f4       	brne	.+8      	; 0x3ea <FOLLOW_LINE_BACKWARD+0x36>
	{
		BOT_MOVE(BACKWARD);
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     3e8:	08 95       	ret
	}
	else
	{
		BOT_MOVE(BACKWARD);
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     3f0:	08 95       	ret

000003f2 <TURN_90>:
	}
}

void TURN_90(unsigned char direction)
{
	MOTOR_PORT = 0x00;
     3f2:	12 ba       	out	0x12, r1	; 18
     3f4:	2f ef       	ldi	r18, 0xFF	; 255
     3f6:	30 e7       	ldi	r19, 0x70	; 112
     3f8:	92 e0       	ldi	r25, 0x02	; 2
     3fa:	21 50       	subi	r18, 0x01	; 1
     3fc:	30 40       	sbci	r19, 0x00	; 0
     3fe:	90 40       	sbci	r25, 0x00	; 0
     400:	e1 f7       	brne	.-8      	; 0x3fa <TURN_90+0x8>
     402:	00 c0       	rjmp	.+0      	; 0x404 <TURN_90+0x12>
     404:	00 00       	nop
	_delay_ms(50);
	if(direction == LEFT)
     406:	81 11       	cpse	r24, r1
     408:	48 c0       	rjmp	.+144    	; 0x49a <TURN_90+0xa8>
	{
		BOT_MOVE(FORWARD);
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     410:	2f ef       	ldi	r18, 0xFF	; 255
     412:	32 e5       	ldi	r19, 0x52	; 82
     414:	87 e0       	ldi	r24, 0x07	; 7
     416:	21 50       	subi	r18, 0x01	; 1
     418:	30 40       	sbci	r19, 0x00	; 0
     41a:	80 40       	sbci	r24, 0x00	; 0
     41c:	e1 f7       	brne	.-8      	; 0x416 <TURN_90+0x24>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <TURN_90+0x2e>
     420:	00 00       	nop
		_delay_ms(150);
		BOT_MOVE(LEFT_BACK);
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     428:	9f ef       	ldi	r25, 0xFF	; 255
     42a:	29 e6       	ldi	r18, 0x69	; 105
     42c:	38 e1       	ldi	r19, 0x18	; 24
     42e:	91 50       	subi	r25, 0x01	; 1
     430:	20 40       	sbci	r18, 0x00	; 0
     432:	30 40       	sbci	r19, 0x00	; 0
     434:	e1 f7       	brne	.-8      	; 0x42e <TURN_90+0x3c>
     436:	00 c0       	rjmp	.+0      	; 0x438 <TURN_90+0x46>
     438:	00 00       	nop
		_delay_ms(TURN_90_DELAY);
		if((SENSOR_PIN & GRID_SENSOR_MASK) == 0b00000111) BOT_MOVE(LEFT_BACK);
     43a:	83 b3       	in	r24, 0x13	; 19
     43c:	87 70       	andi	r24, 0x07	; 7
     43e:	87 30       	cpi	r24, 0x07	; 7
     440:	19 f4       	brne	.+6      	; 0x448 <TURN_90+0x56>
     442:	84 e0       	ldi	r24, 0x04	; 4
     444:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     448:	8f e7       	ldi	r24, 0x7F	; 127
     44a:	99 ea       	ldi	r25, 0xA9	; 169
     44c:	23 e0       	ldi	r18, 0x03	; 3
     44e:	81 50       	subi	r24, 0x01	; 1
     450:	90 40       	sbci	r25, 0x00	; 0
     452:	20 40       	sbci	r18, 0x00	; 0
     454:	e1 f7       	brne	.-8      	; 0x44e <TURN_90+0x5c>
     456:	00 c0       	rjmp	.+0      	; 0x458 <TURN_90+0x66>
     458:	00 00       	nop
		_delay_ms(75);
		MOTOR_PORT = 0x00;
     45a:	12 ba       	out	0x12, r1	; 18
		switch(dir)
     45c:	80 91 62 00 	lds	r24, 0x0062
     460:	8e 34       	cpi	r24, 0x4E	; 78
     462:	59 f0       	breq	.+22     	; 0x47a <TURN_90+0x88>
     464:	20 f4       	brcc	.+8      	; 0x46e <TURN_90+0x7c>
     466:	85 34       	cpi	r24, 0x45	; 69
     468:	09 f0       	breq	.+2      	; 0x46c <TURN_90+0x7a>
     46a:	5f c0       	rjmp	.+190    	; 0x52a <TURN_90+0x138>
     46c:	0a c0       	rjmp	.+20     	; 0x482 <TURN_90+0x90>
     46e:	83 35       	cpi	r24, 0x53	; 83
     470:	81 f0       	breq	.+32     	; 0x492 <TURN_90+0xa0>
     472:	87 35       	cpi	r24, 0x57	; 87
     474:	09 f0       	breq	.+2      	; 0x478 <TURN_90+0x86>
     476:	59 c0       	rjmp	.+178    	; 0x52a <TURN_90+0x138>
     478:	08 c0       	rjmp	.+16     	; 0x48a <TURN_90+0x98>
		{
			case 'N':
				dir = 'W';
     47a:	87 e5       	ldi	r24, 0x57	; 87
     47c:	80 93 62 00 	sts	0x0062, r24
				break;
     480:	08 95       	ret
			case 'E':
				dir = 'N';
     482:	8e e4       	ldi	r24, 0x4E	; 78
     484:	80 93 62 00 	sts	0x0062, r24
				break;
     488:	08 95       	ret
			case  'W':
				dir ='S';
     48a:	83 e5       	ldi	r24, 0x53	; 83
     48c:	80 93 62 00 	sts	0x0062, r24
				break;
     490:	08 95       	ret
			case 'S':
				dir = 'E';
     492:	85 e4       	ldi	r24, 0x45	; 69
     494:	80 93 62 00 	sts	0x0062, r24
				break;
     498:	08 95       	ret
		}
	}
	
	else if(direction == RIGHT)
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	09 f0       	breq	.+2      	; 0x4a0 <TURN_90+0xae>
     49e:	45 c0       	rjmp	.+138    	; 0x52a <TURN_90+0x138>
	{
		BOT_MOVE(FORWARD);
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     4a6:	3f ef       	ldi	r19, 0xFF	; 255
     4a8:	82 e5       	ldi	r24, 0x52	; 82
     4aa:	97 e0       	ldi	r25, 0x07	; 7
     4ac:	31 50       	subi	r19, 0x01	; 1
     4ae:	80 40       	sbci	r24, 0x00	; 0
     4b0:	90 40       	sbci	r25, 0x00	; 0
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <TURN_90+0xba>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <TURN_90+0xc4>
     4b6:	00 00       	nop
		_delay_ms(150);
		BOT_MOVE(RIGHT_BACK);
     4b8:	85 e0       	ldi	r24, 0x05	; 5
     4ba:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     4be:	2f ef       	ldi	r18, 0xFF	; 255
     4c0:	39 e6       	ldi	r19, 0x69	; 105
     4c2:	88 e1       	ldi	r24, 0x18	; 24
     4c4:	21 50       	subi	r18, 0x01	; 1
     4c6:	30 40       	sbci	r19, 0x00	; 0
     4c8:	80 40       	sbci	r24, 0x00	; 0
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <TURN_90+0xd2>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <TURN_90+0xdc>
     4ce:	00 00       	nop
		_delay_ms(TURN_90_DELAY);
		if((SENSOR_PIN & GRID_SENSOR_MASK) == 0b00000111) BOT_MOVE(RIGHT_BACK);
     4d0:	83 b3       	in	r24, 0x13	; 19
     4d2:	87 70       	andi	r24, 0x07	; 7
     4d4:	87 30       	cpi	r24, 0x07	; 7
     4d6:	19 f4       	brne	.+6      	; 0x4de <TURN_90+0xec>
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     4de:	9f e7       	ldi	r25, 0x7F	; 127
     4e0:	29 ea       	ldi	r18, 0xA9	; 169
     4e2:	33 e0       	ldi	r19, 0x03	; 3
     4e4:	91 50       	subi	r25, 0x01	; 1
     4e6:	20 40       	sbci	r18, 0x00	; 0
     4e8:	30 40       	sbci	r19, 0x00	; 0
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <TURN_90+0xf2>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <TURN_90+0xfc>
     4ee:	00 00       	nop
		_delay_ms(75);
		MOTOR_PORT = 0x00;		
     4f0:	12 ba       	out	0x12, r1	; 18
		switch(dir)
     4f2:	80 91 62 00 	lds	r24, 0x0062
     4f6:	8e 34       	cpi	r24, 0x4E	; 78
     4f8:	49 f0       	breq	.+18     	; 0x50c <TURN_90+0x11a>
     4fa:	18 f4       	brcc	.+6      	; 0x502 <TURN_90+0x110>
     4fc:	85 34       	cpi	r24, 0x45	; 69
     4fe:	a9 f4       	brne	.+42     	; 0x52a <TURN_90+0x138>
     500:	09 c0       	rjmp	.+18     	; 0x514 <TURN_90+0x122>
     502:	83 35       	cpi	r24, 0x53	; 83
     504:	79 f0       	breq	.+30     	; 0x524 <TURN_90+0x132>
     506:	87 35       	cpi	r24, 0x57	; 87
     508:	81 f4       	brne	.+32     	; 0x52a <TURN_90+0x138>
     50a:	08 c0       	rjmp	.+16     	; 0x51c <TURN_90+0x12a>
		{
			case 'N':
				dir = 'E';
     50c:	85 e4       	ldi	r24, 0x45	; 69
     50e:	80 93 62 00 	sts	0x0062, r24
				break;
     512:	08 95       	ret
			case 'E':
				dir = 'S';
     514:	83 e5       	ldi	r24, 0x53	; 83
     516:	80 93 62 00 	sts	0x0062, r24
				break;
     51a:	08 95       	ret
			case  'W':
				dir ='N';
     51c:	8e e4       	ldi	r24, 0x4E	; 78
     51e:	80 93 62 00 	sts	0x0062, r24
				break;
     522:	08 95       	ret
			case 'S':
				dir = 'W';
     524:	87 e5       	ldi	r24, 0x57	; 87
     526:	80 93 62 00 	sts	0x0062, r24
     52a:	08 95       	ret

0000052c <TURN_180>:
	}
}

void TURN_180()
{
	MOTOR_PORT = 0x00;
     52c:	12 ba       	out	0x12, r1	; 18
     52e:	2f ef       	ldi	r18, 0xFF	; 255
     530:	81 ee       	ldi	r24, 0xE1	; 225
     532:	94 e0       	ldi	r25, 0x04	; 4
     534:	21 50       	subi	r18, 0x01	; 1
     536:	80 40       	sbci	r24, 0x00	; 0
     538:	90 40       	sbci	r25, 0x00	; 0
     53a:	e1 f7       	brne	.-8      	; 0x534 <TURN_180+0x8>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <TURN_180+0x12>
     53e:	00 00       	nop
	_delay_ms(100);
	BOT_MOVE(FORWARD);
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     546:	2f ef       	ldi	r18, 0xFF	; 255
     548:	82 e5       	ldi	r24, 0x52	; 82
     54a:	97 e0       	ldi	r25, 0x07	; 7
     54c:	21 50       	subi	r18, 0x01	; 1
     54e:	80 40       	sbci	r24, 0x00	; 0
     550:	90 40       	sbci	r25, 0x00	; 0
     552:	e1 f7       	brne	.-8      	; 0x54c <TURN_180+0x20>
     554:	00 c0       	rjmp	.+0      	; 0x556 <TURN_180+0x2a>
     556:	00 00       	nop
	_delay_ms(150);
	BOT_MOVE(LEFT_BACK);
     558:	84 e0       	ldi	r24, 0x04	; 4
     55a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     55e:	2f ef       	ldi	r18, 0xFF	; 255
     560:	89 ed       	ldi	r24, 0xD9	; 217
     562:	9f e2       	ldi	r25, 0x2F	; 47
     564:	21 50       	subi	r18, 0x01	; 1
     566:	80 40       	sbci	r24, 0x00	; 0
     568:	90 40       	sbci	r25, 0x00	; 0
     56a:	e1 f7       	brne	.-8      	; 0x564 <TURN_180+0x38>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <TURN_180+0x42>
     56e:	00 00       	nop
	_delay_ms(TURN_180_DELAY);
	MOTOR_PORT = 0x00;
     570:	12 ba       	out	0x12, r1	; 18
	if((SENSOR_PIN & GRID_SENSOR_MASK) == 0b00000111) BOT_MOVE(LEFT_BACK);
     572:	83 b3       	in	r24, 0x13	; 19
     574:	87 70       	andi	r24, 0x07	; 7
     576:	87 30       	cpi	r24, 0x07	; 7
     578:	19 f4       	brne	.+6      	; 0x580 <TURN_180+0x54>
     57a:	84 e0       	ldi	r24, 0x04	; 4
     57c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     580:	2f ef       	ldi	r18, 0xFF	; 255
     582:	81 ee       	ldi	r24, 0xE1	; 225
     584:	94 e0       	ldi	r25, 0x04	; 4
     586:	21 50       	subi	r18, 0x01	; 1
     588:	80 40       	sbci	r24, 0x00	; 0
     58a:	90 40       	sbci	r25, 0x00	; 0
     58c:	e1 f7       	brne	.-8      	; 0x586 <TURN_180+0x5a>
     58e:	00 c0       	rjmp	.+0      	; 0x590 <TURN_180+0x64>
     590:	00 00       	nop
	_delay_ms(100);
	MOTOR_PORT = 0x00;
     592:	12 ba       	out	0x12, r1	; 18
	switch(dir)
     594:	80 91 62 00 	lds	r24, 0x0062
     598:	8e 34       	cpi	r24, 0x4E	; 78
     59a:	49 f0       	breq	.+18     	; 0x5ae <TURN_180+0x82>
     59c:	18 f4       	brcc	.+6      	; 0x5a4 <TURN_180+0x78>
     59e:	85 34       	cpi	r24, 0x45	; 69
     5a0:	a9 f4       	brne	.+42     	; 0x5cc <TURN_180+0xa0>
     5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <TURN_180+0x8a>
     5a4:	83 35       	cpi	r24, 0x53	; 83
     5a6:	79 f0       	breq	.+30     	; 0x5c6 <TURN_180+0x9a>
     5a8:	87 35       	cpi	r24, 0x57	; 87
     5aa:	81 f4       	brne	.+32     	; 0x5cc <TURN_180+0xa0>
     5ac:	08 c0       	rjmp	.+16     	; 0x5be <TURN_180+0x92>
	{
		case 'N':
			dir = 'S';
     5ae:	83 e5       	ldi	r24, 0x53	; 83
     5b0:	80 93 62 00 	sts	0x0062, r24
			break;
     5b4:	0b c0       	rjmp	.+22     	; 0x5cc <TURN_180+0xa0>
		case 'E':
			dir = 'W';
     5b6:	87 e5       	ldi	r24, 0x57	; 87
     5b8:	80 93 62 00 	sts	0x0062, r24
			break;
     5bc:	07 c0       	rjmp	.+14     	; 0x5cc <TURN_180+0xa0>
		case  'W':
			dir ='E';
     5be:	85 e4       	ldi	r24, 0x45	; 69
     5c0:	80 93 62 00 	sts	0x0062, r24
			break;
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <TURN_180+0xa0>
		case 'S':
			dir = 'N';
     5c6:	8e e4       	ldi	r24, 0x4E	; 78
     5c8:	80 93 62 00 	sts	0x0062, r24
			break;
	}
	loop_count++;
     5cc:	80 91 f8 00 	lds	r24, 0x00F8
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
     5d2:	80 93 f8 00 	sts	0x00F8, r24
     5d6:	08 95       	ret

000005d8 <ENQUEUE>:
		MOVE_NEXT_NODE(X,Y,nextNode.X,nextNode.Y);
	}
}

void ENQUEUE(STRUCTURE q)
{
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	2a 97       	sbiw	r28, 0x0a	; 10
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	09 83       	std	Y+1, r16	; 0x01
     5f2:	1a 83       	std	Y+2, r17	; 0x02
     5f4:	2b 83       	std	Y+3, r18	; 0x03
     5f6:	3c 83       	std	Y+4, r19	; 0x04
     5f8:	4d 83       	std	Y+5, r20	; 0x05
     5fa:	5e 83       	std	Y+6, r21	; 0x06
     5fc:	6f 83       	std	Y+7, r22	; 0x07
     5fe:	78 87       	std	Y+8, r23	; 0x08
     600:	89 87       	std	Y+9, r24	; 0x09
     602:	9a 87       	std	Y+10, r25	; 0x0a
	QUEUE[Qfront] = q;
     604:	20 91 fb 00 	lds	r18, 0x00FB
     608:	a2 2f       	mov	r26, r18
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	aa 0f       	add	r26, r26
     60e:	bb 1f       	adc	r27, r27
     610:	cd 01       	movw	r24, r26
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	a8 0f       	add	r26, r24
     61c:	b9 1f       	adc	r27, r25
     61e:	a8 53       	subi	r26, 0x38	; 56
     620:	bd 4f       	sbci	r27, 0xFD	; 253
     622:	8a e0       	ldi	r24, 0x0A	; 10
     624:	fe 01       	movw	r30, r28
     626:	31 96       	adiw	r30, 0x01	; 1
     628:	01 90       	ld	r0, Z+
     62a:	0d 92       	st	X+, r0
     62c:	8a 95       	dec	r24
     62e:	e1 f7       	brne	.-8      	; 0x628 <ENQUEUE+0x50>
	Qfront++;
     630:	2f 5f       	subi	r18, 0xFF	; 255
     632:	20 93 fb 00 	sts	0x00FB, r18
}
     636:	2a 96       	adiw	r28, 0x0a	; 10
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <DEQUEUE>:

STRUCTURE DEQUEUE()
{
	Qrear++;
     64c:	20 91 fa 00 	lds	r18, 0x00FA
     650:	2f 5f       	subi	r18, 0xFF	; 255
     652:	20 93 fa 00 	sts	0x00FA, r18
	return (QUEUE[Qrear-1]);
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	21 50       	subi	r18, 0x01	; 1
     65a:	31 09       	sbc	r19, r1
     65c:	f9 01       	movw	r30, r18
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	22 0f       	add	r18, r18
     664:	33 1f       	adc	r19, r19
     666:	22 0f       	add	r18, r18
     668:	33 1f       	adc	r19, r19
     66a:	22 0f       	add	r18, r18
     66c:	33 1f       	adc	r19, r19
     66e:	e2 0f       	add	r30, r18
     670:	f3 1f       	adc	r31, r19
     672:	e8 53       	subi	r30, 0x38	; 56
     674:	fd 4f       	sbci	r31, 0xFD	; 253
     676:	2a e0       	ldi	r18, 0x0A	; 10
     678:	dc 01       	movw	r26, r24
     67a:	01 90       	ld	r0, Z+
     67c:	0d 92       	st	X+, r0
     67e:	2a 95       	dec	r18
     680:	e1 f7       	brne	.-8      	; 0x67a <DEQUEUE+0x2e>
}
     682:	08 95       	ret

00000684 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY>:
	return INFINITE;
}

void REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY(unsigned char index, unsigned char arrayType)
{
	if(arrayType == BLOCK)
     684:	62 30       	cpi	r22, 0x02	; 2
     686:	41 f5       	brne	.+80     	; 0x6d8 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY+0x54>
	{
		block[index] = block[blockCounter-1];
     688:	20 91 f9 00 	lds	r18, 0x00F9
     68c:	a8 2f       	mov	r26, r24
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	aa 0f       	add	r26, r26
     692:	bb 1f       	adc	r27, r27
     694:	cd 01       	movw	r24, r26
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	a8 0f       	add	r26, r24
     6a0:	b9 1f       	adc	r27, r25
     6a2:	aa 5f       	subi	r26, 0xFA	; 250
     6a4:	be 4f       	sbci	r27, 0xFE	; 254
     6a6:	82 2f       	mov	r24, r18
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	fc 01       	movw	r30, r24
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	e8 0f       	add	r30, r24
     6c0:	f9 1f       	adc	r31, r25
     6c2:	ea 5f       	subi	r30, 0xFA	; 250
     6c4:	fe 4f       	sbci	r31, 0xFE	; 254
     6c6:	8a e0       	ldi	r24, 0x0A	; 10
     6c8:	01 90       	ld	r0, Z+
     6ca:	0d 92       	st	X+, r0
     6cc:	8a 95       	dec	r24
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY+0x44>
		blockCounter--;
     6d0:	21 50       	subi	r18, 0x01	; 1
     6d2:	20 93 f9 00 	sts	0x00F9, r18
     6d6:	08 95       	ret
	}
	else if(arrayType == DESTINATION)
     6d8:	63 30       	cpi	r22, 0x03	; 3
     6da:	39 f5       	brne	.+78     	; 0x72a <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY+0xa6>
	{
		destination[index] = destination[destinationCounter-1];
     6dc:	20 91 60 00 	lds	r18, 0x0060
     6e0:	a8 2f       	mov	r26, r24
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	aa 0f       	add	r26, r26
     6e6:	bb 1f       	adc	r27, r27
     6e8:	cd 01       	movw	r24, r26
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	a8 0f       	add	r26, r24
     6f4:	b9 1f       	adc	r27, r25
     6f6:	aa 56       	subi	r26, 0x6A	; 106
     6f8:	bd 4f       	sbci	r27, 0xFD	; 253
     6fa:	82 2f       	mov	r24, r18
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	fc 01       	movw	r30, r24
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	e8 0f       	add	r30, r24
     714:	f9 1f       	adc	r31, r25
     716:	ea 56       	subi	r30, 0x6A	; 106
     718:	fd 4f       	sbci	r31, 0xFD	; 253
     71a:	8a e0       	ldi	r24, 0x0A	; 10
     71c:	01 90       	ld	r0, Z+
     71e:	0d 92       	st	X+, r0
     720:	8a 95       	dec	r24
     722:	e1 f7       	brne	.-8      	; 0x71c <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY+0x98>
		destinationCounter--;
     724:	21 50       	subi	r18, 0x01	; 1
     726:	20 93 60 00 	sts	0x0060, r18
     72a:	08 95       	ret

0000072c <ADD_THE_BLOCKS_TO_ARRAY>:
	block_caught = FALSE;
	MOVE_BACK_IF_BLOCK();
}

void ADD_THE_BLOCKS_TO_ARRAY()
{
     72c:	cf 93       	push	r28
	unsigned i;
	for (i=0;i<blockCounter;i++)
     72e:	40 91 f9 00 	lds	r20, 0x00F9
     732:	44 23       	and	r20, r20
     734:	19 f1       	breq	.+70     	; 0x77c <ADD_THE_BLOCKS_TO_ARRAY+0x50>
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	e9 e0       	ldi	r30, 0x09	; 9
     73a:	f1 e0       	ldi	r31, 0x01	; 1
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
	{
		details1[block[i].X][block[i].Y].status = BLOCK;
     740:	c6 e4       	ldi	r28, 0x46	; 70
     742:	72 e0       	ldi	r23, 0x02	; 2
	MOTOR_PORT = 0x00;
	block_caught = FALSE;
	MOVE_BACK_IF_BLOCK();
}

void ADD_THE_BLOCKS_TO_ARRAY()
     744:	df 01       	movw	r26, r30
     746:	11 97       	sbiw	r26, 0x01	; 1
{
	unsigned i;
	for (i=0;i<blockCounter;i++)
	{
		details1[block[i].X][block[i].Y].status = BLOCK;
     748:	6c 91       	ld	r22, X
     74a:	80 81       	ld	r24, Z
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	dc 01       	movw	r26, r24
     754:	aa 0f       	add	r26, r26
     756:	bb 1f       	adc	r27, r27
     758:	aa 0f       	add	r26, r26
     75a:	bb 1f       	adc	r27, r27
     75c:	8a 0f       	add	r24, r26
     75e:	9b 1f       	adc	r25, r27
     760:	dc 01       	movw	r26, r24
     762:	c6 9f       	mul	r28, r22
     764:	a0 0d       	add	r26, r0
     766:	b1 1d       	adc	r27, r1
     768:	11 24       	eor	r1, r1
     76a:	ac 55       	subi	r26, 0x5C	; 92
     76c:	bc 4f       	sbci	r27, 0xFC	; 252
     76e:	7c 93       	st	X, r23
}

void ADD_THE_BLOCKS_TO_ARRAY()
{
	unsigned i;
	for (i=0;i<blockCounter;i++)
     770:	2f 5f       	subi	r18, 0xFF	; 255
     772:	3f 4f       	sbci	r19, 0xFF	; 255
     774:	3a 96       	adiw	r30, 0x0a	; 10
     776:	24 17       	cp	r18, r20
     778:	35 07       	cpc	r19, r21
     77a:	20 f3       	brcs	.-56     	; 0x744 <ADD_THE_BLOCKS_TO_ARRAY+0x18>
		LCD_DATA(block[i].Y+0x30);
		LCD_PRINT(")");
		_delay_ms(1000);
		*/
	}
}
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <RESET_INITIAL_INFO>:

void RESET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(1000);
		*/
	}
}

void RESET_INITIAL_INFO()
     784:	46 e4       	ldi	r20, 0x46	; 70
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	0f c0       	rjmp	.+30     	; 0x7a8 <RESET_INITIAL_INFO+0x28>
     78a:	df 01       	movw	r26, r30
     78c:	11 97       	sbiw	r26, 0x01	; 1
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details1[i][j].X=i;
     78e:	8c 93       	st	X, r24
			details1[i][j].Y=j;
     790:	20 83       	st	Z, r18
		_delay_ms(1000);
		*/
	}
}

void RESET_INITIAL_INFO()
     792:	df 01       	movw	r26, r30
     794:	13 97       	sbiw	r26, 0x03	; 3
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details1[i][j].X=i;
			details1[i][j].Y=j;
			details1[i][j].status = UNVISITED;
     796:	1c 92       	st	X, r1
     798:	2f 5f       	subi	r18, 0xFF	; 255
     79a:	3a 96       	adiw	r30, 0x0a	; 10
void RESET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
     79c:	27 30       	cpi	r18, 0x07	; 7
     79e:	a9 f7       	brne	.-22     	; 0x78a <RESET_INITIAL_INFO+0xa>
}

void RESET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	85 30       	cpi	r24, 0x05	; 5
     7a4:	91 05       	cpc	r25, r1
     7a6:	49 f0       	breq	.+18     	; 0x7ba <RESET_INITIAL_INFO+0x3a>
		_delay_ms(1000);
		*/
	}
}

void RESET_INITIAL_INFO()
     7a8:	48 9f       	mul	r20, r24
     7aa:	f0 01       	movw	r30, r0
     7ac:	49 9f       	mul	r20, r25
     7ae:	f0 0d       	add	r31, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	e9 55       	subi	r30, 0x59	; 89
     7b4:	fc 4f       	sbci	r31, 0xFC	; 252
     7b6:	23 2f       	mov	r18, r19
     7b8:	e8 cf       	rjmp	.-48     	; 0x78a <RESET_INITIAL_INFO+0xa>
     7ba:	08 95       	ret

000007bc <main>:
int main(void)
{
	unsigned char i=0;
	while(1)
	{
		if(mode == 0)
     7bc:	80 91 fc 00 	lds	r24, 0x00FC
     7c0:	81 11       	cpse	r24, r1
     7c2:	58 c0       	rjmp	.+176    	; 0x874 <__stack+0x15>
		{
			LCD_INITIALIZE();
     7c4:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_INITIALIZE>
			PORT_INITIALIZE();
     7c8:	0e 94 2c 01 	call	0x258	; 0x258 <PORT_INITIALIZE>
			SET_INITIAL_INFO();
     7cc:	0e 94 32 01 	call	0x264	; 0x264 <SET_INITIAL_INFO>
			LCD_SET_CURSER(1,1);
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
			LCD_PRINT("Initializing...");
     7d8:	83 e6       	ldi	r24, 0x63	; 99
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
			LCD_SET_CURSER(2,1);
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
			LCD_PRINT("Please Wait...");
     7e8:	83 e7       	ldi	r24, 0x73	; 115
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
     7f0:	2f ef       	ldi	r18, 0xFF	; 255
     7f2:	83 ed       	ldi	r24, 0xD3	; 211
     7f4:	90 e3       	ldi	r25, 0x30	; 48
     7f6:	21 50       	subi	r18, 0x01	; 1
     7f8:	80 40       	sbci	r24, 0x00	; 0
     7fa:	90 40       	sbci	r25, 0x00	; 0
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <main+0x3a>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <main+0x44>
     800:	00 00       	nop
				{
					SOUND_BUZZER();
					LCD_CLEAR();
					LCD_PRINT("BOT @ Start Node");
					_delay_ms(1000);
					currentMode = INTERMEDIATE_MODE;
     802:	12 e0       	ldi	r17, 0x02	; 2
					FOLLOW_ONE_NODE(FORWARD);
			
			//------BLOCK SEARCH MODE STARTS HERE-------
					currentMode = BLOCK_SEARCH_MODE;
					X=0;Y=0;
					details1[0][0].status = VISITED;
     804:	c4 ea       	ldi	r28, 0xA4	; 164
     806:	d3 e0       	ldi	r29, 0x03	; 3
     808:	01 e0       	ldi	r16, 0x01	; 1
			LCD_SET_CURSER(2,1);
			LCD_PRINT("Please Wait...");
			_delay_ms(1000);
			while(1)
			{
				if((SENSOR_PIN & GRID_SENSOR_MASK) == 0x00)
     80a:	93 b3       	in	r25, 0x13	; 19
     80c:	97 70       	andi	r25, 0x07	; 7
     80e:	e9 f7       	brne	.-6      	; 0x80a <main+0x4e>
				{
					SOUND_BUZZER();
     810:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SOUND_BUZZER>
					LCD_CLEAR();
     814:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
					LCD_PRINT("BOT @ Start Node");
     818:	82 e8       	ldi	r24, 0x82	; 130
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
     820:	2f ef       	ldi	r18, 0xFF	; 255
     822:	83 ed       	ldi	r24, 0xD3	; 211
     824:	90 e3       	ldi	r25, 0x30	; 48
     826:	21 50       	subi	r18, 0x01	; 1
     828:	80 40       	sbci	r24, 0x00	; 0
     82a:	90 40       	sbci	r25, 0x00	; 0
     82c:	e1 f7       	brne	.-8      	; 0x826 <main+0x6a>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <main+0x74>
     830:	00 00       	nop
					_delay_ms(1000);
					currentMode = INTERMEDIATE_MODE;
     832:	10 93 00 01 	sts	0x0100, r17
					FOLLOW_ONE_NODE(FORWARD);
     836:	81 2f       	mov	r24, r17
     838:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
			
			//------BLOCK SEARCH MODE STARTS HERE-------
					currentMode = BLOCK_SEARCH_MODE;
     83c:	10 92 00 01 	sts	0x0100, r1
					X=0;Y=0;
     840:	10 92 05 01 	sts	0x0105, r1
     844:	10 92 04 01 	sts	0x0104, r1
					details1[0][0].status = VISITED;
     848:	08 83       	st	Y, r16
					LCD_CLEAR();
     84a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
					LCD_PRINT("BLOCK SEARCH MOD");
     84e:	83 e9       	ldi	r24, 0x93	; 147
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
					BOT_MOVE(FORWARD);
     856:	81 2f       	mov	r24, r17
     858:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     85c:	2f ef       	ldi	r18, 0xFF	; 255
     85e:	83 ec       	ldi	r24, 0xC3	; 195
     860:	99 e0       	ldi	r25, 0x09	; 9
     862:	21 50       	subi	r18, 0x01	; 1
     864:	80 40       	sbci	r24, 0x00	; 0
     866:	90 40       	sbci	r25, 0x00	; 0
     868:	e1 f7       	brne	.-8      	; 0x862 <__stack+0x3>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <__stack+0xd>
     86c:	00 00       	nop
					_delay_ms(200);
					DETECT_NEXT_NODE();
     86e:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DETECT_NEXT_NODE>
     872:	cb cf       	rjmp	.-106    	; 0x80a <main+0x4e>
				
			//------BLOCK SEARCH MODE ENDS HERE-------
	
		}
			//------BLOCK SOLVE MODE STARTS HERE--------
			LCD_CLEAR();
     874:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
			LCD_PRINT("  SOLVE MODE");
     878:	84 ea       	ldi	r24, 0xA4	; 164
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
     880:	2f ef       	ldi	r18, 0xFF	; 255
     882:	83 ed       	ldi	r24, 0xD3	; 211
     884:	90 e3       	ldi	r25, 0x30	; 48
     886:	21 50       	subi	r18, 0x01	; 1
     888:	80 40       	sbci	r24, 0x00	; 0
     88a:	90 40       	sbci	r25, 0x00	; 0
     88c:	e1 f7       	brne	.-8      	; 0x886 <__stack+0x27>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <__stack+0x31>
     890:	00 00       	nop
			_delay_ms(1000);
			currentMode = SOLVE_MODE;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	80 93 00 01 	sts	0x0100, r24
			RESET_INITIAL_INFO();
     898:	0e 94 c0 03 	call	0x780	; 0x780 <RESET_INITIAL_INFO>
			ADD_THE_BLOCKS_TO_ARRAY();
     89c:	0e 94 96 03 	call	0x72c	; 0x72c <ADD_THE_BLOCKS_TO_ARRAY>
			DEFINE_DESTINATION();
     8a0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DEFINE_DESTINATION>
     8a4:	c5 e0       	ldi	r28, 0x05	; 5
			for (i=0;i<ROUND2;i++)
			{
				LCD_CLEAR();
     8a6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
				MOVE_TO_NEAREST_BLOCK();
     8aa:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <MOVE_TO_NEAREST_BLOCK>
				MOVE_TO_APPROPRIATE_DESTINATION();
     8ae:	0e 94 68 10 	call	0x20d0	; 0x20d0 <MOVE_TO_APPROPRIATE_DESTINATION>
     8b2:	c1 50       	subi	r28, 0x01	; 1
			_delay_ms(1000);
			currentMode = SOLVE_MODE;
			RESET_INITIAL_INFO();
			ADD_THE_BLOCKS_TO_ARRAY();
			DEFINE_DESTINATION();
			for (i=0;i<ROUND2;i++)
     8b4:	c1 f7       	brne	.-16     	; 0x8a6 <__stack+0x47>
				LCD_CLEAR();
				MOVE_TO_NEAREST_BLOCK();
				MOVE_TO_APPROPRIATE_DESTINATION();
			}
			//------BLOCK SOLVE MODE ENDS HERE--------
			DIGKSTRA(X,Y,0,0,TRUE);
     8b6:	01 e0       	ldi	r16, 0x01	; 1
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	60 91 04 01 	lds	r22, 0x0104
     8c0:	80 91 05 01 	lds	r24, 0x0105
     8c4:	0e 94 72 07 	call	0xee4	; 0xee4 <DIGKSTRA>
			MOTOR_PORT = 0x00;
     8c8:	12 ba       	out	0x12, r1	; 18
			SOUND_BUZZER();
     8ca:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SOUND_BUZZER>
     8ce:	2f ef       	ldi	r18, 0xFF	; 255
     8d0:	81 ee       	ldi	r24, 0xE1	; 225
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	21 50       	subi	r18, 0x01	; 1
     8d6:	80 40       	sbci	r24, 0x00	; 0
     8d8:	90 40       	sbci	r25, 0x00	; 0
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <__stack+0x75>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <__stack+0x7f>
     8de:	00 00       	nop
			_delay_ms(100);
			SOUND_BUZZER();
     8e0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SOUND_BUZZER>
     8e4:	2f ef       	ldi	r18, 0xFF	; 255
     8e6:	81 ee       	ldi	r24, 0xE1	; 225
     8e8:	94 e0       	ldi	r25, 0x04	; 4
     8ea:	21 50       	subi	r18, 0x01	; 1
     8ec:	80 40       	sbci	r24, 0x00	; 0
     8ee:	90 40       	sbci	r25, 0x00	; 0
     8f0:	e1 f7       	brne	.-8      	; 0x8ea <__stack+0x8b>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <__stack+0x95>
     8f4:	00 00       	nop
			_delay_ms(100);
			SOUND_BUZZER();
     8f6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SOUND_BUZZER>
			LCD_CLEAR();
     8fa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
			LCD_PRINT("TASK COMPLETED!!");
     8fe:	81 eb       	ldi	r24, 0xB1	; 177
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
     906:	ff cf       	rjmp	.-2      	; 0x906 <__stack+0xa7>

00000908 <MOVE_BACK_IF_BLOCK>:
		else if (direction == BACKWARD)
			MOTOR_PORT |= 0b00001000;
}

void MOVE_BACK_IF_BLOCK()
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
	BOT_MOVE(BACKWARD);
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     912:	2f ef       	ldi	r18, 0xFF	; 255
     914:	88 ef       	ldi	r24, 0xF8	; 248
     916:	95 e1       	ldi	r25, 0x15	; 21
     918:	21 50       	subi	r18, 0x01	; 1
     91a:	80 40       	sbci	r24, 0x00	; 0
     91c:	90 40       	sbci	r25, 0x00	; 0
     91e:	e1 f7       	brne	.-8      	; 0x918 <MOVE_BACK_IF_BLOCK+0x10>
     920:	00 c0       	rjmp	.+0      	; 0x922 <MOVE_BACK_IF_BLOCK+0x1a>
     922:	00 00       	nop
	_delay_ms(450);
	MOTOR_PORT = 0x00;
     924:	12 ba       	out	0x12, r1	; 18
	TCCR1A = 0xA1; //PWM MODE FOR TIMER1A and TIMER1B
     926:	81 ea       	ldi	r24, 0xA1	; 161
     928:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x01;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	8e bd       	out	0x2e, r24	; 46
	while((SENSOR_PIN & GRID_SENSOR_MASK) != 0x00)
     92e:	83 b3       	in	r24, 0x13	; 19
     930:	87 70       	andi	r24, 0x07	; 7
     932:	61 f0       	breq	.+24     	; 0x94c <MOVE_BACK_IF_BLOCK+0x44>
	{
		OCR1A = 180;
     934:	c4 eb       	ldi	r28, 0xB4	; 180
     936:	d0 e0       	ldi	r29, 0x00	; 0
     938:	db bd       	out	0x2b, r29	; 43
     93a:	ca bd       	out	0x2a, r28	; 42
		OCR1B = 180;
     93c:	d9 bd       	out	0x29, r29	; 41
     93e:	c8 bd       	out	0x28, r28	; 40
		BOT_MOVE(BACKWARD);
     940:	83 e0       	ldi	r24, 0x03	; 3
     942:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
	BOT_MOVE(BACKWARD);
	_delay_ms(450);
	MOTOR_PORT = 0x00;
	TCCR1A = 0xA1; //PWM MODE FOR TIMER1A and TIMER1B
	TCCR1B = 0x01;
	while((SENSOR_PIN & GRID_SENSOR_MASK) != 0x00)
     946:	83 b3       	in	r24, 0x13	; 19
     948:	87 70       	andi	r24, 0x07	; 7
     94a:	b1 f7       	brne	.-20     	; 0x938 <MOVE_BACK_IF_BLOCK+0x30>
	{
		OCR1A = 180;
		OCR1B = 180;
		BOT_MOVE(BACKWARD);
	}
	MOTOR_PORT = 0x00;
     94c:	12 ba       	out	0x12, r1	; 18
	BOT_MOVE(FORWARD);
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     954:	2f ef       	ldi	r18, 0xFF	; 255
     956:	83 ec       	ldi	r24, 0xC3	; 195
     958:	99 e0       	ldi	r25, 0x09	; 9
     95a:	21 50       	subi	r18, 0x01	; 1
     95c:	80 40       	sbci	r24, 0x00	; 0
     95e:	90 40       	sbci	r25, 0x00	; 0
     960:	e1 f7       	brne	.-8      	; 0x95a <MOVE_BACK_IF_BLOCK+0x52>
     962:	00 c0       	rjmp	.+0      	; 0x964 <MOVE_BACK_IF_BLOCK+0x5c>
     964:	00 00       	nop
	_delay_ms(200);
	MOTOR_PORT = 0x00;		
     966:	12 ba       	out	0x12, r1	; 18
	TCCR1A = 0x00;
     968:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x00;
     96a:	1e bc       	out	0x2e, r1	; 46
	OCR1A = 255;
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	9b bd       	out	0x2b, r25	; 43
     972:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 255;
     974:	99 bd       	out	0x29, r25	; 41
     976:	88 bd       	out	0x28, r24	; 40
	if(dir == 'N')
     978:	80 91 62 00 	lds	r24, 0x0062
     97c:	8e 34       	cpi	r24, 0x4E	; 78
     97e:	31 f4       	brne	.+12     	; 0x98c <MOVE_BACK_IF_BLOCK+0x84>
	Y--;
     980:	80 91 04 01 	lds	r24, 0x0104
     984:	81 50       	subi	r24, 0x01	; 1
     986:	80 93 04 01 	sts	0x0104, r24
     98a:	17 c0       	rjmp	.+46     	; 0x9ba <MOVE_BACK_IF_BLOCK+0xb2>
	else if(dir=='E')
     98c:	85 34       	cpi	r24, 0x45	; 69
     98e:	31 f4       	brne	.+12     	; 0x99c <MOVE_BACK_IF_BLOCK+0x94>
	X++;
     990:	80 91 05 01 	lds	r24, 0x0105
     994:	8f 5f       	subi	r24, 0xFF	; 255
     996:	80 93 05 01 	sts	0x0105, r24
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <MOVE_BACK_IF_BLOCK+0xb2>
	else if(dir=='W')
     99c:	87 35       	cpi	r24, 0x57	; 87
     99e:	31 f4       	brne	.+12     	; 0x9ac <MOVE_BACK_IF_BLOCK+0xa4>
	X--;
     9a0:	80 91 05 01 	lds	r24, 0x0105
     9a4:	81 50       	subi	r24, 0x01	; 1
     9a6:	80 93 05 01 	sts	0x0105, r24
     9aa:	07 c0       	rjmp	.+14     	; 0x9ba <MOVE_BACK_IF_BLOCK+0xb2>
	else if(dir=='S')
     9ac:	83 35       	cpi	r24, 0x53	; 83
     9ae:	29 f4       	brne	.+10     	; 0x9ba <MOVE_BACK_IF_BLOCK+0xb2>
	Y++	;
     9b0:	80 91 04 01 	lds	r24, 0x0104
     9b4:	8f 5f       	subi	r24, 0xFF	; 255
     9b6:	80 93 04 01 	sts	0x0104, r24
	prev_count = TRUE;
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	80 93 ff 00 	sts	0x00FF, r24
	
	if(currentMode == BLOCK_SEARCH_MODE && blockCounter < 5)	DETECT_NEXT_NODE();
     9c0:	80 91 00 01 	lds	r24, 0x0100
     9c4:	81 11       	cpse	r24, r1
     9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <MOVE_BACK_IF_BLOCK+0xcc>
     9c8:	80 91 f9 00 	lds	r24, 0x00F9
     9cc:	85 30       	cpi	r24, 0x05	; 5
     9ce:	10 f4       	brcc	.+4      	; 0x9d4 <MOVE_BACK_IF_BLOCK+0xcc>
     9d0:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DETECT_NEXT_NODE>
	if(blockCounter == 5 && currentMode == BLOCK_SEARCH_MODE)
     9d4:	80 91 f9 00 	lds	r24, 0x00F9
     9d8:	85 30       	cpi	r24, 0x05	; 5
     9da:	59 f4       	brne	.+22     	; 0x9f2 <MOVE_BACK_IF_BLOCK+0xea>
     9dc:	80 91 00 01 	lds	r24, 0x0100
     9e0:	81 11       	cpse	r24, r1
     9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <MOVE_BACK_IF_BLOCK+0xea>
	{
		mode = 1;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	80 93 fc 00 	sts	0x00FC, r24
		currentMode = SOLVE_MODE;
     9ea:	80 93 00 01 	sts	0x0100, r24
		LCD_DATA(X+0x30);
		LCD_DATA(',');
		LCD_DATA(Y+0x30);
		LCD_DATA(')');
		_delay_ms(2000);*/
		main();
     9ee:	0e 94 de 03 	call	0x7bc	; 0x7bc <main>
	}
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <BLOCK_RECORD>:

void BLOCK_RECORD()
{
	prev_block_detect = TRUE;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 fe 00 	sts	0x00FE, r24
	if(currentMode == BLOCK_SEARCH_MODE)
     9fe:	80 91 00 01 	lds	r24, 0x0100
     a02:	81 11       	cpse	r24, r1
     a04:	91 c0       	rjmp	.+290    	; 0xb28 <BLOCK_RECORD+0x130>
	{
		block[block_no].X = X;
     a06:	30 91 02 01 	lds	r19, 0x0102
     a0a:	20 91 05 01 	lds	r18, 0x0105
     a0e:	83 2f       	mov	r24, r19
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	fc 01       	movw	r30, r24
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	8e 0f       	add	r24, r30
     a22:	9f 1f       	adc	r25, r31
     a24:	fc 01       	movw	r30, r24
     a26:	ea 5f       	subi	r30, 0xFA	; 250
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	22 83       	std	Z+2, r18	; 0x02
		block[block_no].Y = Y;
     a2c:	40 91 04 01 	lds	r20, 0x0104
     a30:	83 2f       	mov	r24, r19
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	fc 01       	movw	r30, r24
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	8e 0f       	add	r24, r30
     a44:	9f 1f       	adc	r25, r31
     a46:	fc 01       	movw	r30, r24
     a48:	ea 5f       	subi	r30, 0xFA	; 250
     a4a:	fe 4f       	sbci	r31, 0xFE	; 254
     a4c:	43 83       	std	Z+3, r20	; 0x03
		details1[X][Y].status = BLOCK;
     a4e:	84 2f       	mov	r24, r20
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	fc 01       	movw	r30, r24
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	8e 0f       	add	r24, r30
     a62:	9f 1f       	adc	r25, r31
     a64:	56 e4       	ldi	r21, 0x46	; 70
     a66:	25 9f       	mul	r18, r21
     a68:	90 01       	movw	r18, r0
     a6a:	11 24       	eor	r1, r1
     a6c:	fc 01       	movw	r30, r24
     a6e:	e2 0f       	add	r30, r18
     a70:	f3 1f       	adc	r31, r19
     a72:	ec 55       	subi	r30, 0x5C	; 92
     a74:	fc 4f       	sbci	r31, 0xFC	; 252
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	80 83       	st	Z, r24
		//details2[X][Y].status = BLOCK;
		details1[X][Y].priority = -1;
     a7a:	84 2f       	mov	r24, r20
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	fc 01       	movw	r30, r24
     a84:	ee 0f       	add	r30, r30
     a86:	ff 1f       	adc	r31, r31
     a88:	ee 0f       	add	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	8e 0f       	add	r24, r30
     a8e:	9f 1f       	adc	r25, r31
     a90:	28 0f       	add	r18, r24
     a92:	39 1f       	adc	r19, r25
     a94:	f9 01       	movw	r30, r18
     a96:	ec 55       	subi	r30, 0x5C	; 92
     a98:	fc 4f       	sbci	r31, 0xFC	; 252
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	81 83       	std	Z+1, r24	; 0x01
		LCD_CLEAR();
     a9e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
		LCD_PRINT("BLOCK");
     aa2:	82 ec       	ldi	r24, 0xC2	; 194
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
		LCD_DATA(block_no+0x31);
     aaa:	80 91 02 01 	lds	r24, 0x0102
     aae:	8f 5c       	subi	r24, 0xCF	; 207
     ab0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_PRINT(" @ ");
     ab4:	88 ec       	ldi	r24, 0xC8	; 200
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
		LCD_DATA('(');
     abc:	88 e2       	ldi	r24, 0x28	; 40
     abe:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(block[block_no].X+0x30);
     ac2:	80 91 02 01 	lds	r24, 0x0102
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	fc 01       	movw	r30, r24
     ace:	ee 0f       	add	r30, r30
     ad0:	ff 1f       	adc	r31, r31
     ad2:	ee 0f       	add	r30, r30
     ad4:	ff 1f       	adc	r31, r31
     ad6:	8e 0f       	add	r24, r30
     ad8:	9f 1f       	adc	r25, r31
     ada:	fc 01       	movw	r30, r24
     adc:	ea 5f       	subi	r30, 0xFA	; 250
     ade:	fe 4f       	sbci	r31, 0xFE	; 254
     ae0:	82 81       	ldd	r24, Z+2	; 0x02
     ae2:	80 5d       	subi	r24, 0xD0	; 208
     ae4:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(',');
     ae8:	8c e2       	ldi	r24, 0x2C	; 44
     aea:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(block[block_no].Y+0x30);
     aee:	80 91 02 01 	lds	r24, 0x0102
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	fc 01       	movw	r30, r24
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	8e 0f       	add	r24, r30
     b04:	9f 1f       	adc	r25, r31
     b06:	fc 01       	movw	r30, r24
     b08:	ea 5f       	subi	r30, 0xFA	; 250
     b0a:	fe 4f       	sbci	r31, 0xFE	; 254
     b0c:	83 81       	ldd	r24, Z+3	; 0x03
     b0e:	80 5d       	subi	r24, 0xD0	; 208
     b10:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(')');
     b14:	89 e2       	ldi	r24, 0x29	; 41
     b16:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		coord_count++;
     b1a:	80 91 61 00 	lds	r24, 0x0061
     b1e:	8f 5f       	subi	r24, 0xFF	; 255
     b20:	80 93 61 00 	sts	0x0061, r24
		MOVE_BACK_IF_BLOCK();
     b24:	0e 94 84 04 	call	0x908	; 0x908 <MOVE_BACK_IF_BLOCK>
     b28:	08 95       	ret

00000b2a <DETECT_BLOCK>:
	SOUND_BUZZER();
}

char DETECT_BLOCK()
{
	if((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0xF0 && prev_block_detect == FALSE && block_caught == FALSE)
     b2a:	83 b3       	in	r24, 0x13	; 19
     b2c:	88 7f       	andi	r24, 0xF8	; 248
     b2e:	80 3f       	cpi	r24, 0xF0	; 240
     b30:	a9 f4       	brne	.+42     	; 0xb5c <DETECT_BLOCK+0x32>
     b32:	80 91 fe 00 	lds	r24, 0x00FE
     b36:	81 11       	cpse	r24, r1
     b38:	11 c0       	rjmp	.+34     	; 0xb5c <DETECT_BLOCK+0x32>
     b3a:	80 91 fd 00 	lds	r24, 0x00FD
     b3e:	81 11       	cpse	r24, r1
     b40:	0d c0       	rjmp	.+26     	; 0xb5c <DETECT_BLOCK+0x32>
	{
		STOP_N_UPDATE_XY();
     b42:	0e 94 b0 01 	call	0x360	; 0x360 <STOP_N_UPDATE_XY>
		block_no = 0;
     b46:	10 92 02 01 	sts	0x0102, r1
		blockCounter++;
     b4a:	80 91 f9 00 	lds	r24, 0x00F9
     b4e:	8f 5f       	subi	r24, 0xFF	; 255
     b50:	80 93 f9 00 	sts	0x00F9, r24
		BLOCK_RECORD();
     b54:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <BLOCK_RECORD>
		return TRUE;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	08 95       	ret
	}
	if ((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0xE0 && prev_block_detect == FALSE && block_caught == FALSE)
     b5c:	83 b3       	in	r24, 0x13	; 19
     b5e:	88 7f       	andi	r24, 0xF8	; 248
     b60:	80 3e       	cpi	r24, 0xE0	; 224
     b62:	b1 f4       	brne	.+44     	; 0xb90 <DETECT_BLOCK+0x66>
     b64:	80 91 fe 00 	lds	r24, 0x00FE
     b68:	81 11       	cpse	r24, r1
     b6a:	12 c0       	rjmp	.+36     	; 0xb90 <DETECT_BLOCK+0x66>
     b6c:	80 91 fd 00 	lds	r24, 0x00FD
     b70:	81 11       	cpse	r24, r1
     b72:	0e c0       	rjmp	.+28     	; 0xb90 <DETECT_BLOCK+0x66>
	{
		STOP_N_UPDATE_XY();
     b74:	0e 94 b0 01 	call	0x360	; 0x360 <STOP_N_UPDATE_XY>
		block_no = 1;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	80 93 02 01 	sts	0x0102, r24
		blockCounter++;
     b7e:	80 91 f9 00 	lds	r24, 0x00F9
     b82:	8f 5f       	subi	r24, 0xFF	; 255
     b84:	80 93 f9 00 	sts	0x00F9, r24
		BLOCK_RECORD();
     b88:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <BLOCK_RECORD>
		return TRUE;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	08 95       	ret
	}
	if ((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0xC0 && prev_block_detect == FALSE && block_caught == FALSE)
     b90:	83 b3       	in	r24, 0x13	; 19
     b92:	88 7f       	andi	r24, 0xF8	; 248
     b94:	80 3c       	cpi	r24, 0xC0	; 192
     b96:	b1 f4       	brne	.+44     	; 0xbc4 <DETECT_BLOCK+0x9a>
     b98:	80 91 fe 00 	lds	r24, 0x00FE
     b9c:	81 11       	cpse	r24, r1
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <DETECT_BLOCK+0x9a>
     ba0:	80 91 fd 00 	lds	r24, 0x00FD
     ba4:	81 11       	cpse	r24, r1
     ba6:	0e c0       	rjmp	.+28     	; 0xbc4 <DETECT_BLOCK+0x9a>
	{
		STOP_N_UPDATE_XY();
     ba8:	0e 94 b0 01 	call	0x360	; 0x360 <STOP_N_UPDATE_XY>
		block_no = 2;
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	80 93 02 01 	sts	0x0102, r24
		blockCounter++;
     bb2:	80 91 f9 00 	lds	r24, 0x00F9
     bb6:	8f 5f       	subi	r24, 0xFF	; 255
     bb8:	80 93 f9 00 	sts	0x00F9, r24
		BLOCK_RECORD();
     bbc:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <BLOCK_RECORD>
		return TRUE;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	08 95       	ret
	}
	if ((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0x80 && prev_block_detect == FALSE && block_caught == FALSE)
     bc4:	83 b3       	in	r24, 0x13	; 19
     bc6:	88 7f       	andi	r24, 0xF8	; 248
     bc8:	80 38       	cpi	r24, 0x80	; 128
     bca:	b1 f4       	brne	.+44     	; 0xbf8 <DETECT_BLOCK+0xce>
     bcc:	80 91 fe 00 	lds	r24, 0x00FE
     bd0:	81 11       	cpse	r24, r1
     bd2:	12 c0       	rjmp	.+36     	; 0xbf8 <DETECT_BLOCK+0xce>
     bd4:	80 91 fd 00 	lds	r24, 0x00FD
     bd8:	81 11       	cpse	r24, r1
     bda:	0e c0       	rjmp	.+28     	; 0xbf8 <DETECT_BLOCK+0xce>
	{
		STOP_N_UPDATE_XY();
     bdc:	0e 94 b0 01 	call	0x360	; 0x360 <STOP_N_UPDATE_XY>
		block_no = 3;
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	80 93 02 01 	sts	0x0102, r24
		blockCounter++;
     be6:	80 91 f9 00 	lds	r24, 0x00F9
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	80 93 f9 00 	sts	0x00F9, r24
		BLOCK_RECORD();
     bf0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <BLOCK_RECORD>
		return TRUE;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	08 95       	ret
	}
	if ((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0x00 && prev_block_detect == FALSE && block_caught == FALSE)
     bf8:	83 b3       	in	r24, 0x13	; 19
     bfa:	88 7f       	andi	r24, 0xF8	; 248
     bfc:	b1 f4       	brne	.+44     	; 0xc2a <DETECT_BLOCK+0x100>
     bfe:	80 91 fe 00 	lds	r24, 0x00FE
     c02:	81 11       	cpse	r24, r1
     c04:	12 c0       	rjmp	.+36     	; 0xc2a <DETECT_BLOCK+0x100>
     c06:	80 91 fd 00 	lds	r24, 0x00FD
     c0a:	81 11       	cpse	r24, r1
     c0c:	0e c0       	rjmp	.+28     	; 0xc2a <DETECT_BLOCK+0x100>
	{
		STOP_N_UPDATE_XY();	
     c0e:	0e 94 b0 01 	call	0x360	; 0x360 <STOP_N_UPDATE_XY>
		block_no = 4;
     c12:	84 e0       	ldi	r24, 0x04	; 4
     c14:	80 93 02 01 	sts	0x0102, r24
		blockCounter++;
     c18:	80 91 f9 00 	lds	r24, 0x00F9
     c1c:	8f 5f       	subi	r24, 0xFF	; 255
     c1e:	80 93 f9 00 	sts	0x00F9, r24
		BLOCK_RECORD();
     c22:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <BLOCK_RECORD>
		return TRUE;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	08 95       	ret
	}
	else //if(((SENSOR_PIN & 0x08) != 0x00 && block_caught == FALSE))
	{
		prev_block_detect =  FALSE;
     c2a:	10 92 fe 00 	sts	0x00FE, r1
		return FALSE;
     c2e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     c30:	08 95       	ret

00000c32 <FOLLOW_LINE_FORWARD>:

void FOLLOW_LINE_FORWARD()
{
	if(DETECT_BLOCK() == TRUE)
     c32:	0e 94 95 05 	call	0xb2a	; 0xb2a <DETECT_BLOCK>
     c36:	81 30       	cpi	r24, 0x01	; 1
     c38:	21 f4       	brne	.+8      	; 0xc42 <FOLLOW_LINE_FORWARD+0x10>
	{
		MOTOR_PORT = 0x00;
     c3a:	12 ba       	out	0x12, r1	; 18
		SOUND_BUZZER();
     c3c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SOUND_BUZZER>
     c40:	08 95       	ret
	}
			
	else if ((SENSOR_PIN & GRID_SENSOR_MASK) == 0x00 && prev_count==FALSE)
     c42:	83 b3       	in	r24, 0x13	; 19
     c44:	87 70       	andi	r24, 0x07	; 7
     c46:	09 f0       	breq	.+2      	; 0xc4a <FOLLOW_LINE_FORWARD+0x18>
     c48:	64 c0       	rjmp	.+200    	; 0xd12 <FOLLOW_LINE_FORWARD+0xe0>
     c4a:	80 91 ff 00 	lds	r24, 0x00FF
     c4e:	81 11       	cpse	r24, r1
     c50:	60 c0       	rjmp	.+192    	; 0xd12 <FOLLOW_LINE_FORWARD+0xe0>
	{
		prev_count= TRUE;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 ff 00 	sts	0x00FF, r24
		count++;
     c58:	80 91 01 01 	lds	r24, 0x0101
     c5c:	8f 5f       	subi	r24, 0xFF	; 255
     c5e:	80 93 01 01 	sts	0x0101, r24
		
		if(dir == 'N')
     c62:	80 91 62 00 	lds	r24, 0x0062
     c66:	8e 34       	cpi	r24, 0x4E	; 78
     c68:	31 f4       	brne	.+12     	; 0xc76 <FOLLOW_LINE_FORWARD+0x44>
		Y++;
     c6a:	80 91 04 01 	lds	r24, 0x0104
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	80 93 04 01 	sts	0x0104, r24
     c74:	17 c0       	rjmp	.+46     	; 0xca4 <FOLLOW_LINE_FORWARD+0x72>
		else if(dir=='E')
     c76:	85 34       	cpi	r24, 0x45	; 69
     c78:	31 f4       	brne	.+12     	; 0xc86 <FOLLOW_LINE_FORWARD+0x54>
		X--;
     c7a:	80 91 05 01 	lds	r24, 0x0105
     c7e:	81 50       	subi	r24, 0x01	; 1
     c80:	80 93 05 01 	sts	0x0105, r24
     c84:	0f c0       	rjmp	.+30     	; 0xca4 <FOLLOW_LINE_FORWARD+0x72>
		else if(dir=='W')
     c86:	87 35       	cpi	r24, 0x57	; 87
     c88:	31 f4       	brne	.+12     	; 0xc96 <FOLLOW_LINE_FORWARD+0x64>
		X++;
     c8a:	80 91 05 01 	lds	r24, 0x0105
     c8e:	8f 5f       	subi	r24, 0xFF	; 255
     c90:	80 93 05 01 	sts	0x0105, r24
     c94:	07 c0       	rjmp	.+14     	; 0xca4 <FOLLOW_LINE_FORWARD+0x72>
		else if(dir=='S')
     c96:	83 35       	cpi	r24, 0x53	; 83
     c98:	29 f4       	brne	.+10     	; 0xca4 <FOLLOW_LINE_FORWARD+0x72>
		Y--;
     c9a:	80 91 04 01 	lds	r24, 0x0104
     c9e:	81 50       	subi	r24, 0x01	; 1
     ca0:	80 93 04 01 	sts	0x0104, r24
		
		if(currentMode == BLOCK_SEARCH_MODE)
     ca4:	80 91 00 01 	lds	r24, 0x0100
     ca8:	81 11       	cpse	r24, r1
     caa:	6f c0       	rjmp	.+222    	; 0xd8a <FOLLOW_LINE_FORWARD+0x158>
		{
			details1[X][Y].status = VISITED;
     cac:	20 91 05 01 	lds	r18, 0x0105
     cb0:	40 91 04 01 	lds	r20, 0x0104
     cb4:	84 2f       	mov	r24, r20
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	fc 01       	movw	r30, r24
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	8e 0f       	add	r24, r30
     cc8:	9f 1f       	adc	r25, r31
     cca:	56 e4       	ldi	r21, 0x46	; 70
     ccc:	25 9f       	mul	r18, r21
     cce:	90 01       	movw	r18, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	fc 01       	movw	r30, r24
     cd4:	e2 0f       	add	r30, r18
     cd6:	f3 1f       	adc	r31, r19
     cd8:	ec 55       	subi	r30, 0x5C	; 92
     cda:	fc 4f       	sbci	r31, 0xFC	; 252
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 83       	st	Z, r24
			details1[X][Y].priority = 0;
     ce0:	84 2f       	mov	r24, r20
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	fc 01       	movw	r30, r24
     cea:	ee 0f       	add	r30, r30
     cec:	ff 1f       	adc	r31, r31
     cee:	ee 0f       	add	r30, r30
     cf0:	ff 1f       	adc	r31, r31
     cf2:	8e 0f       	add	r24, r30
     cf4:	9f 1f       	adc	r25, r31
     cf6:	28 0f       	add	r18, r24
     cf8:	39 1f       	adc	r19, r25
     cfa:	f9 01       	movw	r30, r18
     cfc:	ec 55       	subi	r30, 0x5C	; 92
     cfe:	fc 4f       	sbci	r31, 0xFC	; 252
     d00:	11 82       	std	Z+1, r1	; 0x01
			coord_count++;
     d02:	80 91 61 00 	lds	r24, 0x0061
     d06:	8f 5f       	subi	r24, 0xFF	; 255
     d08:	80 93 61 00 	sts	0x0061, r24
			DETECT_NEXT_NODE();
     d0c:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DETECT_NEXT_NODE>
     d10:	08 95       	ret
		}
	}
	
	else if ((SENSOR_PIN & GRID_SENSOR_MASK) == 0x00 && prev_count==TRUE)
     d12:	83 b3       	in	r24, 0x13	; 19
     d14:	87 70       	andi	r24, 0x07	; 7
     d16:	41 f4       	brne	.+16     	; 0xd28 <FOLLOW_LINE_FORWARD+0xf6>
     d18:	80 91 ff 00 	lds	r24, 0x00FF
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	21 f4       	brne	.+8      	; 0xd28 <FOLLOW_LINE_FORWARD+0xf6>
	{
		BOT_MOVE(FORWARD);
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     d26:	08 95       	ret
	}
	else if((SENSOR_PIN & GRID_SENSOR_MASK) == 0b00000101)
     d28:	83 b3       	in	r24, 0x13	; 19
     d2a:	87 70       	andi	r24, 0x07	; 7
     d2c:	85 30       	cpi	r24, 0x05	; 5
     d2e:	31 f4       	brne	.+12     	; 0xd3c <FOLLOW_LINE_FORWARD+0x10a>
	{
		BOT_MOVE(FORWARD);
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
		prev_count = FALSE;
     d36:	10 92 ff 00 	sts	0x00FF, r1
     d3a:	08 95       	ret
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK)  == 0b00000001)
     d3c:	83 b3       	in	r24, 0x13	; 19
     d3e:	87 70       	andi	r24, 0x07	; 7
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	31 f4       	brne	.+12     	; 0xd50 <FOLLOW_LINE_FORWARD+0x11e>
	{
		BOT_MOVE(LEFT);
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
		prev_count = FALSE;
     d4a:	10 92 ff 00 	sts	0x00FF, r1
     d4e:	08 95       	ret
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK)  == 0b00000011)
     d50:	83 b3       	in	r24, 0x13	; 19
     d52:	87 70       	andi	r24, 0x07	; 7
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	31 f4       	brne	.+12     	; 0xd64 <FOLLOW_LINE_FORWARD+0x132>
	{
		BOT_MOVE(LEFT);
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
		prev_count = FALSE;
     d5e:	10 92 ff 00 	sts	0x00FF, r1
     d62:	08 95       	ret
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK)  == 0b00000100)
     d64:	83 b3       	in	r24, 0x13	; 19
     d66:	87 70       	andi	r24, 0x07	; 7
     d68:	84 30       	cpi	r24, 0x04	; 4
     d6a:	31 f4       	brne	.+12     	; 0xd78 <FOLLOW_LINE_FORWARD+0x146>
	{
		BOT_MOVE(RIGHT);
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
		prev_count = FALSE;
     d72:	10 92 ff 00 	sts	0x00FF, r1
     d76:	08 95       	ret
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK)  == 0b00000110)
     d78:	83 b3       	in	r24, 0x13	; 19
     d7a:	87 70       	andi	r24, 0x07	; 7
     d7c:	86 30       	cpi	r24, 0x06	; 6
     d7e:	29 f4       	brne	.+10     	; 0xd8a <FOLLOW_LINE_FORWARD+0x158>
	{
		BOT_MOVE(RIGHT);
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
		prev_count = FALSE;
     d86:	10 92 ff 00 	sts	0x00FF, r1
     d8a:	08 95       	ret

00000d8c <FOLLOW_ONE_NODE>:
	loop_count++;
}

void FOLLOW_ONE_NODE(unsigned char direction)
{
	count = 0;
     d8c:	10 92 01 01 	sts	0x0101, r1
	if(direction == FORWARD)
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	39 f4       	brne	.+14     	; 0xda2 <FOLLOW_ONE_NODE+0x16>
	{
		while (count == 0)
		{
			FOLLOW_LINE_FORWARD();
     d94:	0e 94 19 06 	call	0xc32	; 0xc32 <FOLLOW_LINE_FORWARD>
void FOLLOW_ONE_NODE(unsigned char direction)
{
	count = 0;
	if(direction == FORWARD)
	{
		while (count == 0)
     d98:	80 91 01 01 	lds	r24, 0x0101
     d9c:	88 23       	and	r24, r24
     d9e:	d1 f3       	breq	.-12     	; 0xd94 <FOLLOW_ONE_NODE+0x8>
     da0:	08 95       	ret
		{
			FOLLOW_LINE_FORWARD();
		}
		
	}
	else if(direction == BACKWARD)
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	31 f4       	brne	.+12     	; 0xdb2 <FOLLOW_ONE_NODE+0x26>
	{
		while(count ==0 )
		{
			FOLLOW_LINE_BACKWARD();
     da6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <FOLLOW_LINE_BACKWARD>
		}
		
	}
	else if(direction == BACKWARD)
	{
		while(count ==0 )
     daa:	80 91 01 01 	lds	r24, 0x0101
     dae:	88 23       	and	r24, r24
     db0:	d1 f3       	breq	.-12     	; 0xda6 <FOLLOW_ONE_NODE+0x1a>
     db2:	08 95       	ret

00000db4 <MOVE_NEXT_NODE>:
	}
}

void MOVE_NEXT_NODE(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
	if(x2==x1 && y2==y1)
     db4:	48 13       	cpse	r20, r24
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <MOVE_NEXT_NODE+0xc>
     db8:	26 13       	cpse	r18, r22
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <MOVE_NEXT_NODE+0xc>
	{
		MOTOR_PORT = 0x00;
     dbc:	12 ba       	out	0x12, r1	; 18
     dbe:	08 95       	ret
	}
	if(y2>y1)
     dc0:	62 17       	cp	r22, r18
     dc2:	18 f5       	brcc	.+70     	; 0xe0a <MOVE_NEXT_NODE+0x56>
	{
		if(dir == 'N')
     dc4:	80 91 62 00 	lds	r24, 0x0062
     dc8:	8e 34       	cpi	r24, 0x4E	; 78
     dca:	21 f4       	brne	.+8      	; 0xdd4 <MOVE_NEXT_NODE+0x20>
		{
			FOLLOW_ONE_NODE(FORWARD);
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     dd2:	08 95       	ret
		}
		else if(dir == 'E' )
     dd4:	85 34       	cpi	r24, 0x45	; 69
     dd6:	39 f4       	brne	.+14     	; 0xde6 <MOVE_NEXT_NODE+0x32>
		{
			TURN_90(LEFT);
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     de4:	08 95       	ret
		}
		else if(dir == 'W')
     de6:	87 35       	cpi	r24, 0x57	; 87
     de8:	39 f4       	brne	.+14     	; 0xdf8 <MOVE_NEXT_NODE+0x44>
		{
			TURN_90(RIGHT);
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     df6:	08 95       	ret
		}
		else if(dir == 'S')
     df8:	83 35       	cpi	r24, 0x53	; 83
     dfa:	09 f0       	breq	.+2      	; 0xdfe <MOVE_NEXT_NODE+0x4a>
     dfc:	72 c0       	rjmp	.+228    	; 0xee2 <MOVE_NEXT_NODE+0x12e>
		{
			TURN_180();
     dfe:	0e 94 96 02 	call	0x52c	; 0x52c <TURN_180>
			FOLLOW_ONE_NODE(FORWARD);
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     e08:	08 95       	ret
		}
		
	}
	else if(y2<y1)
     e0a:	26 17       	cp	r18, r22
     e0c:	18 f5       	brcc	.+70     	; 0xe54 <MOVE_NEXT_NODE+0xa0>
	{
		if(dir == 'N')
     e0e:	80 91 62 00 	lds	r24, 0x0062
     e12:	8e 34       	cpi	r24, 0x4E	; 78
     e14:	31 f4       	brne	.+12     	; 0xe22 <MOVE_NEXT_NODE+0x6e>
		{
			TURN_180();
     e16:	0e 94 96 02 	call	0x52c	; 0x52c <TURN_180>
			FOLLOW_ONE_NODE(FORWARD);
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     e20:	08 95       	ret
		}
		else if(dir == 'E' )
     e22:	85 34       	cpi	r24, 0x45	; 69
     e24:	39 f4       	brne	.+14     	; 0xe34 <MOVE_NEXT_NODE+0x80>
		{
			TURN_90(RIGHT);
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     e32:	08 95       	ret
		}
		else if(dir == 'W')
     e34:	87 35       	cpi	r24, 0x57	; 87
     e36:	39 f4       	brne	.+14     	; 0xe46 <MOVE_NEXT_NODE+0x92>
		{
			TURN_90(LEFT);
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     e44:	08 95       	ret
		}
		else if(dir == 'S')
     e46:	83 35       	cpi	r24, 0x53	; 83
     e48:	09 f0       	breq	.+2      	; 0xe4c <MOVE_NEXT_NODE+0x98>
     e4a:	4b c0       	rjmp	.+150    	; 0xee2 <MOVE_NEXT_NODE+0x12e>
		{
			FOLLOW_ONE_NODE(FORWARD);
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     e52:	08 95       	ret
		}
	}
	else if(x2>x1)
     e54:	84 17       	cp	r24, r20
     e56:	10 f5       	brcc	.+68     	; 0xe9c <MOVE_NEXT_NODE+0xe8>
	{
		if(dir == 'N')
     e58:	80 91 62 00 	lds	r24, 0x0062
     e5c:	8e 34       	cpi	r24, 0x4E	; 78
     e5e:	39 f4       	brne	.+14     	; 0xe6e <MOVE_NEXT_NODE+0xba>
		{
			TURN_90(LEFT);
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     e6c:	08 95       	ret
		}
		else if(dir == 'E' )
     e6e:	85 34       	cpi	r24, 0x45	; 69
     e70:	31 f4       	brne	.+12     	; 0xe7e <MOVE_NEXT_NODE+0xca>
		{
			TURN_180();
     e72:	0e 94 96 02 	call	0x52c	; 0x52c <TURN_180>
			FOLLOW_ONE_NODE(FORWARD);
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     e7c:	08 95       	ret
		}
		else if(dir == 'W')
     e7e:	87 35       	cpi	r24, 0x57	; 87
     e80:	21 f4       	brne	.+8      	; 0xe8a <MOVE_NEXT_NODE+0xd6>
		{
			FOLLOW_ONE_NODE(FORWARD);
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     e88:	08 95       	ret
		}
		else if(dir == 'S')
     e8a:	83 35       	cpi	r24, 0x53	; 83
     e8c:	51 f5       	brne	.+84     	; 0xee2 <MOVE_NEXT_NODE+0x12e>
		{
			TURN_90(RIGHT);
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     e9a:	08 95       	ret
		}
	}
	else if(x2<x1)
     e9c:	48 17       	cp	r20, r24
     e9e:	08 f5       	brcc	.+66     	; 0xee2 <MOVE_NEXT_NODE+0x12e>
	{
		if(dir == 'N')
     ea0:	80 91 62 00 	lds	r24, 0x0062
     ea4:	8e 34       	cpi	r24, 0x4E	; 78
     ea6:	39 f4       	brne	.+14     	; 0xeb6 <MOVE_NEXT_NODE+0x102>
		{
			TURN_90(RIGHT);
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     eb4:	08 95       	ret
		}
		else if(dir == 'E' )
     eb6:	85 34       	cpi	r24, 0x45	; 69
     eb8:	21 f4       	brne	.+8      	; 0xec2 <MOVE_NEXT_NODE+0x10e>
		{
			FOLLOW_ONE_NODE(FORWARD);
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     ec0:	08 95       	ret
		}
		else if(dir == 'W')
     ec2:	87 35       	cpi	r24, 0x57	; 87
     ec4:	31 f4       	brne	.+12     	; 0xed2 <MOVE_NEXT_NODE+0x11e>
		{
			TURN_180();
     ec6:	0e 94 96 02 	call	0x52c	; 0x52c <TURN_180>
			FOLLOW_ONE_NODE(FORWARD);
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     ed0:	08 95       	ret
		}
		else if(dir == 'S')
     ed2:	83 35       	cpi	r24, 0x53	; 83
     ed4:	31 f4       	brne	.+12     	; 0xee2 <MOVE_NEXT_NODE+0x12e>
		{
			TURN_90(LEFT);
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
     ee2:	08 95       	ret

00000ee4 <DIGKSTRA>:
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
{
     ee4:	2f 92       	push	r2
     ee6:	3f 92       	push	r3
     ee8:	4f 92       	push	r4
     eea:	5f 92       	push	r5
     eec:	6f 92       	push	r6
     eee:	7f 92       	push	r7
     ef0:	8f 92       	push	r8
     ef2:	9f 92       	push	r9
     ef4:	af 92       	push	r10
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	c3 5a       	subi	r28, 0xA3	; 163
     f0e:	d1 09       	sbc	r29, r1
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	cf 55       	subi	r28, 0x5F	; 95
     f1c:	df 4f       	sbci	r29, 0xFF	; 255
     f1e:	48 83       	st	Y, r20
     f20:	c1 5a       	subi	r28, 0xA1	; 161
     f22:	d0 40       	sbci	r29, 0x00	; 0
     f24:	ce 55       	subi	r28, 0x5E	; 94
     f26:	df 4f       	sbci	r29, 0xFF	; 255
     f28:	28 83       	st	Y, r18
     f2a:	c2 5a       	subi	r28, 0xA2	; 162
     f2c:	d0 40       	sbci	r29, 0x00	; 0
     f2e:	cd 55       	subi	r28, 0x5D	; 93
     f30:	df 4f       	sbci	r29, 0xFF	; 255
     f32:	08 83       	st	Y, r16
     f34:	c3 5a       	subi	r28, 0xA3	; 163
     f36:	d0 40       	sbci	r29, 0x00	; 0
{
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	16 e4       	ldi	r17, 0x46	; 70
     f3e:	70 e0       	ldi	r23, 0x00	; 0
	unsigned char tempDistance = 0;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details2[i][j].distance = INFINITE;
     f40:	54 e1       	ldi	r21, 0x14	; 20
     f42:	13 c0       	rjmp	.+38     	; 0xf6a <DIGKSTRA+0x86>
{
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
     f44:	df 01       	movw	r26, r30
     f46:	11 97       	sbiw	r26, 0x01	; 1
	unsigned char tempDistance = 0;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details2[i][j].distance = INFINITE;
     f48:	5c 93       	st	X, r21
			details2[i][j].visit = FALSE;
     f4a:	10 82       	st	Z, r1
{
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
     f4c:	df 01       	movw	r26, r30
     f4e:	13 97       	sbiw	r26, 0x03	; 3
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details2[i][j].distance = INFINITE;
			details2[i][j].visit = FALSE;
			details2[i][j].X = i;
     f50:	4c 93       	st	X, r20
{
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
     f52:	df 01       	movw	r26, r30
     f54:	12 97       	sbiw	r26, 0x02	; 2
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details2[i][j].distance = INFINITE;
			details2[i][j].visit = FALSE;
			details2[i][j].X = i;
			details2[i][j].Y = j;
     f56:	9c 93       	st	X, r25
	STRUCTURE dqued, pathQUEUE[15];
	unsigned char tempX = 0, tempY = 0;
	unsigned char tempDistance = 0;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
     f58:	9f 5f       	subi	r25, 0xFF	; 255
     f5a:	3a 96       	adiw	r30, 0x0a	; 10
     f5c:	97 30       	cpi	r25, 0x07	; 7
     f5e:	91 f7       	brne	.-28     	; 0xf44 <DIGKSTRA+0x60>
     f60:	2f 5f       	subi	r18, 0xFF	; 255
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
{
	unsigned char i,j;
	STRUCTURE dqued, pathQUEUE[15];
	unsigned char tempX = 0, tempY = 0;
	unsigned char tempDistance = 0;
	for(i=0;i<MAX_GRID_X;i++)
     f64:	25 30       	cpi	r18, 0x05	; 5
     f66:	31 05       	cpc	r19, r1
     f68:	51 f0       	breq	.+20     	; 0xf7e <DIGKSTRA+0x9a>
     f6a:	42 2f       	mov	r20, r18
{
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
     f6c:	12 9f       	mul	r17, r18
     f6e:	f0 01       	movw	r30, r0
     f70:	13 9f       	mul	r17, r19
     f72:	f0 0d       	add	r31, r0
     f74:	11 24       	eor	r1, r1
     f76:	e3 5c       	subi	r30, 0xC3	; 195
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	97 2f       	mov	r25, r23
     f7c:	e3 cf       	rjmp	.-58     	; 0xf44 <DIGKSTRA+0x60>
			details2[i][j].visit = FALSE;
			details2[i][j].X = i;
			details2[i][j].Y = j;
		}
	}
	details2[x1][y1].distance = 0;
     f7e:	26 2f       	mov	r18, r22
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	22 0f       	add	r18, r18
     f84:	33 1f       	adc	r19, r19
     f86:	f9 01       	movw	r30, r18
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	2e 0f       	add	r18, r30
     f92:	3f 1f       	adc	r19, r31
     f94:	46 e4       	ldi	r20, 0x46	; 70
     f96:	84 9f       	mul	r24, r20
     f98:	c0 01       	movw	r24, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	f9 01       	movw	r30, r18
     f9e:	e8 0f       	add	r30, r24
     fa0:	f9 1f       	adc	r31, r25
     fa2:	e8 5c       	subi	r30, 0xC8	; 200
     fa4:	fe 4f       	sbci	r31, 0xFE	; 254
     fa6:	14 82       	std	Z+4, r1	; 0x04
	details2[x1][y1].visit = TRUE;
     fa8:	26 2f       	mov	r18, r22
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	22 0f       	add	r18, r18
     fae:	33 1f       	adc	r19, r19
     fb0:	f9 01       	movw	r30, r18
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	2e 0f       	add	r18, r30
     fbc:	3f 1f       	adc	r19, r31
     fbe:	f9 01       	movw	r30, r18
     fc0:	e8 0f       	add	r30, r24
     fc2:	f9 1f       	adc	r31, r25
     fc4:	e8 5c       	subi	r30, 0xC8	; 200
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	21 e0       	ldi	r18, 0x01	; 1
     fca:	25 83       	std	Z+5, r18	; 0x05
	Qfront=0; Qrear=0;
     fcc:	10 92 fb 00 	sts	0x00FB, r1
     fd0:	10 92 fa 00 	sts	0x00FA, r1
	
	ENQUEUE(details2[x1][y1]);
     fd4:	26 2f       	mov	r18, r22
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	f9 01       	movw	r30, r18
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	2e 0f       	add	r18, r30
     fe8:	3f 1f       	adc	r19, r31
     fea:	f9 01       	movw	r30, r18
     fec:	e8 0f       	add	r30, r24
     fee:	f9 1f       	adc	r31, r25
     ff0:	e8 5c       	subi	r30, 0xC8	; 200
     ff2:	fe 4f       	sbci	r31, 0xFE	; 254
     ff4:	00 81       	ld	r16, Z
     ff6:	11 81       	ldd	r17, Z+1	; 0x01
     ff8:	22 81       	ldd	r18, Z+2	; 0x02
     ffa:	33 81       	ldd	r19, Z+3	; 0x03
     ffc:	44 81       	ldd	r20, Z+4	; 0x04
     ffe:	55 81       	ldd	r21, Z+5	; 0x05
    1000:	66 81       	ldd	r22, Z+6	; 0x06
    1002:	77 81       	ldd	r23, Z+7	; 0x07
    1004:	80 85       	ldd	r24, Z+8	; 0x08
    1006:	91 85       	ldd	r25, Z+9	; 0x09
    1008:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <ENQUEUE>
	while(Qrear != 34)
	{
		dqued = DEQUEUE();
		tempX = dqued.X;
		tempY = dqued.Y;
		if((tempY+1 < MAX_GRID_Y) && details2[tempX][tempY+1].visit == FALSE && details2[tempX][tempY+1].status != DESTINATION)
    100c:	0f 2e       	mov	r0, r31
    100e:	f6 e4       	ldi	r31, 0x46	; 70
    1010:	7f 2e       	mov	r7, r31
    1012:	f0 2d       	mov	r31, r0
			}
			else
			{
				ENQUEUE(details2[tempX][tempY+1]);
				tempDistance = details2[tempX][tempY].distance+1;
				details2[tempX][tempY+1].visit = TRUE;
    1014:	44 24       	eor	r4, r4
    1016:	43 94       	inc	r4
	details2[x1][y1].distance = 0;
	details2[x1][y1].visit = TRUE;
	Qfront=0; Qrear=0;
	
	ENQUEUE(details2[x1][y1]);
	while(Qrear != 34)
    1018:	ad c2       	rjmp	.+1370   	; 0x1574 <DIGKSTRA+0x690>
	{
		dqued = DEQUEUE();
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	0e 94 26 03 	call	0x64c	; 0x64c <DEQUEUE>
		tempX = dqued.X;
    1022:	6b 80       	ldd	r6, Y+3	; 0x03
		tempY = dqued.Y;
    1024:	5c 80       	ldd	r5, Y+4	; 0x04
		if((tempY+1 < MAX_GRID_Y) && details2[tempX][tempY+1].visit == FALSE && details2[tempX][tempY+1].status != DESTINATION)
    1026:	e5 2c       	mov	r14, r5
    1028:	f1 2c       	mov	r15, r1
    102a:	67 01       	movw	r12, r14
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	c8 1a       	sub	r12, r24
    1030:	d8 0a       	sbc	r13, r24
    1032:	97 e0       	ldi	r25, 0x07	; 7
    1034:	c9 16       	cp	r12, r25
    1036:	d1 04       	cpc	r13, r1
    1038:	0c f0       	brlt	.+2      	; 0x103c <DIGKSTRA+0x158>
    103a:	a4 c0       	rjmp	.+328    	; 0x1184 <DIGKSTRA+0x2a0>
    103c:	f6 01       	movw	r30, r12
    103e:	ee 0f       	add	r30, r30
    1040:	ff 1f       	adc	r31, r31
    1042:	c6 01       	movw	r24, r12
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	e8 0f       	add	r30, r24
    1052:	f9 1f       	adc	r31, r25
    1054:	86 2c       	mov	r8, r6
    1056:	91 2c       	mov	r9, r1
    1058:	76 9c       	mul	r7, r6
    105a:	e0 0d       	add	r30, r0
    105c:	f1 1d       	adc	r31, r1
    105e:	11 24       	eor	r1, r1
    1060:	e8 5c       	subi	r30, 0xC8	; 200
    1062:	fe 4f       	sbci	r31, 0xFE	; 254
    1064:	85 81       	ldd	r24, Z+5	; 0x05
    1066:	81 11       	cpse	r24, r1
    1068:	8d c0       	rjmp	.+282    	; 0x1184 <DIGKSTRA+0x2a0>
    106a:	f6 01       	movw	r30, r12
    106c:	ee 0f       	add	r30, r30
    106e:	ff 1f       	adc	r31, r31
    1070:	c6 01       	movw	r24, r12
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	e8 0f       	add	r30, r24
    1080:	f9 1f       	adc	r31, r25
    1082:	78 9c       	mul	r7, r8
    1084:	c0 01       	movw	r24, r0
    1086:	79 9c       	mul	r7, r9
    1088:	90 0d       	add	r25, r0
    108a:	11 24       	eor	r1, r1
    108c:	e8 0f       	add	r30, r24
    108e:	f9 1f       	adc	r31, r25
    1090:	e8 5c       	subi	r30, 0xC8	; 200
    1092:	fe 4f       	sbci	r31, 0xFE	; 254
    1094:	80 81       	ld	r24, Z
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	09 f4       	brne	.+2      	; 0x109c <DIGKSTRA+0x1b8>
    109a:	74 c0       	rjmp	.+232    	; 0x1184 <DIGKSTRA+0x2a0>
		{
			if(block_caught == TRUE && details1[tempX][tempY+1].status == BLOCK)
    109c:	80 91 fd 00 	lds	r24, 0x00FD
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	c9 f4       	brne	.+50     	; 0x10d6 <DIGKSTRA+0x1f2>
    10a4:	f6 01       	movw	r30, r12
    10a6:	ee 0f       	add	r30, r30
    10a8:	ff 1f       	adc	r31, r31
    10aa:	c6 01       	movw	r24, r12
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	e8 0f       	add	r30, r24
    10ba:	f9 1f       	adc	r31, r25
    10bc:	78 9c       	mul	r7, r8
    10be:	c0 01       	movw	r24, r0
    10c0:	79 9c       	mul	r7, r9
    10c2:	90 0d       	add	r25, r0
    10c4:	11 24       	eor	r1, r1
    10c6:	e8 0f       	add	r30, r24
    10c8:	f9 1f       	adc	r31, r25
    10ca:	ec 55       	subi	r30, 0x5C	; 92
    10cc:	fc 4f       	sbci	r31, 0xFC	; 252
    10ce:	80 81       	ld	r24, Z
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <DIGKSTRA+0x1f2>
    10d4:	57 c0       	rjmp	.+174    	; 0x1184 <DIGKSTRA+0x2a0>
			{
				;
			}
			else
			{
				ENQUEUE(details2[tempX][tempY+1]);
    10d6:	56 01       	movw	r10, r12
    10d8:	aa 0c       	add	r10, r10
    10da:	bb 1c       	adc	r11, r11
    10dc:	c6 01       	movw	r24, r12
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	a8 0e       	add	r10, r24
    10ec:	b9 1e       	adc	r11, r25
    10ee:	78 9c       	mul	r7, r8
    10f0:	10 01       	movw	r2, r0
    10f2:	79 9c       	mul	r7, r9
    10f4:	30 0c       	add	r3, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	c5 01       	movw	r24, r10
    10fa:	82 0d       	add	r24, r2
    10fc:	93 1d       	adc	r25, r3
    10fe:	0f 2e       	mov	r0, r31
    1100:	f8 e3       	ldi	r31, 0x38	; 56
    1102:	af 2e       	mov	r10, r31
    1104:	f1 e0       	ldi	r31, 0x01	; 1
    1106:	bf 2e       	mov	r11, r31
    1108:	f0 2d       	mov	r31, r0
    110a:	a8 0e       	add	r10, r24
    110c:	b9 1e       	adc	r11, r25
    110e:	d5 01       	movw	r26, r10
    1110:	0c 91       	ld	r16, X
    1112:	11 96       	adiw	r26, 0x01	; 1
    1114:	1c 91       	ld	r17, X
    1116:	11 97       	sbiw	r26, 0x01	; 1
    1118:	12 96       	adiw	r26, 0x02	; 2
    111a:	2c 91       	ld	r18, X
    111c:	12 97       	sbiw	r26, 0x02	; 2
    111e:	13 96       	adiw	r26, 0x03	; 3
    1120:	3c 91       	ld	r19, X
    1122:	13 97       	sbiw	r26, 0x03	; 3
    1124:	14 96       	adiw	r26, 0x04	; 4
    1126:	4c 91       	ld	r20, X
    1128:	14 97       	sbiw	r26, 0x04	; 4
    112a:	15 96       	adiw	r26, 0x05	; 5
    112c:	5c 91       	ld	r21, X
    112e:	15 97       	sbiw	r26, 0x05	; 5
    1130:	16 96       	adiw	r26, 0x06	; 6
    1132:	6c 91       	ld	r22, X
    1134:	16 97       	sbiw	r26, 0x06	; 6
    1136:	17 96       	adiw	r26, 0x07	; 7
    1138:	7c 91       	ld	r23, X
    113a:	17 97       	sbiw	r26, 0x07	; 7
    113c:	18 96       	adiw	r26, 0x08	; 8
    113e:	8c 91       	ld	r24, X
    1140:	18 97       	sbiw	r26, 0x08	; 8
    1142:	19 96       	adiw	r26, 0x09	; 9
    1144:	9c 91       	ld	r25, X
    1146:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <ENQUEUE>
				tempDistance = details2[tempX][tempY].distance+1;
    114a:	f7 01       	movw	r30, r14
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	c7 01       	movw	r24, r14
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	e8 0f       	add	r30, r24
    1160:	f9 1f       	adc	r31, r25
    1162:	e2 0d       	add	r30, r2
    1164:	f3 1d       	adc	r31, r3
    1166:	e8 5c       	subi	r30, 0xC8	; 200
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	24 81       	ldd	r18, Z+4	; 0x04
    116c:	2f 5f       	subi	r18, 0xFF	; 255
				details2[tempX][tempY+1].visit = TRUE;
    116e:	f5 01       	movw	r30, r10
    1170:	45 82       	std	Z+5, r4	; 0x05
				if(tempDistance < details2[tempX][tempY+1].distance)
    1172:	84 81       	ldd	r24, Z+4	; 0x04
    1174:	28 17       	cp	r18, r24
    1176:	30 f4       	brcc	.+12     	; 0x1184 <DIGKSTRA+0x2a0>
				{
					details2[tempX][tempY+1].distance =  tempDistance;
    1178:	f5 01       	movw	r30, r10
    117a:	24 83       	std	Z+4, r18	; 0x04
					details2[tempX][tempY+1].prevX= tempX;
    117c:	66 82       	std	Z+6, r6	; 0x06
    117e:	17 82       	std	Z+7, r1	; 0x07
					details2[tempX][tempY+1].prevY= tempY;
    1180:	50 86       	std	Z+8, r5	; 0x08
    1182:	11 86       	std	Z+9, r1	; 0x09
				}
			}
		}
		
		if((tempX-1 >= 0) && details2[tempX-1][tempY].visit == FALSE && details2[tempX-1][tempY].status != DESTINATION)
    1184:	a6 2c       	mov	r10, r6
    1186:	b1 2c       	mov	r11, r1
    1188:	65 01       	movw	r12, r10
    118a:	f1 e0       	ldi	r31, 0x01	; 1
    118c:	cf 1a       	sub	r12, r31
    118e:	d1 08       	sbc	r13, r1
    1190:	0a f4       	brpl	.+2      	; 0x1194 <DIGKSTRA+0x2b0>
    1192:	9e c0       	rjmp	.+316    	; 0x12d0 <DIGKSTRA+0x3ec>
    1194:	f7 01       	movw	r30, r14
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	c7 01       	movw	r24, r14
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	e8 0f       	add	r30, r24
    11aa:	f9 1f       	adc	r31, r25
    11ac:	7c 9c       	mul	r7, r12
    11ae:	c0 01       	movw	r24, r0
    11b0:	7d 9c       	mul	r7, r13
    11b2:	90 0d       	add	r25, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	e8 0f       	add	r30, r24
    11b8:	f9 1f       	adc	r31, r25
    11ba:	e8 5c       	subi	r30, 0xC8	; 200
    11bc:	fe 4f       	sbci	r31, 0xFE	; 254
    11be:	85 81       	ldd	r24, Z+5	; 0x05
    11c0:	81 11       	cpse	r24, r1
    11c2:	86 c0       	rjmp	.+268    	; 0x12d0 <DIGKSTRA+0x3ec>
    11c4:	f7 01       	movw	r30, r14
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	c7 01       	movw	r24, r14
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	e8 0f       	add	r30, r24
    11da:	f9 1f       	adc	r31, r25
    11dc:	7c 9c       	mul	r7, r12
    11de:	c0 01       	movw	r24, r0
    11e0:	7d 9c       	mul	r7, r13
    11e2:	90 0d       	add	r25, r0
    11e4:	11 24       	eor	r1, r1
    11e6:	e8 0f       	add	r30, r24
    11e8:	f9 1f       	adc	r31, r25
    11ea:	e8 5c       	subi	r30, 0xC8	; 200
    11ec:	fe 4f       	sbci	r31, 0xFE	; 254
    11ee:	80 81       	ld	r24, Z
    11f0:	83 30       	cpi	r24, 0x03	; 3
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <DIGKSTRA+0x312>
    11f4:	6d c0       	rjmp	.+218    	; 0x12d0 <DIGKSTRA+0x3ec>
		{
			if(block_caught == TRUE && details1[tempX-1][tempY].status == BLOCK)
    11f6:	80 91 fd 00 	lds	r24, 0x00FD
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	c9 f4       	brne	.+50     	; 0x1230 <DIGKSTRA+0x34c>
    11fe:	f7 01       	movw	r30, r14
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	c7 01       	movw	r24, r14
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	e8 0f       	add	r30, r24
    1214:	f9 1f       	adc	r31, r25
    1216:	7c 9c       	mul	r7, r12
    1218:	c0 01       	movw	r24, r0
    121a:	7d 9c       	mul	r7, r13
    121c:	90 0d       	add	r25, r0
    121e:	11 24       	eor	r1, r1
    1220:	e8 0f       	add	r30, r24
    1222:	f9 1f       	adc	r31, r25
    1224:	ec 55       	subi	r30, 0x5C	; 92
    1226:	fc 4f       	sbci	r31, 0xFC	; 252
    1228:	80 81       	ld	r24, Z
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	09 f4       	brne	.+2      	; 0x1230 <DIGKSTRA+0x34c>
    122e:	50 c0       	rjmp	.+160    	; 0x12d0 <DIGKSTRA+0x3ec>
			{
				;
			}
			else
			{
				ENQUEUE(details2[tempX-1][tempY]);
    1230:	17 01       	movw	r2, r14
    1232:	22 0c       	add	r2, r2
    1234:	33 1c       	adc	r3, r3
    1236:	c7 01       	movw	r24, r14
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	28 0e       	add	r2, r24
    1246:	39 1e       	adc	r3, r25
    1248:	7c 9c       	mul	r7, r12
    124a:	40 01       	movw	r8, r0
    124c:	7d 9c       	mul	r7, r13
    124e:	90 0c       	add	r9, r0
    1250:	11 24       	eor	r1, r1
    1252:	c1 01       	movw	r24, r2
    1254:	88 0d       	add	r24, r8
    1256:	99 1d       	adc	r25, r9
    1258:	0f 2e       	mov	r0, r31
    125a:	f8 e3       	ldi	r31, 0x38	; 56
    125c:	8f 2e       	mov	r8, r31
    125e:	f1 e0       	ldi	r31, 0x01	; 1
    1260:	9f 2e       	mov	r9, r31
    1262:	f0 2d       	mov	r31, r0
    1264:	88 0e       	add	r8, r24
    1266:	99 1e       	adc	r9, r25
    1268:	d4 01       	movw	r26, r8
    126a:	0c 91       	ld	r16, X
    126c:	11 96       	adiw	r26, 0x01	; 1
    126e:	1c 91       	ld	r17, X
    1270:	11 97       	sbiw	r26, 0x01	; 1
    1272:	12 96       	adiw	r26, 0x02	; 2
    1274:	2c 91       	ld	r18, X
    1276:	12 97       	sbiw	r26, 0x02	; 2
    1278:	13 96       	adiw	r26, 0x03	; 3
    127a:	3c 91       	ld	r19, X
    127c:	13 97       	sbiw	r26, 0x03	; 3
    127e:	14 96       	adiw	r26, 0x04	; 4
    1280:	4c 91       	ld	r20, X
    1282:	14 97       	sbiw	r26, 0x04	; 4
    1284:	15 96       	adiw	r26, 0x05	; 5
    1286:	5c 91       	ld	r21, X
    1288:	15 97       	sbiw	r26, 0x05	; 5
    128a:	16 96       	adiw	r26, 0x06	; 6
    128c:	6c 91       	ld	r22, X
    128e:	16 97       	sbiw	r26, 0x06	; 6
    1290:	17 96       	adiw	r26, 0x07	; 7
    1292:	7c 91       	ld	r23, X
    1294:	17 97       	sbiw	r26, 0x07	; 7
    1296:	18 96       	adiw	r26, 0x08	; 8
    1298:	8c 91       	ld	r24, X
    129a:	18 97       	sbiw	r26, 0x08	; 8
    129c:	19 96       	adiw	r26, 0x09	; 9
    129e:	9c 91       	ld	r25, X
    12a0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <ENQUEUE>
				tempDistance = details2[tempX][tempY].distance+1;
    12a4:	7a 9c       	mul	r7, r10
    12a6:	f0 01       	movw	r30, r0
    12a8:	7b 9c       	mul	r7, r11
    12aa:	f0 0d       	add	r31, r0
    12ac:	11 24       	eor	r1, r1
    12ae:	e2 0d       	add	r30, r2
    12b0:	f3 1d       	adc	r31, r3
    12b2:	e8 5c       	subi	r30, 0xC8	; 200
    12b4:	fe 4f       	sbci	r31, 0xFE	; 254
    12b6:	24 81       	ldd	r18, Z+4	; 0x04
    12b8:	2f 5f       	subi	r18, 0xFF	; 255
				details2[tempX-1][tempY].visit = TRUE;
    12ba:	f4 01       	movw	r30, r8
    12bc:	45 82       	std	Z+5, r4	; 0x05
				if(tempDistance < details2[tempX-1][tempY].distance)
    12be:	84 81       	ldd	r24, Z+4	; 0x04
    12c0:	28 17       	cp	r18, r24
    12c2:	30 f4       	brcc	.+12     	; 0x12d0 <DIGKSTRA+0x3ec>
				{
					details2[tempX-1][tempY].distance =  tempDistance;
    12c4:	f4 01       	movw	r30, r8
    12c6:	24 83       	std	Z+4, r18	; 0x04
					details2[tempX-1][tempY].prevX= tempX;
    12c8:	66 82       	std	Z+6, r6	; 0x06
    12ca:	17 82       	std	Z+7, r1	; 0x07
					details2[tempX-1][tempY].prevY= tempY;
    12cc:	50 86       	std	Z+8, r5	; 0x08
    12ce:	11 86       	std	Z+9, r1	; 0x09
				}
			}
		}
		
		if((tempY-1 >= 0) && details2[tempX][tempY-1].visit == FALSE && details2[tempX][tempY-1].status != DESTINATION)
    12d0:	67 01       	movw	r12, r14
    12d2:	f1 e0       	ldi	r31, 0x01	; 1
    12d4:	cf 1a       	sub	r12, r31
    12d6:	d1 08       	sbc	r13, r1
    12d8:	0a f4       	brpl	.+2      	; 0x12dc <DIGKSTRA+0x3f8>
    12da:	a5 c0       	rjmp	.+330    	; 0x1426 <DIGKSTRA+0x542>
    12dc:	f6 01       	movw	r30, r12
    12de:	ee 0f       	add	r30, r30
    12e0:	ff 1f       	adc	r31, r31
    12e2:	c6 01       	movw	r24, r12
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	e8 0f       	add	r30, r24
    12f2:	f9 1f       	adc	r31, r25
    12f4:	7a 9c       	mul	r7, r10
    12f6:	c0 01       	movw	r24, r0
    12f8:	7b 9c       	mul	r7, r11
    12fa:	90 0d       	add	r25, r0
    12fc:	11 24       	eor	r1, r1
    12fe:	e8 0f       	add	r30, r24
    1300:	f9 1f       	adc	r31, r25
    1302:	e8 5c       	subi	r30, 0xC8	; 200
    1304:	fe 4f       	sbci	r31, 0xFE	; 254
    1306:	85 81       	ldd	r24, Z+5	; 0x05
    1308:	81 11       	cpse	r24, r1
    130a:	8d c0       	rjmp	.+282    	; 0x1426 <DIGKSTRA+0x542>
    130c:	f6 01       	movw	r30, r12
    130e:	ee 0f       	add	r30, r30
    1310:	ff 1f       	adc	r31, r31
    1312:	c6 01       	movw	r24, r12
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	e8 0f       	add	r30, r24
    1322:	f9 1f       	adc	r31, r25
    1324:	7a 9c       	mul	r7, r10
    1326:	c0 01       	movw	r24, r0
    1328:	7b 9c       	mul	r7, r11
    132a:	90 0d       	add	r25, r0
    132c:	11 24       	eor	r1, r1
    132e:	e8 0f       	add	r30, r24
    1330:	f9 1f       	adc	r31, r25
    1332:	e8 5c       	subi	r30, 0xC8	; 200
    1334:	fe 4f       	sbci	r31, 0xFE	; 254
    1336:	80 81       	ld	r24, Z
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	09 f4       	brne	.+2      	; 0x133e <DIGKSTRA+0x45a>
    133c:	74 c0       	rjmp	.+232    	; 0x1426 <DIGKSTRA+0x542>
		{
			if(block_caught == TRUE  && details1[tempX][tempY-1].status == BLOCK)
    133e:	80 91 fd 00 	lds	r24, 0x00FD
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	c9 f4       	brne	.+50     	; 0x1378 <DIGKSTRA+0x494>
    1346:	f6 01       	movw	r30, r12
    1348:	ee 0f       	add	r30, r30
    134a:	ff 1f       	adc	r31, r31
    134c:	c6 01       	movw	r24, r12
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	e8 0f       	add	r30, r24
    135c:	f9 1f       	adc	r31, r25
    135e:	7a 9c       	mul	r7, r10
    1360:	c0 01       	movw	r24, r0
    1362:	7b 9c       	mul	r7, r11
    1364:	90 0d       	add	r25, r0
    1366:	11 24       	eor	r1, r1
    1368:	e8 0f       	add	r30, r24
    136a:	f9 1f       	adc	r31, r25
    136c:	ec 55       	subi	r30, 0x5C	; 92
    136e:	fc 4f       	sbci	r31, 0xFC	; 252
    1370:	80 81       	ld	r24, Z
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	09 f4       	brne	.+2      	; 0x1378 <DIGKSTRA+0x494>
    1376:	57 c0       	rjmp	.+174    	; 0x1426 <DIGKSTRA+0x542>
			{
				;
			}
			else
			{
				ENQUEUE(details2[tempX][tempY-1]);
    1378:	46 01       	movw	r8, r12
    137a:	88 0c       	add	r8, r8
    137c:	99 1c       	adc	r9, r9
    137e:	c6 01       	movw	r24, r12
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	88 0e       	add	r8, r24
    138e:	99 1e       	adc	r9, r25
    1390:	7a 9c       	mul	r7, r10
    1392:	10 01       	movw	r2, r0
    1394:	7b 9c       	mul	r7, r11
    1396:	30 0c       	add	r3, r0
    1398:	11 24       	eor	r1, r1
    139a:	c4 01       	movw	r24, r8
    139c:	82 0d       	add	r24, r2
    139e:	93 1d       	adc	r25, r3
    13a0:	0f 2e       	mov	r0, r31
    13a2:	f8 e3       	ldi	r31, 0x38	; 56
    13a4:	8f 2e       	mov	r8, r31
    13a6:	f1 e0       	ldi	r31, 0x01	; 1
    13a8:	9f 2e       	mov	r9, r31
    13aa:	f0 2d       	mov	r31, r0
    13ac:	88 0e       	add	r8, r24
    13ae:	99 1e       	adc	r9, r25
    13b0:	d4 01       	movw	r26, r8
    13b2:	0c 91       	ld	r16, X
    13b4:	11 96       	adiw	r26, 0x01	; 1
    13b6:	1c 91       	ld	r17, X
    13b8:	11 97       	sbiw	r26, 0x01	; 1
    13ba:	12 96       	adiw	r26, 0x02	; 2
    13bc:	2c 91       	ld	r18, X
    13be:	12 97       	sbiw	r26, 0x02	; 2
    13c0:	13 96       	adiw	r26, 0x03	; 3
    13c2:	3c 91       	ld	r19, X
    13c4:	13 97       	sbiw	r26, 0x03	; 3
    13c6:	14 96       	adiw	r26, 0x04	; 4
    13c8:	4c 91       	ld	r20, X
    13ca:	14 97       	sbiw	r26, 0x04	; 4
    13cc:	15 96       	adiw	r26, 0x05	; 5
    13ce:	5c 91       	ld	r21, X
    13d0:	15 97       	sbiw	r26, 0x05	; 5
    13d2:	16 96       	adiw	r26, 0x06	; 6
    13d4:	6c 91       	ld	r22, X
    13d6:	16 97       	sbiw	r26, 0x06	; 6
    13d8:	17 96       	adiw	r26, 0x07	; 7
    13da:	7c 91       	ld	r23, X
    13dc:	17 97       	sbiw	r26, 0x07	; 7
    13de:	18 96       	adiw	r26, 0x08	; 8
    13e0:	8c 91       	ld	r24, X
    13e2:	18 97       	sbiw	r26, 0x08	; 8
    13e4:	19 96       	adiw	r26, 0x09	; 9
    13e6:	9c 91       	ld	r25, X
    13e8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <ENQUEUE>
				tempDistance = details2[tempX][tempY].distance+1;
    13ec:	f7 01       	movw	r30, r14
    13ee:	ee 0f       	add	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	c7 01       	movw	r24, r14
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	e8 0f       	add	r30, r24
    1402:	f9 1f       	adc	r31, r25
    1404:	e2 0d       	add	r30, r2
    1406:	f3 1d       	adc	r31, r3
    1408:	e8 5c       	subi	r30, 0xC8	; 200
    140a:	fe 4f       	sbci	r31, 0xFE	; 254
    140c:	24 81       	ldd	r18, Z+4	; 0x04
    140e:	2f 5f       	subi	r18, 0xFF	; 255
				details2[tempX][tempY-1].visit = TRUE;
    1410:	f4 01       	movw	r30, r8
    1412:	45 82       	std	Z+5, r4	; 0x05
				if(tempDistance < details2[tempX][tempY-1].distance)
    1414:	84 81       	ldd	r24, Z+4	; 0x04
    1416:	28 17       	cp	r18, r24
    1418:	30 f4       	brcc	.+12     	; 0x1426 <DIGKSTRA+0x542>
				{
					details2[tempX][tempY-1].distance =  tempDistance;
    141a:	f4 01       	movw	r30, r8
    141c:	24 83       	std	Z+4, r18	; 0x04
					details2[tempX][tempY-1].prevX= tempX;
    141e:	66 82       	std	Z+6, r6	; 0x06
    1420:	17 82       	std	Z+7, r1	; 0x07
					details2[tempX][tempY-1].prevY= tempY;
    1422:	50 86       	std	Z+8, r5	; 0x08
    1424:	11 86       	std	Z+9, r1	; 0x09
				}
			}
		}
		
		if((tempX+1 < MAX_GRID_X) && details2[tempX+1][tempY].visit == FALSE && details2[tempX+1][tempY].status != DESTINATION)
    1426:	65 01       	movw	r12, r10
    1428:	ff ef       	ldi	r31, 0xFF	; 255
    142a:	cf 1a       	sub	r12, r31
    142c:	df 0a       	sbc	r13, r31
    142e:	25 e0       	ldi	r18, 0x05	; 5
    1430:	c2 16       	cp	r12, r18
    1432:	d1 04       	cpc	r13, r1
    1434:	0c f0       	brlt	.+2      	; 0x1438 <DIGKSTRA+0x554>
    1436:	9e c0       	rjmp	.+316    	; 0x1574 <DIGKSTRA+0x690>
    1438:	f7 01       	movw	r30, r14
    143a:	ee 0f       	add	r30, r30
    143c:	ff 1f       	adc	r31, r31
    143e:	c7 01       	movw	r24, r14
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	e8 0f       	add	r30, r24
    144e:	f9 1f       	adc	r31, r25
    1450:	7c 9c       	mul	r7, r12
    1452:	c0 01       	movw	r24, r0
    1454:	7d 9c       	mul	r7, r13
    1456:	90 0d       	add	r25, r0
    1458:	11 24       	eor	r1, r1
    145a:	e8 0f       	add	r30, r24
    145c:	f9 1f       	adc	r31, r25
    145e:	e8 5c       	subi	r30, 0xC8	; 200
    1460:	fe 4f       	sbci	r31, 0xFE	; 254
    1462:	85 81       	ldd	r24, Z+5	; 0x05
    1464:	81 11       	cpse	r24, r1
    1466:	86 c0       	rjmp	.+268    	; 0x1574 <DIGKSTRA+0x690>
    1468:	f7 01       	movw	r30, r14
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	c7 01       	movw	r24, r14
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	e8 0f       	add	r30, r24
    147e:	f9 1f       	adc	r31, r25
    1480:	7c 9c       	mul	r7, r12
    1482:	c0 01       	movw	r24, r0
    1484:	7d 9c       	mul	r7, r13
    1486:	90 0d       	add	r25, r0
    1488:	11 24       	eor	r1, r1
    148a:	e8 0f       	add	r30, r24
    148c:	f9 1f       	adc	r31, r25
    148e:	e8 5c       	subi	r30, 0xC8	; 200
    1490:	fe 4f       	sbci	r31, 0xFE	; 254
    1492:	80 81       	ld	r24, Z
    1494:	83 30       	cpi	r24, 0x03	; 3
    1496:	09 f4       	brne	.+2      	; 0x149a <DIGKSTRA+0x5b6>
    1498:	6d c0       	rjmp	.+218    	; 0x1574 <DIGKSTRA+0x690>
		{
			if(block_caught == TRUE  && details1[tempX+1][tempY].status == BLOCK)
    149a:	80 91 fd 00 	lds	r24, 0x00FD
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	c9 f4       	brne	.+50     	; 0x14d4 <DIGKSTRA+0x5f0>
    14a2:	f7 01       	movw	r30, r14
    14a4:	ee 0f       	add	r30, r30
    14a6:	ff 1f       	adc	r31, r31
    14a8:	c7 01       	movw	r24, r14
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	e8 0f       	add	r30, r24
    14b8:	f9 1f       	adc	r31, r25
    14ba:	7c 9c       	mul	r7, r12
    14bc:	c0 01       	movw	r24, r0
    14be:	7d 9c       	mul	r7, r13
    14c0:	90 0d       	add	r25, r0
    14c2:	11 24       	eor	r1, r1
    14c4:	e8 0f       	add	r30, r24
    14c6:	f9 1f       	adc	r31, r25
    14c8:	ec 55       	subi	r30, 0x5C	; 92
    14ca:	fc 4f       	sbci	r31, 0xFC	; 252
    14cc:	80 81       	ld	r24, Z
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <DIGKSTRA+0x5f0>
    14d2:	50 c0       	rjmp	.+160    	; 0x1574 <DIGKSTRA+0x690>
			{
				;
			}
			else
			{
				ENQUEUE(details2[tempX+1][tempY]);
    14d4:	17 01       	movw	r2, r14
    14d6:	22 0c       	add	r2, r2
    14d8:	33 1c       	adc	r3, r3
    14da:	c7 01       	movw	r24, r14
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	28 0e       	add	r2, r24
    14ea:	39 1e       	adc	r3, r25
    14ec:	7c 9c       	mul	r7, r12
    14ee:	40 01       	movw	r8, r0
    14f0:	7d 9c       	mul	r7, r13
    14f2:	90 0c       	add	r9, r0
    14f4:	11 24       	eor	r1, r1
    14f6:	c1 01       	movw	r24, r2
    14f8:	88 0d       	add	r24, r8
    14fa:	99 1d       	adc	r25, r9
    14fc:	0f 2e       	mov	r0, r31
    14fe:	f8 e3       	ldi	r31, 0x38	; 56
    1500:	8f 2e       	mov	r8, r31
    1502:	f1 e0       	ldi	r31, 0x01	; 1
    1504:	9f 2e       	mov	r9, r31
    1506:	f0 2d       	mov	r31, r0
    1508:	88 0e       	add	r8, r24
    150a:	99 1e       	adc	r9, r25
    150c:	d4 01       	movw	r26, r8
    150e:	0c 91       	ld	r16, X
    1510:	11 96       	adiw	r26, 0x01	; 1
    1512:	1c 91       	ld	r17, X
    1514:	11 97       	sbiw	r26, 0x01	; 1
    1516:	12 96       	adiw	r26, 0x02	; 2
    1518:	2c 91       	ld	r18, X
    151a:	12 97       	sbiw	r26, 0x02	; 2
    151c:	13 96       	adiw	r26, 0x03	; 3
    151e:	3c 91       	ld	r19, X
    1520:	13 97       	sbiw	r26, 0x03	; 3
    1522:	14 96       	adiw	r26, 0x04	; 4
    1524:	4c 91       	ld	r20, X
    1526:	14 97       	sbiw	r26, 0x04	; 4
    1528:	15 96       	adiw	r26, 0x05	; 5
    152a:	5c 91       	ld	r21, X
    152c:	15 97       	sbiw	r26, 0x05	; 5
    152e:	16 96       	adiw	r26, 0x06	; 6
    1530:	6c 91       	ld	r22, X
    1532:	16 97       	sbiw	r26, 0x06	; 6
    1534:	17 96       	adiw	r26, 0x07	; 7
    1536:	7c 91       	ld	r23, X
    1538:	17 97       	sbiw	r26, 0x07	; 7
    153a:	18 96       	adiw	r26, 0x08	; 8
    153c:	8c 91       	ld	r24, X
    153e:	18 97       	sbiw	r26, 0x08	; 8
    1540:	19 96       	adiw	r26, 0x09	; 9
    1542:	9c 91       	ld	r25, X
    1544:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <ENQUEUE>
				tempDistance = details2[tempX][tempY].distance+1;
    1548:	7a 9c       	mul	r7, r10
    154a:	f0 01       	movw	r30, r0
    154c:	7b 9c       	mul	r7, r11
    154e:	f0 0d       	add	r31, r0
    1550:	11 24       	eor	r1, r1
    1552:	e2 0d       	add	r30, r2
    1554:	f3 1d       	adc	r31, r3
    1556:	e8 5c       	subi	r30, 0xC8	; 200
    1558:	fe 4f       	sbci	r31, 0xFE	; 254
    155a:	24 81       	ldd	r18, Z+4	; 0x04
    155c:	2f 5f       	subi	r18, 0xFF	; 255
				details2[tempX+1][tempY].visit = TRUE;
    155e:	f4 01       	movw	r30, r8
    1560:	45 82       	std	Z+5, r4	; 0x05
				if(tempDistance < details2[tempX+1][tempY].distance)
    1562:	84 81       	ldd	r24, Z+4	; 0x04
    1564:	28 17       	cp	r18, r24
    1566:	30 f4       	brcc	.+12     	; 0x1574 <DIGKSTRA+0x690>
				{
					details2[tempX+1][tempY].distance =  tempDistance;
    1568:	f4 01       	movw	r30, r8
    156a:	24 83       	std	Z+4, r18	; 0x04
					details2[tempX+1][tempY].prevX= tempX;
    156c:	66 82       	std	Z+6, r6	; 0x06
    156e:	17 82       	std	Z+7, r1	; 0x07
					details2[tempX+1][tempY].prevY= tempY;
    1570:	50 86       	std	Z+8, r5	; 0x08
    1572:	11 86       	std	Z+9, r1	; 0x09
	details2[x1][y1].distance = 0;
	details2[x1][y1].visit = TRUE;
	Qfront=0; Qrear=0;
	
	ENQUEUE(details2[x1][y1]);
	while(Qrear != 34)
    1574:	80 91 fa 00 	lds	r24, 0x00FA
    1578:	82 32       	cpi	r24, 0x22	; 34
    157a:	09 f0       	breq	.+2      	; 0x157e <DIGKSTRA+0x69a>
    157c:	4e cd       	rjmp	.-1380   	; 0x101a <DIGKSTRA+0x136>
				}
			}
		}
	}

	pathQUEUE[0].X = x2;
    157e:	cf 55       	subi	r28, 0x5F	; 95
    1580:	df 4f       	sbci	r29, 0xFF	; 255
    1582:	f8 81       	ld	r31, Y
    1584:	c1 5a       	subi	r28, 0xA1	; 161
    1586:	d0 40       	sbci	r29, 0x00	; 0
    1588:	fd 87       	std	Y+13, r31	; 0x0d
	pathQUEUE[0].Y = y2;
    158a:	ce 55       	subi	r28, 0x5E	; 94
    158c:	df 4f       	sbci	r29, 0xFF	; 255
    158e:	28 81       	ld	r18, Y
    1590:	c2 5a       	subi	r28, 0xA2	; 162
    1592:	d0 40       	sbci	r29, 0x00	; 0
    1594:	2e 87       	std	Y+14, r18	; 0x0e
	tempX = pathQUEUE[0].X;
	tempY = pathQUEUE[0].Y;
	j = details2[x2][y2].distance;
    1596:	82 2f       	mov	r24, r18
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	fc 01       	movw	r30, r24
    15a0:	ee 0f       	add	r30, r30
    15a2:	ff 1f       	adc	r31, r31
    15a4:	ee 0f       	add	r30, r30
    15a6:	ff 1f       	adc	r31, r31
    15a8:	8e 0f       	add	r24, r30
    15aa:	9f 1f       	adc	r25, r31
    15ac:	fc 01       	movw	r30, r24
    15ae:	cf 55       	subi	r28, 0x5F	; 95
    15b0:	df 4f       	sbci	r29, 0xFF	; 255
    15b2:	48 81       	ld	r20, Y
    15b4:	c1 5a       	subi	r28, 0xA1	; 161
    15b6:	d0 40       	sbci	r29, 0x00	; 0
    15b8:	36 e4       	ldi	r19, 0x46	; 70
    15ba:	43 9f       	mul	r20, r19
    15bc:	e0 0d       	add	r30, r0
    15be:	f1 1d       	adc	r31, r1
    15c0:	11 24       	eor	r1, r1
    15c2:	e8 5c       	subi	r30, 0xC8	; 200
    15c4:	fe 4f       	sbci	r31, 0xFE	; 254
    15c6:	14 81       	ldd	r17, Z+4	; 0x04
	
	if(j>0 && j<INFINITE)
    15c8:	21 2f       	mov	r18, r17
    15ca:	21 50       	subi	r18, 0x01	; 1
    15cc:	23 31       	cpi	r18, 0x13	; 19
    15ce:	08 f0       	brcs	.+2      	; 0x15d2 <DIGKSTRA+0x6ee>
    15d0:	bd c0       	rjmp	.+378    	; 0x174c <DIGKSTRA+0x868>
	{
		for(i=1;i<=j;i++)
    15d2:	11 23       	and	r17, r17
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <DIGKSTRA+0x6f4>
    15d6:	c4 c0       	rjmp	.+392    	; 0x1760 <DIGKSTRA+0x87c>
    15d8:	fe 01       	movw	r30, r28
    15da:	77 96       	adiw	r30, 0x17	; 23
    15dc:	6e 01       	movw	r12, r28
    15de:	88 e1       	ldi	r24, 0x18	; 24
    15e0:	c8 0e       	add	r12, r24
    15e2:	d1 1c       	adc	r13, r1
{
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
    15e4:	82 2f       	mov	r24, r18
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	9c 01       	movw	r18, r24
    15ee:	22 0f       	add	r18, r18
    15f0:	33 1f       	adc	r19, r19
    15f2:	22 0f       	add	r18, r18
    15f4:	33 1f       	adc	r19, r19
    15f6:	82 0f       	add	r24, r18
    15f8:	93 1f       	adc	r25, r19
    15fa:	a1 e2       	ldi	r26, 0x21	; 33
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ac 0f       	add	r26, r28
    1600:	bd 1f       	adc	r27, r29
    1602:	8a 0f       	add	r24, r26
    1604:	9b 1f       	adc	r25, r27
    1606:	ce 55       	subi	r28, 0x5E	; 94
    1608:	df 4f       	sbci	r29, 0xFF	; 255
    160a:	f8 80       	ld	r15, Y
    160c:	c2 5a       	subi	r28, 0xA2	; 162
    160e:	d0 40       	sbci	r29, 0x00	; 0
	
	if(j>0 && j<INFINITE)
	{
		for(i=1;i<=j;i++)
		{
			pathQUEUE[i].X = details2[tempX][tempY].prevX;
    1610:	06 e4       	ldi	r16, 0x46	; 70
    1612:	2f 2d       	mov	r18, r15
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	22 0f       	add	r18, r18
    1618:	33 1f       	adc	r19, r19
    161a:	b9 01       	movw	r22, r18
    161c:	66 0f       	add	r22, r22
    161e:	77 1f       	adc	r23, r23
    1620:	66 0f       	add	r22, r22
    1622:	77 1f       	adc	r23, r23
    1624:	26 0f       	add	r18, r22
    1626:	37 1f       	adc	r19, r23
    1628:	04 9f       	mul	r16, r20
    162a:	a0 01       	movw	r20, r0
    162c:	11 24       	eor	r1, r1
    162e:	24 0f       	add	r18, r20
    1630:	35 1f       	adc	r19, r21
    1632:	28 5c       	subi	r18, 0xC8	; 200
    1634:	3e 4f       	sbci	r19, 0xFE	; 254
    1636:	d9 01       	movw	r26, r18
    1638:	16 96       	adiw	r26, 0x06	; 6
    163a:	2c 91       	ld	r18, X
    163c:	20 83       	st	Z, r18
			pathQUEUE[i].Y = details2[tempX][tempY].prevY;
    163e:	2f 2d       	mov	r18, r15
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	22 0f       	add	r18, r18
    1644:	33 1f       	adc	r19, r19
    1646:	b9 01       	movw	r22, r18
    1648:	66 0f       	add	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	66 0f       	add	r22, r22
    164e:	77 1f       	adc	r23, r23
    1650:	26 0f       	add	r18, r22
    1652:	37 1f       	adc	r19, r23
    1654:	42 0f       	add	r20, r18
    1656:	53 1f       	adc	r21, r19
    1658:	48 5c       	subi	r20, 0xC8	; 200
    165a:	5e 4f       	sbci	r21, 0xFE	; 254
    165c:	da 01       	movw	r26, r20
    165e:	18 96       	adiw	r26, 0x08	; 8
    1660:	fc 90       	ld	r15, X
    1662:	d6 01       	movw	r26, r12
    1664:	fc 92       	st	X, r15
			tempX = pathQUEUE[i].X;
    1666:	40 81       	ld	r20, Z
    1668:	3a 96       	adiw	r30, 0x0a	; 10
    166a:	ba e0       	ldi	r27, 0x0A	; 10
    166c:	cb 0e       	add	r12, r27
    166e:	d1 1c       	adc	r13, r1
	tempY = pathQUEUE[0].Y;
	j = details2[x2][y2].distance;
	
	if(j>0 && j<INFINITE)
	{
		for(i=1;i<=j;i++)
    1670:	e8 17       	cp	r30, r24
    1672:	f9 07       	cpc	r31, r25
    1674:	71 f6       	brne	.-100    	; 0x1612 <DIGKSTRA+0x72e>
    1676:	6c c0       	rjmp	.+216    	; 0x1750 <DIGKSTRA+0x86c>
			pathQUEUE[i].Y = details2[tempX][tempY].prevY;
			tempX = pathQUEUE[i].X;
			tempY = pathQUEUE[i].Y;
		}
		
		if(MOVE==TRUE)
    1678:	01 2f       	mov	r16, r17
		{
			for(i=j;i>0;i--)
			{
				LCD_CLEAR();
    167a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
				LCD_SET_CURSER(2,1);
    167e:	61 e0       	ldi	r22, 0x01	; 1
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
				LCD_DATA('(');
    1686:	88 e2       	ldi	r24, 0x28	; 40
    1688:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(pathQUEUE[i].X + 0x30);
    168c:	e0 2e       	mov	r14, r16
    168e:	f1 2c       	mov	r15, r1
    1690:	67 01       	movw	r12, r14
    1692:	cc 0c       	add	r12, r12
    1694:	dd 1c       	adc	r13, r13
    1696:	c7 01       	movw	r24, r14
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	c8 0e       	add	r12, r24
    16a6:	d9 1e       	adc	r13, r25
    16a8:	e1 e0       	ldi	r30, 0x01	; 1
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	ec 0f       	add	r30, r28
    16ae:	fd 1f       	adc	r31, r29
    16b0:	ce 0e       	add	r12, r30
    16b2:	df 1e       	adc	r13, r31
    16b4:	d6 01       	movw	r26, r12
    16b6:	1c 96       	adiw	r26, 0x0c	; 12
    16b8:	bc 90       	ld	r11, X
    16ba:	8b 2d       	mov	r24, r11
    16bc:	80 5d       	subi	r24, 0xD0	; 208
    16be:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(',');
    16c2:	8c e2       	ldi	r24, 0x2C	; 44
    16c4:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(pathQUEUE[i].Y + 0x30);
    16c8:	f6 01       	movw	r30, r12
    16ca:	d5 84       	ldd	r13, Z+13	; 0x0d
    16cc:	8d 2d       	mov	r24, r13
    16ce:	80 5d       	subi	r24, 0xD0	; 208
    16d0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(')');
    16d4:	89 e2       	ldi	r24, 0x29	; 41
    16d6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_PRINT(" --> ");
    16da:	8c ec       	ldi	r24, 0xCC	; 204
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
				LCD_PRINT("(");
    16e2:	85 ef       	ldi	r24, 0xF5	; 245
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
				LCD_DATA(pathQUEUE[i-1].X + 0x30);
    16ea:	f1 e0       	ldi	r31, 0x01	; 1
    16ec:	ef 1a       	sub	r14, r31
    16ee:	f1 08       	sbc	r15, r1
    16f0:	c7 01       	movw	r24, r14
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	ee 0c       	add	r14, r14
    16f8:	ff 1c       	adc	r15, r15
    16fa:	ee 0c       	add	r14, r14
    16fc:	ff 1c       	adc	r15, r15
    16fe:	ee 0c       	add	r14, r14
    1700:	ff 1c       	adc	r15, r15
    1702:	e8 0e       	add	r14, r24
    1704:	f9 1e       	adc	r15, r25
    1706:	21 e0       	ldi	r18, 0x01	; 1
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	2c 0f       	add	r18, r28
    170c:	3d 1f       	adc	r19, r29
    170e:	e2 0e       	add	r14, r18
    1710:	f3 1e       	adc	r15, r19
    1712:	d7 01       	movw	r26, r14
    1714:	1c 96       	adiw	r26, 0x0c	; 12
    1716:	cc 90       	ld	r12, X
    1718:	8c 2d       	mov	r24, r12
    171a:	80 5d       	subi	r24, 0xD0	; 208
    171c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(',');
    1720:	8c e2       	ldi	r24, 0x2C	; 44
    1722:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(pathQUEUE[i-1].Y + 0x30);
    1726:	f7 01       	movw	r30, r14
    1728:	f5 84       	ldd	r15, Z+13	; 0x0d
    172a:	8f 2d       	mov	r24, r15
    172c:	80 5d       	subi	r24, 0xD0	; 208
    172e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(')');
    1732:	89 e2       	ldi	r24, 0x29	; 41
    1734:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				MOVE_NEXT_NODE(pathQUEUE[i].X,pathQUEUE[i].Y,pathQUEUE[i-1].X,pathQUEUE[i-1].Y);
    1738:	2f 2d       	mov	r18, r15
    173a:	4c 2d       	mov	r20, r12
    173c:	6d 2d       	mov	r22, r13
    173e:	8b 2d       	mov	r24, r11
    1740:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOVE_NEXT_NODE>
			tempY = pathQUEUE[i].Y;
		}
		
		if(MOVE==TRUE)
		{
			for(i=j;i>0;i--)
    1744:	01 50       	subi	r16, 0x01	; 1
    1746:	09 f0       	breq	.+2      	; 0x174a <DIGKSTRA+0x866>
    1748:	98 cf       	rjmp	.-208    	; 0x167a <DIGKSTRA+0x796>
    174a:	0a c0       	rjmp	.+20     	; 0x1760 <DIGKSTRA+0x87c>
				MOVE_NEXT_NODE(pathQUEUE[i].X,pathQUEUE[i].Y,pathQUEUE[i-1].X,pathQUEUE[i-1].Y);
			}
		}
		return j;
	}
	return INFINITE;
    174c:	14 e1       	ldi	r17, 0x14	; 20
    174e:	08 c0       	rjmp	.+16     	; 0x1760 <DIGKSTRA+0x87c>
			pathQUEUE[i].Y = details2[tempX][tempY].prevY;
			tempX = pathQUEUE[i].X;
			tempY = pathQUEUE[i].Y;
		}
		
		if(MOVE==TRUE)
    1750:	cd 55       	subi	r28, 0x5D	; 93
    1752:	df 4f       	sbci	r29, 0xFF	; 255
    1754:	f8 81       	ld	r31, Y
    1756:	c3 5a       	subi	r28, 0xA3	; 163
    1758:	d0 40       	sbci	r29, 0x00	; 0
    175a:	f1 30       	cpi	r31, 0x01	; 1
    175c:	09 f4       	brne	.+2      	; 0x1760 <DIGKSTRA+0x87c>
    175e:	8c cf       	rjmp	.-232    	; 0x1678 <DIGKSTRA+0x794>
			}
		}
		return j;
	}
	return INFINITE;
}
    1760:	81 2f       	mov	r24, r17
    1762:	cd 55       	subi	r28, 0x5D	; 93
    1764:	df 4f       	sbci	r29, 0xFF	; 255
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	df 90       	pop	r13
    177e:	cf 90       	pop	r12
    1780:	bf 90       	pop	r11
    1782:	af 90       	pop	r10
    1784:	9f 90       	pop	r9
    1786:	8f 90       	pop	r8
    1788:	7f 90       	pop	r7
    178a:	6f 90       	pop	r6
    178c:	5f 90       	pop	r5
    178e:	4f 90       	pop	r4
    1790:	3f 90       	pop	r3
    1792:	2f 90       	pop	r2
    1794:	08 95       	ret

00001796 <DETECT_NEXT_NODE>:
		}
	}
}

void DETECT_NEXT_NODE()
{
    1796:	8f 92       	push	r8
    1798:	9f 92       	push	r9
    179a:	af 92       	push	r10
    179c:	bf 92       	push	r11
    179e:	cf 92       	push	r12
    17a0:	df 92       	push	r13
    17a2:	ef 92       	push	r14
    17a4:	ff 92       	push	r15
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
	unsigned char dir_count = 0;
	STRUCTURE nextNode;
	nextNode.X = X;
    17ae:	b0 90 05 01 	lds	r11, 0x0105
	nextNode.Y = Y;
    17b2:	c0 90 04 01 	lds	r12, 0x0104
	nextNode.priority = 0;

	if((X-1) >= 0 && (X-1) < MAX_GRID_X)
    17b6:	6b 2d       	mov	r22, r11
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	fb 01       	movw	r30, r22
    17bc:	31 97       	sbiw	r30, 0x01	; 1
    17be:	e5 30       	cpi	r30, 0x05	; 5
    17c0:	f1 05       	cpc	r31, r1
    17c2:	e8 f5       	brcc	.+122    	; 0x183e <DETECT_NEXT_NODE+0xa8>
	{
		if(details1[X-1][Y].status == UNVISITED)
    17c4:	8c 2d       	mov	r24, r12
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	dc 01       	movw	r26, r24
    17ce:	aa 0f       	add	r26, r26
    17d0:	bb 1f       	adc	r27, r27
    17d2:	aa 0f       	add	r26, r26
    17d4:	bb 1f       	adc	r27, r27
    17d6:	8a 0f       	add	r24, r26
    17d8:	9b 1f       	adc	r25, r27
    17da:	46 e4       	ldi	r20, 0x46	; 70
    17dc:	4e 9f       	mul	r20, r30
    17de:	90 01       	movw	r18, r0
    17e0:	4f 9f       	mul	r20, r31
    17e2:	30 0d       	add	r19, r0
    17e4:	11 24       	eor	r1, r1
    17e6:	dc 01       	movw	r26, r24
    17e8:	a2 0f       	add	r26, r18
    17ea:	b3 1f       	adc	r27, r19
    17ec:	ac 55       	subi	r26, 0x5C	; 92
    17ee:	bc 4f       	sbci	r27, 0xFC	; 252
    17f0:	8c 91       	ld	r24, X
    17f2:	81 11       	cpse	r24, r1
    17f4:	24 c0       	rjmp	.+72     	; 0x183e <DETECT_NEXT_NODE+0xa8>
		{
			details1[X-1][Y].priority++;
    17f6:	8c 2d       	mov	r24, r12
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	dc 01       	movw	r26, r24
    1800:	aa 0f       	add	r26, r26
    1802:	bb 1f       	adc	r27, r27
    1804:	aa 0f       	add	r26, r26
    1806:	bb 1f       	adc	r27, r27
    1808:	8a 0f       	add	r24, r26
    180a:	9b 1f       	adc	r25, r27
    180c:	dc 01       	movw	r26, r24
    180e:	a2 0f       	add	r26, r18
    1810:	b3 1f       	adc	r27, r19
    1812:	ac 55       	subi	r26, 0x5C	; 92
    1814:	bc 4f       	sbci	r27, 0xFC	; 252
    1816:	8c 2d       	mov	r24, r12
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	ec 01       	movw	r28, r24
    1820:	cc 0f       	add	r28, r28
    1822:	dd 1f       	adc	r29, r29
    1824:	cc 0f       	add	r28, r28
    1826:	dd 1f       	adc	r29, r29
    1828:	8c 0f       	add	r24, r28
    182a:	9d 1f       	adc	r25, r29
    182c:	28 0f       	add	r18, r24
    182e:	39 1f       	adc	r19, r25
    1830:	e9 01       	movw	r28, r18
    1832:	cc 55       	subi	r28, 0x5C	; 92
    1834:	dc 4f       	sbci	r29, 0xFC	; 252
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	8f 5f       	subi	r24, 0xFF	; 255
    183a:	11 96       	adiw	r26, 0x01	; 1
    183c:	8c 93       	st	X, r24
		}
	}

	if((Y-1) >= 0 && (Y-1) < MAX_GRID_Y )
    183e:	8c 2d       	mov	r24, r12
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9c 01       	movw	r18, r24
    1844:	21 50       	subi	r18, 0x01	; 1
    1846:	31 09       	sbc	r19, r1
    1848:	27 30       	cpi	r18, 0x07	; 7
    184a:	31 05       	cpc	r19, r1
    184c:	a0 f5       	brcc	.+104    	; 0x18b6 <DETECT_NEXT_NODE+0x120>
	{
		if(details1[X][Y-1].status == UNVISITED)
    184e:	d9 01       	movw	r26, r18
    1850:	aa 0f       	add	r26, r26
    1852:	bb 1f       	adc	r27, r27
    1854:	a9 01       	movw	r20, r18
    1856:	44 0f       	add	r20, r20
    1858:	55 1f       	adc	r21, r21
    185a:	44 0f       	add	r20, r20
    185c:	55 1f       	adc	r21, r21
    185e:	44 0f       	add	r20, r20
    1860:	55 1f       	adc	r21, r21
    1862:	a4 0f       	add	r26, r20
    1864:	b5 1f       	adc	r27, r21
    1866:	c6 e4       	ldi	r28, 0x46	; 70
    1868:	c6 9f       	mul	r28, r22
    186a:	a0 01       	movw	r20, r0
    186c:	c7 9f       	mul	r28, r23
    186e:	50 0d       	add	r21, r0
    1870:	11 24       	eor	r1, r1
    1872:	a4 0f       	add	r26, r20
    1874:	b5 1f       	adc	r27, r21
    1876:	ac 55       	subi	r26, 0x5C	; 92
    1878:	bc 4f       	sbci	r27, 0xFC	; 252
    187a:	4c 91       	ld	r20, X
    187c:	41 11       	cpse	r20, r1
    187e:	1b c0       	rjmp	.+54     	; 0x18b6 <DETECT_NEXT_NODE+0x120>
		{
			details1[X][Y-1].priority++;
    1880:	d9 01       	movw	r26, r18
    1882:	aa 0f       	add	r26, r26
    1884:	bb 1f       	adc	r27, r27
    1886:	a9 01       	movw	r20, r18
    1888:	44 0f       	add	r20, r20
    188a:	55 1f       	adc	r21, r21
    188c:	44 0f       	add	r20, r20
    188e:	55 1f       	adc	r21, r21
    1890:	44 0f       	add	r20, r20
    1892:	55 1f       	adc	r21, r21
    1894:	a4 0f       	add	r26, r20
    1896:	b5 1f       	adc	r27, r21
    1898:	c6 9f       	mul	r28, r22
    189a:	a0 01       	movw	r20, r0
    189c:	c7 9f       	mul	r28, r23
    189e:	50 0d       	add	r21, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	a4 0f       	add	r26, r20
    18a4:	b5 1f       	adc	r27, r21
    18a6:	ac 55       	subi	r26, 0x5C	; 92
    18a8:	bc 4f       	sbci	r27, 0xFC	; 252
    18aa:	11 96       	adiw	r26, 0x01	; 1
    18ac:	4c 91       	ld	r20, X
    18ae:	11 97       	sbiw	r26, 0x01	; 1
    18b0:	4f 5f       	subi	r20, 0xFF	; 255
    18b2:	11 96       	adiw	r26, 0x01	; 1
    18b4:	4c 93       	st	X, r20
		}
	}

	if((X+1) > 0 && (X+1) < MAX_GRID_X)
    18b6:	43 e0       	ldi	r20, 0x03	; 3
    18b8:	4b 15       	cp	r20, r11
    18ba:	b8 f1       	brcs	.+110    	; 0x192a <DETECT_NEXT_NODE+0x194>
	{
		if(details1[X+1][Y].status == UNVISITED)
    18bc:	ab 01       	movw	r20, r22
    18be:	4f 5f       	subi	r20, 0xFF	; 255
    18c0:	5f 4f       	sbci	r21, 0xFF	; 255
    18c2:	ec 01       	movw	r28, r24
    18c4:	cc 0f       	add	r28, r28
    18c6:	dd 1f       	adc	r29, r29
    18c8:	dc 01       	movw	r26, r24
    18ca:	aa 0f       	add	r26, r26
    18cc:	bb 1f       	adc	r27, r27
    18ce:	aa 0f       	add	r26, r26
    18d0:	bb 1f       	adc	r27, r27
    18d2:	aa 0f       	add	r26, r26
    18d4:	bb 1f       	adc	r27, r27
    18d6:	ac 0f       	add	r26, r28
    18d8:	bd 1f       	adc	r27, r29
    18da:	16 e4       	ldi	r17, 0x46	; 70
    18dc:	14 9f       	mul	r17, r20
    18de:	e0 01       	movw	r28, r0
    18e0:	15 9f       	mul	r17, r21
    18e2:	d0 0d       	add	r29, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	ac 0f       	add	r26, r28
    18e8:	bd 1f       	adc	r27, r29
    18ea:	ac 55       	subi	r26, 0x5C	; 92
    18ec:	bc 4f       	sbci	r27, 0xFC	; 252
    18ee:	ac 91       	ld	r26, X
    18f0:	a1 11       	cpse	r26, r1
    18f2:	1b c0       	rjmp	.+54     	; 0x192a <DETECT_NEXT_NODE+0x194>
		{
			details1[X+1][Y].priority++;
    18f4:	ec 01       	movw	r28, r24
    18f6:	cc 0f       	add	r28, r28
    18f8:	dd 1f       	adc	r29, r29
    18fa:	dc 01       	movw	r26, r24
    18fc:	aa 0f       	add	r26, r26
    18fe:	bb 1f       	adc	r27, r27
    1900:	aa 0f       	add	r26, r26
    1902:	bb 1f       	adc	r27, r27
    1904:	aa 0f       	add	r26, r26
    1906:	bb 1f       	adc	r27, r27
    1908:	ac 0f       	add	r26, r28
    190a:	bd 1f       	adc	r27, r29
    190c:	14 9f       	mul	r17, r20
    190e:	e0 01       	movw	r28, r0
    1910:	15 9f       	mul	r17, r21
    1912:	d0 0d       	add	r29, r0
    1914:	11 24       	eor	r1, r1
    1916:	ac 0f       	add	r26, r28
    1918:	bd 1f       	adc	r27, r29
    191a:	ac 55       	subi	r26, 0x5C	; 92
    191c:	bc 4f       	sbci	r27, 0xFC	; 252
    191e:	11 96       	adiw	r26, 0x01	; 1
    1920:	4c 91       	ld	r20, X
    1922:	11 97       	sbiw	r26, 0x01	; 1
    1924:	4f 5f       	subi	r20, 0xFF	; 255
    1926:	11 96       	adiw	r26, 0x01	; 1
    1928:	4c 93       	st	X, r20
		}
	}
	
	if((Y+1) > 0 && (Y+1) < MAX_GRID_Y )
    192a:	c5 e0       	ldi	r28, 0x05	; 5
    192c:	cc 15       	cp	r28, r12
    192e:	88 f1       	brcs	.+98     	; 0x1992 <DETECT_NEXT_NODE+0x1fc>
	{
		if(details1[X][Y+1].status == UNVISITED)
    1930:	ac 01       	movw	r20, r24
    1932:	4f 5f       	subi	r20, 0xFF	; 255
    1934:	5f 4f       	sbci	r21, 0xFF	; 255
    1936:	ea 01       	movw	r28, r20
    1938:	cc 0f       	add	r28, r28
    193a:	dd 1f       	adc	r29, r29
    193c:	da 01       	movw	r26, r20
    193e:	aa 0f       	add	r26, r26
    1940:	bb 1f       	adc	r27, r27
    1942:	aa 0f       	add	r26, r26
    1944:	bb 1f       	adc	r27, r27
    1946:	aa 0f       	add	r26, r26
    1948:	bb 1f       	adc	r27, r27
    194a:	ac 0f       	add	r26, r28
    194c:	bd 1f       	adc	r27, r29
    194e:	16 e4       	ldi	r17, 0x46	; 70
    1950:	16 9f       	mul	r17, r22
    1952:	e0 01       	movw	r28, r0
    1954:	17 9f       	mul	r17, r23
    1956:	d0 0d       	add	r29, r0
    1958:	11 24       	eor	r1, r1
    195a:	ac 0f       	add	r26, r28
    195c:	bd 1f       	adc	r27, r29
    195e:	ac 55       	subi	r26, 0x5C	; 92
    1960:	bc 4f       	sbci	r27, 0xFC	; 252
    1962:	ac 91       	ld	r26, X
    1964:	a1 11       	cpse	r26, r1
    1966:	15 c0       	rjmp	.+42     	; 0x1992 <DETECT_NEXT_NODE+0x1fc>
		{
			details1[X][Y+1].priority++;
    1968:	da 01       	movw	r26, r20
    196a:	aa 0f       	add	r26, r26
    196c:	bb 1f       	adc	r27, r27
    196e:	44 0f       	add	r20, r20
    1970:	55 1f       	adc	r21, r21
    1972:	44 0f       	add	r20, r20
    1974:	55 1f       	adc	r21, r21
    1976:	44 0f       	add	r20, r20
    1978:	55 1f       	adc	r21, r21
    197a:	a4 0f       	add	r26, r20
    197c:	b5 1f       	adc	r27, r21
    197e:	ac 0f       	add	r26, r28
    1980:	bd 1f       	adc	r27, r29
    1982:	ac 55       	subi	r26, 0x5C	; 92
    1984:	bc 4f       	sbci	r27, 0xFC	; 252
    1986:	11 96       	adiw	r26, 0x01	; 1
    1988:	4c 91       	ld	r20, X
    198a:	11 97       	sbiw	r26, 0x01	; 1
    198c:	4f 5f       	subi	r20, 0xFF	; 255
    198e:	11 96       	adiw	r26, 0x01	; 1
    1990:	4c 93       	st	X, r20
		}
	}

	if(((X+1)<MAX_GRID_X) && (details1[X+1][Y].priority > nextNode.priority) && (details1[X+1][Y].status == UNVISITED))
    1992:	4b 01       	movw	r8, r22
    1994:	df ef       	ldi	r29, 0xFF	; 255
    1996:	8d 1a       	sub	r8, r29
    1998:	9d 0a       	sbc	r9, r29
    199a:	45 e0       	ldi	r20, 0x05	; 5
    199c:	84 16       	cp	r8, r20
    199e:	91 04       	cpc	r9, r1
    19a0:	d4 f5       	brge	.+116    	; 0x1a16 <DETECT_NEXT_NODE+0x280>
    19a2:	dc 01       	movw	r26, r24
    19a4:	aa 0f       	add	r26, r26
    19a6:	bb 1f       	adc	r27, r27
    19a8:	ac 01       	movw	r20, r24
    19aa:	44 0f       	add	r20, r20
    19ac:	55 1f       	adc	r21, r21
    19ae:	44 0f       	add	r20, r20
    19b0:	55 1f       	adc	r21, r21
    19b2:	44 0f       	add	r20, r20
    19b4:	55 1f       	adc	r21, r21
    19b6:	a4 0f       	add	r26, r20
    19b8:	b5 1f       	adc	r27, r21
    19ba:	16 e4       	ldi	r17, 0x46	; 70
    19bc:	18 9d       	mul	r17, r8
    19be:	a0 01       	movw	r20, r0
    19c0:	19 9d       	mul	r17, r9
    19c2:	50 0d       	add	r21, r0
    19c4:	11 24       	eor	r1, r1
    19c6:	a4 0f       	add	r26, r20
    19c8:	b5 1f       	adc	r27, r21
    19ca:	ac 55       	subi	r26, 0x5C	; 92
    19cc:	bc 4f       	sbci	r27, 0xFC	; 252
    19ce:	11 96       	adiw	r26, 0x01	; 1
    19d0:	4c 91       	ld	r20, X
    19d2:	44 23       	and	r20, r20
    19d4:	19 f1       	breq	.+70     	; 0x1a1c <DETECT_NEXT_NODE+0x286>
    19d6:	dc 01       	movw	r26, r24
    19d8:	aa 0f       	add	r26, r26
    19da:	bb 1f       	adc	r27, r27
    19dc:	ac 01       	movw	r20, r24
    19de:	44 0f       	add	r20, r20
    19e0:	55 1f       	adc	r21, r21
    19e2:	44 0f       	add	r20, r20
    19e4:	55 1f       	adc	r21, r21
    19e6:	44 0f       	add	r20, r20
    19e8:	55 1f       	adc	r21, r21
    19ea:	a4 0f       	add	r26, r20
    19ec:	b5 1f       	adc	r27, r21
    19ee:	18 9d       	mul	r17, r8
    19f0:	a0 01       	movw	r20, r0
    19f2:	19 9d       	mul	r17, r9
    19f4:	50 0d       	add	r21, r0
    19f6:	11 24       	eor	r1, r1
    19f8:	a4 0f       	add	r26, r20
    19fa:	b5 1f       	adc	r27, r21
    19fc:	ac 55       	subi	r26, 0x5C	; 92
    19fe:	bc 4f       	sbci	r27, 0xFC	; 252
    1a00:	4c 91       	ld	r20, X
    1a02:	41 11       	cpse	r20, r1
    1a04:	0e c0       	rjmp	.+28     	; 0x1a22 <DETECT_NEXT_NODE+0x28c>
	{
		nextNode.X = X+1;
    1a06:	db 2c       	mov	r13, r11
    1a08:	d3 94       	inc	r13
		nextNode.Y = Y;
		dir_count = 1;
		loop_count = 1;
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	40 93 f8 00 	sts	0x00F8, r20

	if(((X+1)<MAX_GRID_X) && (details1[X+1][Y].priority > nextNode.priority) && (details1[X+1][Y].status == UNVISITED))
	{
		nextNode.X = X+1;
		nextNode.Y = Y;
		dir_count = 1;
    1a10:	ff 24       	eor	r15, r15
    1a12:	f3 94       	inc	r15
    1a14:	08 c0       	rjmp	.+16     	; 0x1a26 <DETECT_NEXT_NODE+0x290>

void DETECT_NEXT_NODE()
{
	unsigned char dir_count = 0;
	STRUCTURE nextNode;
	nextNode.X = X;
    1a16:	db 2c       	mov	r13, r11
	}
}

void DETECT_NEXT_NODE()
{
	unsigned char dir_count = 0;
    1a18:	f1 2c       	mov	r15, r1
    1a1a:	05 c0       	rjmp	.+10     	; 0x1a26 <DETECT_NEXT_NODE+0x290>
	STRUCTURE nextNode;
	nextNode.X = X;
    1a1c:	db 2c       	mov	r13, r11
	}
}

void DETECT_NEXT_NODE()
{
	unsigned char dir_count = 0;
    1a1e:	f1 2c       	mov	r15, r1
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DETECT_NEXT_NODE+0x290>
	STRUCTURE nextNode;
	nextNode.X = X;
    1a22:	db 2c       	mov	r13, r11
	}
}

void DETECT_NEXT_NODE()
{
	unsigned char dir_count = 0;
    1a24:	f1 2c       	mov	r15, r1
		nextNode.Y = Y;
		dir_count = 1;
		loop_count = 1;
	}
	
	if(((Y-1)>=0) && (details1[X][Y-1].priority > nextNode.priority) && (details1[X][Y-1].status == UNVISITED))
    1a26:	33 23       	and	r19, r19
    1a28:	e4 f1       	brlt	.+120    	; 0x1aa2 <DETECT_NEXT_NODE+0x30c>
    1a2a:	d9 01       	movw	r26, r18
    1a2c:	aa 0f       	add	r26, r26
    1a2e:	bb 1f       	adc	r27, r27
    1a30:	a9 01       	movw	r20, r18
    1a32:	44 0f       	add	r20, r20
    1a34:	55 1f       	adc	r21, r21
    1a36:	44 0f       	add	r20, r20
    1a38:	55 1f       	adc	r21, r21
    1a3a:	44 0f       	add	r20, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	a4 0f       	add	r26, r20
    1a40:	b5 1f       	adc	r27, r21
    1a42:	16 e4       	ldi	r17, 0x46	; 70
    1a44:	16 9f       	mul	r17, r22
    1a46:	a0 01       	movw	r20, r0
    1a48:	17 9f       	mul	r17, r23
    1a4a:	50 0d       	add	r21, r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	a4 0f       	add	r26, r20
    1a50:	b5 1f       	adc	r27, r21
    1a52:	ac 55       	subi	r26, 0x5C	; 92
    1a54:	bc 4f       	sbci	r27, 0xFC	; 252
    1a56:	11 96       	adiw	r26, 0x01	; 1
    1a58:	4c 91       	ld	r20, X
    1a5a:	44 23       	and	r20, r20
    1a5c:	21 f1       	breq	.+72     	; 0x1aa6 <DETECT_NEXT_NODE+0x310>
    1a5e:	d9 01       	movw	r26, r18
    1a60:	aa 0f       	add	r26, r26
    1a62:	bb 1f       	adc	r27, r27
    1a64:	a9 01       	movw	r20, r18
    1a66:	44 0f       	add	r20, r20
    1a68:	55 1f       	adc	r21, r21
    1a6a:	44 0f       	add	r20, r20
    1a6c:	55 1f       	adc	r21, r21
    1a6e:	44 0f       	add	r20, r20
    1a70:	55 1f       	adc	r21, r21
    1a72:	a4 0f       	add	r26, r20
    1a74:	b5 1f       	adc	r27, r21
    1a76:	16 9f       	mul	r17, r22
    1a78:	a0 01       	movw	r20, r0
    1a7a:	17 9f       	mul	r17, r23
    1a7c:	50 0d       	add	r21, r0
    1a7e:	11 24       	eor	r1, r1
    1a80:	a4 0f       	add	r26, r20
    1a82:	b5 1f       	adc	r27, r21
    1a84:	ac 55       	subi	r26, 0x5C	; 92
    1a86:	bc 4f       	sbci	r27, 0xFC	; 252
    1a88:	4c 91       	ld	r20, X
    1a8a:	41 11       	cpse	r20, r1
    1a8c:	0e c0       	rjmp	.+28     	; 0x1aaa <DETECT_NEXT_NODE+0x314>
	{
		nextNode.X = X;
		nextNode.Y = Y-1;
    1a8e:	ac 2c       	mov	r10, r12
    1a90:	aa 94       	dec	r10
		dir_count = 2;
		loop_count = 1;
    1a92:	41 e0       	ldi	r20, 0x01	; 1
    1a94:	40 93 f8 00 	sts	0x00F8, r20
		loop_count = 1;
	}
	
	if(((Y-1)>=0) && (details1[X][Y-1].priority > nextNode.priority) && (details1[X][Y-1].status == UNVISITED))
	{
		nextNode.X = X;
    1a98:	db 2c       	mov	r13, r11
		nextNode.Y = Y-1;
		dir_count = 2;
    1a9a:	68 94       	set
    1a9c:	ff 24       	eor	r15, r15
    1a9e:	f1 f8       	bld	r15, 1
    1aa0:	05 c0       	rjmp	.+10     	; 0x1aac <DETECT_NEXT_NODE+0x316>
		nextNode.Y = Y;
		dir_count = 1;
		loop_count = 1;
	}
	
	if(((Y-1)>=0) && (details1[X][Y-1].priority > nextNode.priority) && (details1[X][Y-1].status == UNVISITED))
    1aa2:	ac 2c       	mov	r10, r12
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <DETECT_NEXT_NODE+0x316>
    1aa6:	ac 2c       	mov	r10, r12
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <DETECT_NEXT_NODE+0x316>
    1aaa:	ac 2c       	mov	r10, r12
		nextNode.Y = Y-1;
		dir_count = 2;
		loop_count = 1;
	}
		
	if(((X-1)>=0) && (details1[X-1][Y].priority > nextNode.priority) && (details1[X-1][Y].status == UNVISITED))
    1aac:	ff 23       	and	r31, r31
    1aae:	e4 f1       	brlt	.+120    	; 0x1b28 <DETECT_NEXT_NODE+0x392>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	aa 0f       	add	r26, r26
    1ab4:	bb 1f       	adc	r27, r27
    1ab6:	ac 01       	movw	r20, r24
    1ab8:	44 0f       	add	r20, r20
    1aba:	55 1f       	adc	r21, r21
    1abc:	44 0f       	add	r20, r20
    1abe:	55 1f       	adc	r21, r21
    1ac0:	44 0f       	add	r20, r20
    1ac2:	55 1f       	adc	r21, r21
    1ac4:	a4 0f       	add	r26, r20
    1ac6:	b5 1f       	adc	r27, r21
    1ac8:	16 e4       	ldi	r17, 0x46	; 70
    1aca:	1e 9f       	mul	r17, r30
    1acc:	a0 01       	movw	r20, r0
    1ace:	1f 9f       	mul	r17, r31
    1ad0:	50 0d       	add	r21, r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	a4 0f       	add	r26, r20
    1ad6:	b5 1f       	adc	r27, r21
    1ad8:	ac 55       	subi	r26, 0x5C	; 92
    1ada:	bc 4f       	sbci	r27, 0xFC	; 252
    1adc:	11 96       	adiw	r26, 0x01	; 1
    1ade:	4c 91       	ld	r20, X
    1ae0:	44 23       	and	r20, r20
    1ae2:	11 f1       	breq	.+68     	; 0x1b28 <DETECT_NEXT_NODE+0x392>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	aa 0f       	add	r26, r26
    1ae8:	bb 1f       	adc	r27, r27
    1aea:	ac 01       	movw	r20, r24
    1aec:	44 0f       	add	r20, r20
    1aee:	55 1f       	adc	r21, r21
    1af0:	44 0f       	add	r20, r20
    1af2:	55 1f       	adc	r21, r21
    1af4:	44 0f       	add	r20, r20
    1af6:	55 1f       	adc	r21, r21
    1af8:	a4 0f       	add	r26, r20
    1afa:	b5 1f       	adc	r27, r21
    1afc:	1e 9f       	mul	r17, r30
    1afe:	a0 01       	movw	r20, r0
    1b00:	1f 9f       	mul	r17, r31
    1b02:	50 0d       	add	r21, r0
    1b04:	11 24       	eor	r1, r1
    1b06:	a4 0f       	add	r26, r20
    1b08:	b5 1f       	adc	r27, r21
    1b0a:	ac 55       	subi	r26, 0x5C	; 92
    1b0c:	bc 4f       	sbci	r27, 0xFC	; 252
    1b0e:	4c 91       	ld	r20, X
    1b10:	41 11       	cpse	r20, r1
    1b12:	0a c0       	rjmp	.+20     	; 0x1b28 <DETECT_NEXT_NODE+0x392>
	{
		nextNode.X = X-1;
    1b14:	db 2c       	mov	r13, r11
    1b16:	da 94       	dec	r13
		nextNode.Y = Y;
		dir_count = 3;
		loop_count = 1;
    1b18:	41 e0       	ldi	r20, 0x01	; 1
    1b1a:	40 93 f8 00 	sts	0x00F8, r20
	}
		
	if(((X-1)>=0) && (details1[X-1][Y].priority > nextNode.priority) && (details1[X-1][Y].status == UNVISITED))
	{
		nextNode.X = X-1;
		nextNode.Y = Y;
    1b1e:	ac 2c       	mov	r10, r12
		dir_count = 3;
    1b20:	0f 2e       	mov	r0, r31
    1b22:	f3 e0       	ldi	r31, 0x03	; 3
    1b24:	ff 2e       	mov	r15, r31
    1b26:	f0 2d       	mov	r31, r0
		loop_count = 1;
	}
	
	if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].priority > nextNode.priority) && (details1[X][Y+1].status == UNVISITED))
    1b28:	dc 01       	movw	r26, r24
    1b2a:	11 96       	adiw	r26, 0x01	; 1
    1b2c:	a7 30       	cpi	r26, 0x07	; 7
    1b2e:	b1 05       	cpc	r27, r1
    1b30:	34 f5       	brge	.+76     	; 0x1b7e <DETECT_NEXT_NODE+0x3e8>
    1b32:	8d 01       	movw	r16, r26
    1b34:	00 0f       	add	r16, r16
    1b36:	11 1f       	adc	r17, r17
    1b38:	ad 01       	movw	r20, r26
    1b3a:	44 0f       	add	r20, r20
    1b3c:	55 1f       	adc	r21, r21
    1b3e:	44 0f       	add	r20, r20
    1b40:	55 1f       	adc	r21, r21
    1b42:	44 0f       	add	r20, r20
    1b44:	55 1f       	adc	r21, r21
    1b46:	04 0f       	add	r16, r20
    1b48:	15 1f       	adc	r17, r21
    1b4a:	0f 2e       	mov	r0, r31
    1b4c:	f6 e4       	ldi	r31, 0x46	; 70
    1b4e:	ef 2e       	mov	r14, r31
    1b50:	f0 2d       	mov	r31, r0
    1b52:	e6 9e       	mul	r14, r22
    1b54:	a0 01       	movw	r20, r0
    1b56:	e7 9e       	mul	r14, r23
    1b58:	50 0d       	add	r21, r0
    1b5a:	11 24       	eor	r1, r1
    1b5c:	40 0f       	add	r20, r16
    1b5e:	51 1f       	adc	r21, r17
    1b60:	4c 55       	subi	r20, 0x5C	; 92
    1b62:	5c 4f       	sbci	r21, 0xFC	; 252
    1b64:	ea 01       	movw	r28, r20
    1b66:	49 81       	ldd	r20, Y+1	; 0x01
    1b68:	44 23       	and	r20, r20
    1b6a:	49 f0       	breq	.+18     	; 0x1b7e <DETECT_NEXT_NODE+0x3e8>
    1b6c:	48 81       	ld	r20, Y
    1b6e:	41 11       	cpse	r20, r1
    1b70:	06 c0       	rjmp	.+12     	; 0x1b7e <DETECT_NEXT_NODE+0x3e8>
	{
		nextNode.X = X;
		nextNode.Y = Y+1;
    1b72:	ac 2c       	mov	r10, r12
    1b74:	a3 94       	inc	r10
			nextNode.X = X+1;
			nextNode.Y = Y;
		}
		details1[X][Y].status = BLOCK;
	}
	loop_count--;
    1b76:	10 92 f8 00 	sts	0x00F8, r1
		loop_count = 1;
	}
	
	if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].priority > nextNode.priority) && (details1[X][Y+1].status == UNVISITED))
	{
		nextNode.X = X;
    1b7a:	db 2c       	mov	r13, r11
    1b7c:	37 c1       	rjmp	.+622    	; 0x1dec <DETECT_NEXT_NODE+0x656>
		nextNode.Y = Y+1;
		dir_count = 4;
		loop_count = 1;
	}
	
	if (dir_count == 0)
    1b7e:	f1 10       	cpse	r15, r1
    1b80:	a9 c0       	rjmp	.+338    	; 0x1cd4 <DETECT_NEXT_NODE+0x53e>
	{
		loop_count++;
    1b82:	40 91 f8 00 	lds	r20, 0x00F8
    1b86:	4f 5f       	subi	r20, 0xFF	; 255
    1b88:	40 93 f8 00 	sts	0x00F8, r20
		if(((X-1)>=0) && (details1[X-1][Y].status == VISITED))
    1b8c:	ff 23       	and	r31, r31
    1b8e:	04 f1       	brlt	.+64     	; 0x1bd0 <DETECT_NEXT_NODE+0x43a>
    1b90:	8c 01       	movw	r16, r24
    1b92:	00 0f       	add	r16, r16
    1b94:	11 1f       	adc	r17, r17
    1b96:	ac 01       	movw	r20, r24
    1b98:	44 0f       	add	r20, r20
    1b9a:	55 1f       	adc	r21, r21
    1b9c:	44 0f       	add	r20, r20
    1b9e:	55 1f       	adc	r21, r21
    1ba0:	44 0f       	add	r20, r20
    1ba2:	55 1f       	adc	r21, r21
    1ba4:	04 0f       	add	r16, r20
    1ba6:	15 1f       	adc	r17, r21
    1ba8:	0f 2e       	mov	r0, r31
    1baa:	f6 e4       	ldi	r31, 0x46	; 70
    1bac:	ff 2e       	mov	r15, r31
    1bae:	f0 2d       	mov	r31, r0
    1bb0:	fe 9e       	mul	r15, r30
    1bb2:	a0 01       	movw	r20, r0
    1bb4:	ff 9e       	mul	r15, r31
    1bb6:	50 0d       	add	r21, r0
    1bb8:	11 24       	eor	r1, r1
    1bba:	40 0f       	add	r20, r16
    1bbc:	51 1f       	adc	r21, r17
    1bbe:	4c 55       	subi	r20, 0x5C	; 92
    1bc0:	5c 4f       	sbci	r21, 0xFC	; 252
    1bc2:	ea 01       	movw	r28, r20
    1bc4:	48 81       	ld	r20, Y
    1bc6:	41 30       	cpi	r20, 0x01	; 1
    1bc8:	19 f4       	brne	.+6      	; 0x1bd0 <DETECT_NEXT_NODE+0x43a>
		{
			nextNode.X = X-1;
    1bca:	db 2c       	mov	r13, r11
    1bcc:	da 94       	dec	r13
			nextNode.Y = Y;
    1bce:	ac 2c       	mov	r10, r12
		}
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status == VISITED))
    1bd0:	a7 30       	cpi	r26, 0x07	; 7
    1bd2:	b1 05       	cpc	r27, r1
    1bd4:	04 f5       	brge	.+64     	; 0x1c16 <DETECT_NEXT_NODE+0x480>
    1bd6:	8d 01       	movw	r16, r26
    1bd8:	00 0f       	add	r16, r16
    1bda:	11 1f       	adc	r17, r17
    1bdc:	ad 01       	movw	r20, r26
    1bde:	44 0f       	add	r20, r20
    1be0:	55 1f       	adc	r21, r21
    1be2:	44 0f       	add	r20, r20
    1be4:	55 1f       	adc	r21, r21
    1be6:	44 0f       	add	r20, r20
    1be8:	55 1f       	adc	r21, r21
    1bea:	04 0f       	add	r16, r20
    1bec:	15 1f       	adc	r17, r21
    1bee:	0f 2e       	mov	r0, r31
    1bf0:	f6 e4       	ldi	r31, 0x46	; 70
    1bf2:	ff 2e       	mov	r15, r31
    1bf4:	f0 2d       	mov	r31, r0
    1bf6:	f6 9e       	mul	r15, r22
    1bf8:	a0 01       	movw	r20, r0
    1bfa:	f7 9e       	mul	r15, r23
    1bfc:	50 0d       	add	r21, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	40 0f       	add	r20, r16
    1c02:	51 1f       	adc	r21, r17
    1c04:	4c 55       	subi	r20, 0x5C	; 92
    1c06:	5c 4f       	sbci	r21, 0xFC	; 252
    1c08:	ea 01       	movw	r28, r20
    1c0a:	48 81       	ld	r20, Y
    1c0c:	41 30       	cpi	r20, 0x01	; 1
    1c0e:	19 f4       	brne	.+6      	; 0x1c16 <DETECT_NEXT_NODE+0x480>
		{
			nextNode.X = X;
			nextNode.Y = Y+1;
    1c10:	ac 2c       	mov	r10, r12
    1c12:	a3 94       	inc	r10
			nextNode.X = X-1;
			nextNode.Y = Y;
		}
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status == VISITED))
		{
			nextNode.X = X;
    1c14:	db 2c       	mov	r13, r11
			nextNode.Y = Y+1;
		}
		if(((Y-1)>=0) && (details1[X][Y-1].status == VISITED))
    1c16:	33 23       	and	r19, r19
    1c18:	04 f1       	brlt	.+64     	; 0x1c5a <DETECT_NEXT_NODE+0x4c4>
    1c1a:	89 01       	movw	r16, r18
    1c1c:	00 0f       	add	r16, r16
    1c1e:	11 1f       	adc	r17, r17
    1c20:	a9 01       	movw	r20, r18
    1c22:	44 0f       	add	r20, r20
    1c24:	55 1f       	adc	r21, r21
    1c26:	44 0f       	add	r20, r20
    1c28:	55 1f       	adc	r21, r21
    1c2a:	44 0f       	add	r20, r20
    1c2c:	55 1f       	adc	r21, r21
    1c2e:	04 0f       	add	r16, r20
    1c30:	15 1f       	adc	r17, r21
    1c32:	0f 2e       	mov	r0, r31
    1c34:	f6 e4       	ldi	r31, 0x46	; 70
    1c36:	ff 2e       	mov	r15, r31
    1c38:	f0 2d       	mov	r31, r0
    1c3a:	f6 9e       	mul	r15, r22
    1c3c:	a0 01       	movw	r20, r0
    1c3e:	f7 9e       	mul	r15, r23
    1c40:	50 0d       	add	r21, r0
    1c42:	11 24       	eor	r1, r1
    1c44:	40 0f       	add	r20, r16
    1c46:	51 1f       	adc	r21, r17
    1c48:	4c 55       	subi	r20, 0x5C	; 92
    1c4a:	5c 4f       	sbci	r21, 0xFC	; 252
    1c4c:	ea 01       	movw	r28, r20
    1c4e:	48 81       	ld	r20, Y
    1c50:	41 30       	cpi	r20, 0x01	; 1
    1c52:	19 f4       	brne	.+6      	; 0x1c5a <DETECT_NEXT_NODE+0x4c4>
		{
			nextNode.X = X;
			nextNode.Y = Y-1;
    1c54:	ac 2c       	mov	r10, r12
    1c56:	aa 94       	dec	r10
			nextNode.X = X;
			nextNode.Y = Y+1;
		}
		if(((Y-1)>=0) && (details1[X][Y-1].status == VISITED))
		{
			nextNode.X = X;
    1c58:	db 2c       	mov	r13, r11
			nextNode.Y = Y-1;
		}
		if(((X+1)<MAX_GRID_X) && (details1[X+1][Y].status == VISITED))
    1c5a:	d5 e0       	ldi	r29, 0x05	; 5
    1c5c:	8d 16       	cp	r8, r29
    1c5e:	91 04       	cpc	r9, r1
    1c60:	04 f5       	brge	.+64     	; 0x1ca2 <DETECT_NEXT_NODE+0x50c>
    1c62:	8c 01       	movw	r16, r24
    1c64:	00 0f       	add	r16, r16
    1c66:	11 1f       	adc	r17, r17
    1c68:	ac 01       	movw	r20, r24
    1c6a:	44 0f       	add	r20, r20
    1c6c:	55 1f       	adc	r21, r21
    1c6e:	44 0f       	add	r20, r20
    1c70:	55 1f       	adc	r21, r21
    1c72:	44 0f       	add	r20, r20
    1c74:	55 1f       	adc	r21, r21
    1c76:	04 0f       	add	r16, r20
    1c78:	15 1f       	adc	r17, r21
    1c7a:	0f 2e       	mov	r0, r31
    1c7c:	f6 e4       	ldi	r31, 0x46	; 70
    1c7e:	ff 2e       	mov	r15, r31
    1c80:	f0 2d       	mov	r31, r0
    1c82:	f8 9c       	mul	r15, r8
    1c84:	a0 01       	movw	r20, r0
    1c86:	f9 9c       	mul	r15, r9
    1c88:	50 0d       	add	r21, r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	40 0f       	add	r20, r16
    1c8e:	51 1f       	adc	r21, r17
    1c90:	4c 55       	subi	r20, 0x5C	; 92
    1c92:	5c 4f       	sbci	r21, 0xFC	; 252
    1c94:	ea 01       	movw	r28, r20
    1c96:	48 81       	ld	r20, Y
    1c98:	41 30       	cpi	r20, 0x01	; 1
    1c9a:	19 f4       	brne	.+6      	; 0x1ca2 <DETECT_NEXT_NODE+0x50c>
		{
			nextNode.X = X+1;
    1c9c:	db 2c       	mov	r13, r11
    1c9e:	d3 94       	inc	r13
			nextNode.Y = Y;
    1ca0:	ac 2c       	mov	r10, r12
		}
		details1[X][Y].status = BLOCK;
    1ca2:	7c 01       	movw	r14, r24
    1ca4:	ee 0c       	add	r14, r14
    1ca6:	ff 1c       	adc	r15, r15
    1ca8:	8c 01       	movw	r16, r24
    1caa:	00 0f       	add	r16, r16
    1cac:	11 1f       	adc	r17, r17
    1cae:	00 0f       	add	r16, r16
    1cb0:	11 1f       	adc	r17, r17
    1cb2:	00 0f       	add	r16, r16
    1cb4:	11 1f       	adc	r17, r17
    1cb6:	e0 0e       	add	r14, r16
    1cb8:	f1 1e       	adc	r15, r17
    1cba:	46 e4       	ldi	r20, 0x46	; 70
    1cbc:	46 9f       	mul	r20, r22
    1cbe:	80 01       	movw	r16, r0
    1cc0:	47 9f       	mul	r20, r23
    1cc2:	10 0d       	add	r17, r0
    1cc4:	11 24       	eor	r1, r1
    1cc6:	0e 0d       	add	r16, r14
    1cc8:	1f 1d       	adc	r17, r15
    1cca:	0c 55       	subi	r16, 0x5C	; 92
    1ccc:	1c 4f       	sbci	r17, 0xFC	; 252
    1cce:	42 e0       	ldi	r20, 0x02	; 2
    1cd0:	e8 01       	movw	r28, r16
    1cd2:	48 83       	st	Y, r20
	}
	loop_count--;
    1cd4:	40 91 f8 00 	lds	r20, 0x00F8
    1cd8:	41 50       	subi	r20, 0x01	; 1
    1cda:	40 93 f8 00 	sts	0x00F8, r20
	if (loop_count > 4 && currentMode == BLOCK_SEARCH_MODE)
    1cde:	45 30       	cpi	r20, 0x05	; 5
    1ce0:	08 f4       	brcc	.+2      	; 0x1ce4 <DETECT_NEXT_NODE+0x54e>
    1ce2:	84 c0       	rjmp	.+264    	; 0x1dec <DETECT_NEXT_NODE+0x656>
    1ce4:	40 91 00 01 	lds	r20, 0x0100
    1ce8:	41 11       	cpse	r20, r1
    1cea:	80 c0       	rjmp	.+256    	; 0x1dec <DETECT_NEXT_NODE+0x656>
	{	
		loop_count = 5;
    1cec:	45 e0       	ldi	r20, 0x05	; 5
    1cee:	40 93 f8 00 	sts	0x00F8, r20
		if(((X+1)<MAX_GRID_X) && (details1[X+1][Y].status == VISITED))
    1cf2:	d5 e0       	ldi	r29, 0x05	; 5
    1cf4:	8d 16       	cp	r8, r29
    1cf6:	91 04       	cpc	r9, r1
    1cf8:	04 f5       	brge	.+64     	; 0x1d3a <DETECT_NEXT_NODE+0x5a4>
    1cfa:	8c 01       	movw	r16, r24
    1cfc:	00 0f       	add	r16, r16
    1cfe:	11 1f       	adc	r17, r17
    1d00:	ac 01       	movw	r20, r24
    1d02:	44 0f       	add	r20, r20
    1d04:	55 1f       	adc	r21, r21
    1d06:	44 0f       	add	r20, r20
    1d08:	55 1f       	adc	r21, r21
    1d0a:	44 0f       	add	r20, r20
    1d0c:	55 1f       	adc	r21, r21
    1d0e:	04 0f       	add	r16, r20
    1d10:	15 1f       	adc	r17, r21
    1d12:	0f 2e       	mov	r0, r31
    1d14:	f6 e4       	ldi	r31, 0x46	; 70
    1d16:	ff 2e       	mov	r15, r31
    1d18:	f0 2d       	mov	r31, r0
    1d1a:	f8 9c       	mul	r15, r8
    1d1c:	a0 01       	movw	r20, r0
    1d1e:	f9 9c       	mul	r15, r9
    1d20:	50 0d       	add	r21, r0
    1d22:	11 24       	eor	r1, r1
    1d24:	40 0f       	add	r20, r16
    1d26:	51 1f       	adc	r21, r17
    1d28:	ea 01       	movw	r28, r20
    1d2a:	cc 55       	subi	r28, 0x5C	; 92
    1d2c:	dc 4f       	sbci	r29, 0xFC	; 252
    1d2e:	48 81       	ld	r20, Y
    1d30:	41 30       	cpi	r20, 0x01	; 1
    1d32:	19 f4       	brne	.+6      	; 0x1d3a <DETECT_NEXT_NODE+0x5a4>
		{
			nextNode.X = X+1;
    1d34:	db 2c       	mov	r13, r11
    1d36:	d3 94       	inc	r13
			nextNode.Y = Y;
    1d38:	ac 2c       	mov	r10, r12
		}
				
		if(((Y-1)>=0) && (details1[X][Y-1].status == VISITED))
    1d3a:	33 23       	and	r19, r19
    1d3c:	dc f0       	brlt	.+54     	; 0x1d74 <DETECT_NEXT_NODE+0x5de>
    1d3e:	e9 01       	movw	r28, r18
    1d40:	cc 0f       	add	r28, r28
    1d42:	dd 1f       	adc	r29, r29
    1d44:	22 0f       	add	r18, r18
    1d46:	33 1f       	adc	r19, r19
    1d48:	22 0f       	add	r18, r18
    1d4a:	33 1f       	adc	r19, r19
    1d4c:	22 0f       	add	r18, r18
    1d4e:	33 1f       	adc	r19, r19
    1d50:	c2 0f       	add	r28, r18
    1d52:	d3 1f       	adc	r29, r19
    1d54:	26 e4       	ldi	r18, 0x46	; 70
    1d56:	26 9f       	mul	r18, r22
    1d58:	a0 01       	movw	r20, r0
    1d5a:	27 9f       	mul	r18, r23
    1d5c:	50 0d       	add	r21, r0
    1d5e:	11 24       	eor	r1, r1
    1d60:	c4 0f       	add	r28, r20
    1d62:	d5 1f       	adc	r29, r21
    1d64:	cc 55       	subi	r28, 0x5C	; 92
    1d66:	dc 4f       	sbci	r29, 0xFC	; 252
    1d68:	28 81       	ld	r18, Y
    1d6a:	21 30       	cpi	r18, 0x01	; 1
    1d6c:	19 f4       	brne	.+6      	; 0x1d74 <DETECT_NEXT_NODE+0x5de>
		{
			nextNode.X = X;
			nextNode.Y = Y-1;
    1d6e:	ac 2c       	mov	r10, r12
    1d70:	aa 94       	dec	r10
			nextNode.Y = Y;
		}
				
		if(((Y-1)>=0) && (details1[X][Y-1].status == VISITED))
		{
			nextNode.X = X;
    1d72:	db 2c       	mov	r13, r11
			nextNode.Y = Y-1;
		}
		
		if(((X-1)>=0) && (details1[X-1][Y].status == VISITED))
    1d74:	ff 23       	and	r31, r31
    1d76:	e4 f0       	brlt	.+56     	; 0x1db0 <DETECT_NEXT_NODE+0x61a>
    1d78:	9c 01       	movw	r18, r24
    1d7a:	22 0f       	add	r18, r18
    1d7c:	33 1f       	adc	r19, r19
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	82 0f       	add	r24, r18
    1d8c:	93 1f       	adc	r25, r19
    1d8e:	46 e4       	ldi	r20, 0x46	; 70
    1d90:	4e 9f       	mul	r20, r30
    1d92:	90 01       	movw	r18, r0
    1d94:	4f 9f       	mul	r20, r31
    1d96:	30 0d       	add	r19, r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	e2 0f       	add	r30, r18
    1d9e:	f3 1f       	adc	r31, r19
    1da0:	ec 55       	subi	r30, 0x5C	; 92
    1da2:	fc 4f       	sbci	r31, 0xFC	; 252
    1da4:	80 81       	ld	r24, Z
    1da6:	81 30       	cpi	r24, 0x01	; 1
    1da8:	19 f4       	brne	.+6      	; 0x1db0 <DETECT_NEXT_NODE+0x61a>
		{
			nextNode.X = X-1;
    1daa:	db 2c       	mov	r13, r11
    1dac:	da 94       	dec	r13
			nextNode.Y = Y;
    1dae:	ac 2c       	mov	r10, r12
		}
				
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status == VISITED))
    1db0:	a7 30       	cpi	r26, 0x07	; 7
    1db2:	b1 05       	cpc	r27, r1
    1db4:	dc f4       	brge	.+54     	; 0x1dec <DETECT_NEXT_NODE+0x656>
    1db6:	cd 01       	movw	r24, r26
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	aa 0f       	add	r26, r26
    1dbe:	bb 1f       	adc	r27, r27
    1dc0:	aa 0f       	add	r26, r26
    1dc2:	bb 1f       	adc	r27, r27
    1dc4:	aa 0f       	add	r26, r26
    1dc6:	bb 1f       	adc	r27, r27
    1dc8:	a8 0f       	add	r26, r24
    1dca:	b9 1f       	adc	r27, r25
    1dcc:	26 e4       	ldi	r18, 0x46	; 70
    1dce:	26 9f       	mul	r18, r22
    1dd0:	c0 01       	movw	r24, r0
    1dd2:	27 9f       	mul	r18, r23
    1dd4:	90 0d       	add	r25, r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	a8 0f       	add	r26, r24
    1dda:	b9 1f       	adc	r27, r25
    1ddc:	ac 55       	subi	r26, 0x5C	; 92
    1dde:	bc 4f       	sbci	r27, 0xFC	; 252
    1de0:	8c 91       	ld	r24, X
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	19 f4       	brne	.+6      	; 0x1dec <DETECT_NEXT_NODE+0x656>
		{
			nextNode.X = X;
			nextNode.Y = Y+1;
    1de6:	ac 2c       	mov	r10, r12
    1de8:	a3 94       	inc	r10
			nextNode.Y = Y;
		}
				
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status == VISITED))
		{
			nextNode.X = X;
    1dea:	db 2c       	mov	r13, r11
			nextNode.Y = Y+1;
		}
	}
	
	LCD_CLEAR();
    1dec:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
	LCD_SET_CURSER(2,1);
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
	LCD_DATA('(');
    1df8:	88 e2       	ldi	r24, 0x28	; 40
    1dfa:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(X+0x30);
    1dfe:	80 91 05 01 	lds	r24, 0x0105
    1e02:	80 5d       	subi	r24, 0xD0	; 208
    1e04:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(',');
    1e08:	8c e2       	ldi	r24, 0x2C	; 44
    1e0a:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(Y+0x30);
    1e0e:	80 91 04 01 	lds	r24, 0x0104
    1e12:	80 5d       	subi	r24, 0xD0	; 208
    1e14:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(')');
    1e18:	89 e2       	ldi	r24, 0x29	; 41
    1e1a:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_PRINT(" --> ");
    1e1e:	8c ec       	ldi	r24, 0xCC	; 204
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
	LCD_PRINT("(");
    1e26:	85 ef       	ldi	r24, 0xF5	; 245
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
	LCD_DATA(nextNode.X+0x30);
    1e2e:	8d 2d       	mov	r24, r13
    1e30:	80 5d       	subi	r24, 0xD0	; 208
    1e32:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(',');
    1e36:	8c e2       	ldi	r24, 0x2C	; 44
    1e38:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(nextNode.Y+0x30);
    1e3c:	8a 2d       	mov	r24, r10
    1e3e:	80 5d       	subi	r24, 0xD0	; 208
    1e40:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(')');
    1e44:	89 e2       	ldi	r24, 0x29	; 41
    1e46:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_SET_CURSER(1,7);
    1e4a:	67 e0       	ldi	r22, 0x07	; 7
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
	LCD_NUM(coord_count);
    1e52:	80 91 61 00 	lds	r24, 0x0061
    1e56:	0e 94 11 01 	call	0x222	; 0x222 <LCD_NUM>
	if(currentMode == BLOCK_SEARCH_MODE)
    1e5a:	80 91 00 01 	lds	r24, 0x0100
    1e5e:	81 11       	cpse	r24, r1
    1e60:	08 c0       	rjmp	.+16     	; 0x1e72 <DETECT_NEXT_NODE+0x6dc>
	{
		MOVE_NEXT_NODE(X,Y,nextNode.X,nextNode.Y);
    1e62:	2a 2d       	mov	r18, r10
    1e64:	4d 2d       	mov	r20, r13
    1e66:	60 91 04 01 	lds	r22, 0x0104
    1e6a:	80 91 05 01 	lds	r24, 0x0105
    1e6e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOVE_NEXT_NODE>
	}
}
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	df 90       	pop	r13
    1e80:	cf 90       	pop	r12
    1e82:	bf 90       	pop	r11
    1e84:	af 90       	pop	r10
    1e86:	9f 90       	pop	r9
    1e88:	8f 90       	pop	r8
    1e8a:	08 95       	ret

00001e8c <MOVE_TO_NEAREST_BLOCK>:
		destinationCounter--;
	}
}

void MOVE_TO_NEAREST_BLOCK()
{
    1e8c:	ff 92       	push	r15
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
	unsigned char i, a, j=0;
	unsigned char distance,tempd;
	block_caught = FALSE;
    1e96:	10 92 fd 00 	sts	0x00FD, r1
	distance = DIGKSTRA(X,Y,block[0].X,block[0].Y,FALSE);
    1e9a:	00 e0       	ldi	r16, 0x00	; 0
    1e9c:	20 91 09 01 	lds	r18, 0x0109
    1ea0:	40 91 08 01 	lds	r20, 0x0108
    1ea4:	60 91 04 01 	lds	r22, 0x0104
    1ea8:	80 91 05 01 	lds	r24, 0x0105
    1eac:	0e 94 72 07 	call	0xee4	; 0xee4 <DIGKSTRA>
    1eb0:	18 2f       	mov	r17, r24
	for(i=1;i<blockCounter;i++)
    1eb2:	20 91 f9 00 	lds	r18, 0x00F9
    1eb6:	22 30       	cpi	r18, 0x02	; 2
    1eb8:	90 f1       	brcs	.+100    	; 0x1f1e <MOVE_TO_NEAREST_BLOCK+0x92>
	}
}

void MOVE_TO_NEAREST_BLOCK()
{
	unsigned char i, a, j=0;
    1eba:	f1 2c       	mov	r15, r1
	unsigned char distance,tempd;
	block_caught = FALSE;
	distance = DIGKSTRA(X,Y,block[0].X,block[0].Y,FALSE);
	for(i=1;i<blockCounter;i++)
    1ebc:	d1 e0       	ldi	r29, 0x01	; 1
	{
		tempd = DIGKSTRA(X,Y,block[i].X,block[i].Y,FALSE);
    1ebe:	2d 2f       	mov	r18, r29
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	22 0f       	add	r18, r18
    1ec4:	33 1f       	adc	r19, r19
    1ec6:	d9 01       	movw	r26, r18
    1ec8:	aa 0f       	add	r26, r26
    1eca:	bb 1f       	adc	r27, r27
    1ecc:	aa 0f       	add	r26, r26
    1ece:	bb 1f       	adc	r27, r27
    1ed0:	2a 0f       	add	r18, r26
    1ed2:	3b 1f       	adc	r19, r27
    1ed4:	d9 01       	movw	r26, r18
    1ed6:	aa 5f       	subi	r26, 0xFA	; 250
    1ed8:	be 4f       	sbci	r27, 0xFE	; 254
    1eda:	2d 2f       	mov	r18, r29
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	22 0f       	add	r18, r18
    1ee0:	33 1f       	adc	r19, r19
    1ee2:	f9 01       	movw	r30, r18
    1ee4:	ee 0f       	add	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	ee 0f       	add	r30, r30
    1eea:	ff 1f       	adc	r31, r31
    1eec:	2e 0f       	add	r18, r30
    1eee:	3f 1f       	adc	r19, r31
    1ef0:	f9 01       	movw	r30, r18
    1ef2:	ea 5f       	subi	r30, 0xFA	; 250
    1ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef6:	00 e0       	ldi	r16, 0x00	; 0
    1ef8:	13 96       	adiw	r26, 0x03	; 3
    1efa:	2c 91       	ld	r18, X
    1efc:	42 81       	ldd	r20, Z+2	; 0x02
    1efe:	60 91 04 01 	lds	r22, 0x0104
    1f02:	80 91 05 01 	lds	r24, 0x0105
    1f06:	0e 94 72 07 	call	0xee4	; 0xee4 <DIGKSTRA>
		if(tempd < distance)
    1f0a:	81 17       	cp	r24, r17
    1f0c:	10 f4       	brcc	.+4      	; 0x1f12 <MOVE_TO_NEAREST_BLOCK+0x86>
		{
			distance = tempd;
    1f0e:	18 2f       	mov	r17, r24
	block_caught = FALSE;
	distance = DIGKSTRA(X,Y,block[0].X,block[0].Y,FALSE);
	for(i=1;i<blockCounter;i++)
	{
		tempd = DIGKSTRA(X,Y,block[i].X,block[i].Y,FALSE);
		if(tempd < distance)
    1f10:	fd 2e       	mov	r15, r29
{
	unsigned char i, a, j=0;
	unsigned char distance,tempd;
	block_caught = FALSE;
	distance = DIGKSTRA(X,Y,block[0].X,block[0].Y,FALSE);
	for(i=1;i<blockCounter;i++)
    1f12:	df 5f       	subi	r29, 0xFF	; 255
    1f14:	20 91 f9 00 	lds	r18, 0x00F9
    1f18:	d2 17       	cp	r29, r18
    1f1a:	88 f2       	brcs	.-94     	; 0x1ebe <MOVE_TO_NEAREST_BLOCK+0x32>
    1f1c:	01 c0       	rjmp	.+2      	; 0x1f20 <MOVE_TO_NEAREST_BLOCK+0x94>
	}
}

void MOVE_TO_NEAREST_BLOCK()
{
	unsigned char i, a, j=0;
    1f1e:	f1 2c       	mov	r15, r1
			distance = tempd;
			j=i;
		}
	}	
	
	for(a=0;a<blockCounter;a++)
    1f20:	22 23       	and	r18, r18
    1f22:	a1 f0       	breq	.+40     	; 0x1f4c <MOVE_TO_NEAREST_BLOCK+0xc0>
    1f24:	e9 e0       	ldi	r30, 0x09	; 9
    1f26:	f1 e0       	ldi	r31, 0x01	; 1
    1f28:	30 e0       	ldi	r19, 0x00	; 0
		destination[index] = destination[destinationCounter-1];
		destinationCounter--;
	}
}

void MOVE_TO_NEAREST_BLOCK()
    1f2a:	df 01       	movw	r26, r30
    1f2c:	cf 01       	movw	r24, r30
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
		}
	}	
	
	for(a=0;a<blockCounter;a++)
	{
		if(block[a].X == 2 && block[a].Y == 1)	{j=a; }
    1f30:	ec 01       	movw	r28, r24
    1f32:	88 81       	ld	r24, Y
    1f34:	82 30       	cpi	r24, 0x02	; 2
    1f36:	31 f4       	brne	.+12     	; 0x1f44 <MOVE_TO_NEAREST_BLOCK+0xb8>
    1f38:	80 81       	ld	r24, Z
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <MOVE_TO_NEAREST_BLOCK+0xb4>
    1f3e:	b1 c0       	rjmp	.+354    	; 0x20a2 <MOVE_TO_NEAREST_BLOCK+0x216>
    1f40:	af c0       	rjmp	.+350    	; 0x20a0 <MOVE_TO_NEAREST_BLOCK+0x214>
		if(block[a].X == 2 && block[a].Y == 2)	{j=a; }
		if(block[a].X == 2 && block[a].Y == 3)	{j=a; }
		if(block[a].X == 2 && block[a].Y == 4)	{j=a; }
		if(block[a].X == 2 && block[a].Y == 5)	{j=a; }
    1f42:	f3 2e       	mov	r15, r19
			distance = tempd;
			j=i;
		}
	}	
	
	for(a=0;a<blockCounter;a++)
    1f44:	3f 5f       	subi	r19, 0xFF	; 255
    1f46:	3a 96       	adiw	r30, 0x0a	; 10
    1f48:	32 13       	cpse	r19, r18
    1f4a:	ef cf       	rjmp	.-34     	; 0x1f2a <MOVE_TO_NEAREST_BLOCK+0x9e>
		if(block[a].X == 2 && block[a].Y == 2)	{j=a; }
		if(block[a].X == 2 && block[a].Y == 3)	{j=a; }
		if(block[a].X == 2 && block[a].Y == 4)	{j=a; }
		if(block[a].X == 2 && block[a].Y == 5)	{j=a; }
	}
	LCD_CLEAR();
    1f4c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
	//LCD_NUM(block[j].X);
	//LCD_NUM(block[j].Y);
	//_delay_ms(2000);
	//LCD_PRINT("Aproach to block");
	MOTOR_PORT = 0x00;
    1f50:	12 ba       	out	0x12, r1	; 18
	DIGKSTRA(X,Y,block[j].X,block[j].Y,TRUE);
    1f52:	8f 2d       	mov	r24, r15
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	aa 0f       	add	r26, r26
    1f5e:	bb 1f       	adc	r27, r27
    1f60:	aa 0f       	add	r26, r26
    1f62:	bb 1f       	adc	r27, r27
    1f64:	8a 0f       	add	r24, r26
    1f66:	9b 1f       	adc	r25, r27
    1f68:	dc 01       	movw	r26, r24
    1f6a:	aa 5f       	subi	r26, 0xFA	; 250
    1f6c:	be 4f       	sbci	r27, 0xFE	; 254
    1f6e:	8f 2d       	mov	r24, r15
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	fc 01       	movw	r30, r24
    1f78:	ee 0f       	add	r30, r30
    1f7a:	ff 1f       	adc	r31, r31
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	8e 0f       	add	r24, r30
    1f82:	9f 1f       	adc	r25, r31
    1f84:	fc 01       	movw	r30, r24
    1f86:	ea 5f       	subi	r30, 0xFA	; 250
    1f88:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8a:	01 e0       	ldi	r16, 0x01	; 1
    1f8c:	13 96       	adiw	r26, 0x03	; 3
    1f8e:	2c 91       	ld	r18, X
    1f90:	42 81       	ldd	r20, Z+2	; 0x02
    1f92:	60 91 04 01 	lds	r22, 0x0104
    1f96:	80 91 05 01 	lds	r24, 0x0105
    1f9a:	0e 94 72 07 	call	0xee4	; 0xee4 <DIGKSTRA>
	details1[block[j].X][block[j].Y].status = VISITED;
    1f9e:	8f 2d       	mov	r24, r15
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	ee 0f       	add	r30, r30
    1fae:	ff 1f       	adc	r31, r31
    1fb0:	8e 0f       	add	r24, r30
    1fb2:	9f 1f       	adc	r25, r31
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	ea 5f       	subi	r30, 0xFA	; 250
    1fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fba:	8f 2d       	mov	r24, r15
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	aa 0f       	add	r26, r26
    1fc6:	bb 1f       	adc	r27, r27
    1fc8:	aa 0f       	add	r26, r26
    1fca:	bb 1f       	adc	r27, r27
    1fcc:	8a 0f       	add	r24, r26
    1fce:	9b 1f       	adc	r25, r27
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	aa 5f       	subi	r26, 0xFA	; 250
    1fd4:	be 4f       	sbci	r27, 0xFE	; 254
    1fd6:	12 96       	adiw	r26, 0x02	; 2
    1fd8:	2c 91       	ld	r18, X
    1fda:	83 81       	ldd	r24, Z+3	; 0x03
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	8e 0f       	add	r24, r30
    1fee:	9f 1f       	adc	r25, r31
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	d6 e4       	ldi	r29, 0x46	; 70
    1ff4:	2d 9f       	mul	r18, r29
    1ff6:	e0 0d       	add	r30, r0
    1ff8:	f1 1d       	adc	r31, r1
    1ffa:	11 24       	eor	r1, r1
    1ffc:	ec 55       	subi	r30, 0x5C	; 92
    1ffe:	fc 4f       	sbci	r31, 0xFC	; 252
    2000:	d1 e0       	ldi	r29, 0x01	; 1
    2002:	d0 83       	st	Z, r29
	REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY(j,BLOCK);
    2004:	62 e0       	ldi	r22, 0x02	; 2
    2006:	8f 2d       	mov	r24, r15
    2008:	0e 94 42 03 	call	0x684	; 0x684 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY>
	dest_coun = j;
    200c:	f0 92 03 01 	sts	0x0103, r15
	BLOCK_HOLD(FORWARD);
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	0e 94 a6 01 	call	0x34c	; 0x34c <BLOCK_HOLD>
	LCD_SET_CURSER(1,1);
    2016:	61 e0       	ldi	r22, 0x01	; 1
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
	LCD_PRINT("    Gripping    ");
    201e:	82 ed       	ldi	r24, 0xD2	; 210
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
    2026:	2f ef       	ldi	r18, 0xFF	; 255
    2028:	31 e1       	ldi	r19, 0x11	; 17
    202a:	8a e7       	ldi	r24, 0x7A	; 122
    202c:	21 50       	subi	r18, 0x01	; 1
    202e:	30 40       	sbci	r19, 0x00	; 0
    2030:	80 40       	sbci	r24, 0x00	; 0
    2032:	e1 f7       	brne	.-8      	; 0x202c <MOVE_TO_NEAREST_BLOCK+0x1a0>
    2034:	00 c0       	rjmp	.+0      	; 0x2036 <MOVE_TO_NEAREST_BLOCK+0x1aa>
    2036:	00 00       	nop
	_delay_ms(2500);
	BLOCK_LIFT(FORWARD);
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	0e 94 9c 01 	call	0x338	; 0x338 <BLOCK_LIFT>
    203e:	9f ef       	ldi	r25, 0xFF	; 255
    2040:	c5 ea       	ldi	r28, 0xA5	; 165
    2042:	2e e0       	ldi	r18, 0x0E	; 14
    2044:	91 50       	subi	r25, 0x01	; 1
    2046:	c0 40       	sbci	r28, 0x00	; 0
    2048:	20 40       	sbci	r18, 0x00	; 0
    204a:	e1 f7       	brne	.-8      	; 0x2044 <MOVE_TO_NEAREST_BLOCK+0x1b8>
    204c:	00 c0       	rjmp	.+0      	; 0x204e <MOVE_TO_NEAREST_BLOCK+0x1c2>
    204e:	00 00       	nop
	_delay_ms(300);
	MOTOR_PORT = 0x00;
    2050:	12 ba       	out	0x12, r1	; 18
	block_caught = TRUE;
    2052:	d0 93 fd 00 	sts	0x00FD, r29
	FOLLOW_ONE_NODE(FORWARD);
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	0e 94 c6 06 	call	0xd8c	; 0xd8c <FOLLOW_ONE_NODE>
	if(dir == 'N')
    205c:	80 91 62 00 	lds	r24, 0x0062
    2060:	8e 34       	cpi	r24, 0x4E	; 78
    2062:	31 f4       	brne	.+12     	; 0x2070 <MOVE_TO_NEAREST_BLOCK+0x1e4>
		Y--;
    2064:	80 91 04 01 	lds	r24, 0x0104
    2068:	81 50       	subi	r24, 0x01	; 1
    206a:	80 93 04 01 	sts	0x0104, r24
    206e:	2a c0       	rjmp	.+84     	; 0x20c4 <MOVE_TO_NEAREST_BLOCK+0x238>
	else if(dir=='E')
    2070:	85 34       	cpi	r24, 0x45	; 69
    2072:	31 f4       	brne	.+12     	; 0x2080 <MOVE_TO_NEAREST_BLOCK+0x1f4>
		X++;
    2074:	80 91 05 01 	lds	r24, 0x0105
    2078:	8f 5f       	subi	r24, 0xFF	; 255
    207a:	80 93 05 01 	sts	0x0105, r24
    207e:	22 c0       	rjmp	.+68     	; 0x20c4 <MOVE_TO_NEAREST_BLOCK+0x238>
	else if(dir=='W')
    2080:	87 35       	cpi	r24, 0x57	; 87
    2082:	31 f4       	brne	.+12     	; 0x2090 <MOVE_TO_NEAREST_BLOCK+0x204>
		X--;
    2084:	80 91 05 01 	lds	r24, 0x0105
    2088:	81 50       	subi	r24, 0x01	; 1
    208a:	80 93 05 01 	sts	0x0105, r24
    208e:	1a c0       	rjmp	.+52     	; 0x20c4 <MOVE_TO_NEAREST_BLOCK+0x238>
	else if(dir=='S')
    2090:	83 35       	cpi	r24, 0x53	; 83
    2092:	c1 f4       	brne	.+48     	; 0x20c4 <MOVE_TO_NEAREST_BLOCK+0x238>
		Y++;
    2094:	80 91 04 01 	lds	r24, 0x0104
    2098:	8f 5f       	subi	r24, 0xFF	; 255
    209a:	80 93 04 01 	sts	0x0104, r24
    209e:	12 c0       	rjmp	.+36     	; 0x20c4 <MOVE_TO_NEAREST_BLOCK+0x238>
		}
	}	
	
	for(a=0;a<blockCounter;a++)
	{
		if(block[a].X == 2 && block[a].Y == 1)	{j=a; }
    20a0:	f3 2e       	mov	r15, r19
		if(block[a].X == 2 && block[a].Y == 2)	{j=a; }
    20a2:	8c 91       	ld	r24, X
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	09 f4       	brne	.+2      	; 0x20aa <MOVE_TO_NEAREST_BLOCK+0x21e>
    20a8:	f3 2e       	mov	r15, r19
		if(block[a].X == 2 && block[a].Y == 3)	{j=a; }
    20aa:	8c 91       	ld	r24, X
    20ac:	83 30       	cpi	r24, 0x03	; 3
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <MOVE_TO_NEAREST_BLOCK+0x226>
    20b0:	f3 2e       	mov	r15, r19
		if(block[a].X == 2 && block[a].Y == 4)	{j=a; }
    20b2:	8c 91       	ld	r24, X
    20b4:	84 30       	cpi	r24, 0x04	; 4
    20b6:	09 f4       	brne	.+2      	; 0x20ba <MOVE_TO_NEAREST_BLOCK+0x22e>
    20b8:	f3 2e       	mov	r15, r19
		if(block[a].X == 2 && block[a].Y == 5)	{j=a; }
    20ba:	8c 91       	ld	r24, X
    20bc:	85 30       	cpi	r24, 0x05	; 5
    20be:	09 f0       	breq	.+2      	; 0x20c2 <MOVE_TO_NEAREST_BLOCK+0x236>
    20c0:	41 cf       	rjmp	.-382    	; 0x1f44 <MOVE_TO_NEAREST_BLOCK+0xb8>
    20c2:	3f cf       	rjmp	.-386    	; 0x1f42 <MOVE_TO_NEAREST_BLOCK+0xb6>
		X++;
	else if(dir=='W')
		X--;
	else if(dir=='S')
		Y++;
}
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	ff 90       	pop	r15
    20ce:	08 95       	ret

000020d0 <MOVE_TO_APPROPRIATE_DESTINATION>:

void MOVE_TO_APPROPRIATE_DESTINATION()
{
    20d0:	0f 93       	push	r16
	//LCD_SET_CURSER(1,1);
	//LCD_PRINT("   Arranging   ");
	DIGKSTRA(X,Y,destination[dest_coun].X,destination[dest_coun].Y,TRUE);
    20d2:	20 91 03 01 	lds	r18, 0x0103
    20d6:	82 2f       	mov	r24, r18
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	dc 01       	movw	r26, r24
    20e0:	aa 0f       	add	r26, r26
    20e2:	bb 1f       	adc	r27, r27
    20e4:	aa 0f       	add	r26, r26
    20e6:	bb 1f       	adc	r27, r27
    20e8:	8a 0f       	add	r24, r26
    20ea:	9b 1f       	adc	r25, r27
    20ec:	dc 01       	movw	r26, r24
    20ee:	aa 56       	subi	r26, 0x6A	; 106
    20f0:	bd 4f       	sbci	r27, 0xFD	; 253
    20f2:	82 2f       	mov	r24, r18
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	fc 01       	movw	r30, r24
    20fc:	ee 0f       	add	r30, r30
    20fe:	ff 1f       	adc	r31, r31
    2100:	ee 0f       	add	r30, r30
    2102:	ff 1f       	adc	r31, r31
    2104:	8e 0f       	add	r24, r30
    2106:	9f 1f       	adc	r25, r31
    2108:	fc 01       	movw	r30, r24
    210a:	ea 56       	subi	r30, 0x6A	; 106
    210c:	fd 4f       	sbci	r31, 0xFD	; 253
    210e:	01 e0       	ldi	r16, 0x01	; 1
    2110:	13 96       	adiw	r26, 0x03	; 3
    2112:	2c 91       	ld	r18, X
    2114:	42 81       	ldd	r20, Z+2	; 0x02
    2116:	60 91 04 01 	lds	r22, 0x0104
    211a:	80 91 05 01 	lds	r24, 0x0105
    211e:	0e 94 72 07 	call	0xee4	; 0xee4 <DIGKSTRA>
	details2[destination[dest_coun].X][destination[dest_coun].Y].status = DESTINATION;
    2122:	80 91 03 01 	lds	r24, 0x0103
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	22 0f       	add	r18, r18
    212c:	33 1f       	adc	r19, r19
    212e:	f9 01       	movw	r30, r18
    2130:	ee 0f       	add	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	2e 0f       	add	r18, r30
    213a:	3f 1f       	adc	r19, r31
    213c:	f9 01       	movw	r30, r18
    213e:	ea 56       	subi	r30, 0x6A	; 106
    2140:	fd 4f       	sbci	r31, 0xFD	; 253
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	22 0f       	add	r18, r18
    2148:	33 1f       	adc	r19, r19
    214a:	d9 01       	movw	r26, r18
    214c:	aa 0f       	add	r26, r26
    214e:	bb 1f       	adc	r27, r27
    2150:	aa 0f       	add	r26, r26
    2152:	bb 1f       	adc	r27, r27
    2154:	2a 0f       	add	r18, r26
    2156:	3b 1f       	adc	r19, r27
    2158:	d9 01       	movw	r26, r18
    215a:	aa 56       	subi	r26, 0x6A	; 106
    215c:	bd 4f       	sbci	r27, 0xFD	; 253
    215e:	12 96       	adiw	r26, 0x02	; 2
    2160:	9c 91       	ld	r25, X
    2162:	23 81       	ldd	r18, Z+3	; 0x03
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	22 0f       	add	r18, r18
    2168:	33 1f       	adc	r19, r19
    216a:	f9 01       	movw	r30, r18
    216c:	ee 0f       	add	r30, r30
    216e:	ff 1f       	adc	r31, r31
    2170:	ee 0f       	add	r30, r30
    2172:	ff 1f       	adc	r31, r31
    2174:	2e 0f       	add	r18, r30
    2176:	3f 1f       	adc	r19, r31
    2178:	f9 01       	movw	r30, r18
    217a:	46 e4       	ldi	r20, 0x46	; 70
    217c:	94 9f       	mul	r25, r20
    217e:	e0 0d       	add	r30, r0
    2180:	f1 1d       	adc	r31, r1
    2182:	11 24       	eor	r1, r1
    2184:	e8 5c       	subi	r30, 0xC8	; 200
    2186:	fe 4f       	sbci	r31, 0xFE	; 254
    2188:	93 e0       	ldi	r25, 0x03	; 3
    218a:	90 83       	st	Z, r25
	REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY(dest_coun,DESTINATION);
    218c:	63 e0       	ldi	r22, 0x03	; 3
    218e:	0e 94 42 03 	call	0x684	; 0x684 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY>
	MOTOR_PORT = 0x00;
    2192:	12 ba       	out	0x12, r1	; 18
	BOT_MOVE(BACKWARD);
    2194:	83 e0       	ldi	r24, 0x03	; 3
    2196:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
    219a:	8f ef       	ldi	r24, 0xFF	; 255
    219c:	98 ef       	ldi	r25, 0xF8	; 248
    219e:	25 e1       	ldi	r18, 0x15	; 21
    21a0:	81 50       	subi	r24, 0x01	; 1
    21a2:	90 40       	sbci	r25, 0x00	; 0
    21a4:	20 40       	sbci	r18, 0x00	; 0
    21a6:	e1 f7       	brne	.-8      	; 0x21a0 <MOVE_TO_APPROPRIATE_DESTINATION+0xd0>
    21a8:	00 c0       	rjmp	.+0      	; 0x21aa <MOVE_TO_APPROPRIATE_DESTINATION+0xda>
    21aa:	00 00       	nop
	_delay_ms(450);
	LCD_CLEAR();
    21ac:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
	LCD_PRINT("   Placing @");
    21b0:	83 ee       	ldi	r24, 0xE3	; 227
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
	LCD_SET_CURSER(2,1);
    21b8:	61 e0       	ldi	r22, 0x01	; 1
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
	LCD_PRINT("     (");
    21c0:	80 ef       	ldi	r24, 0xF0	; 240
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
	LCD_DATA(X+0x30);
    21c8:	80 91 05 01 	lds	r24, 0x0105
    21cc:	80 5d       	subi	r24, 0xD0	; 208
    21ce:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(',');
    21d2:	8c e2       	ldi	r24, 0x2C	; 44
    21d4:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(Y+0x30);
    21d8:	80 91 04 01 	lds	r24, 0x0104
    21dc:	80 5d       	subi	r24, 0xD0	; 208
    21de:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(')');
    21e2:	89 e2       	ldi	r24, 0x29	; 41
    21e4:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	BLOCK_LIFT(BACKWARD);
    21e8:	83 e0       	ldi	r24, 0x03	; 3
    21ea:	0e 94 9c 01 	call	0x338	; 0x338 <BLOCK_LIFT>
    21ee:	4f ef       	ldi	r20, 0xFF	; 255
    21f0:	87 e8       	ldi	r24, 0x87	; 135
    21f2:	93 e1       	ldi	r25, 0x13	; 19
    21f4:	41 50       	subi	r20, 0x01	; 1
    21f6:	80 40       	sbci	r24, 0x00	; 0
    21f8:	90 40       	sbci	r25, 0x00	; 0
    21fa:	e1 f7       	brne	.-8      	; 0x21f4 <MOVE_TO_APPROPRIATE_DESTINATION+0x124>
    21fc:	00 c0       	rjmp	.+0      	; 0x21fe <MOVE_TO_APPROPRIATE_DESTINATION+0x12e>
    21fe:	00 00       	nop
	_delay_ms(400);
	BLOCK_HOLD(BACKWARD);
    2200:	83 e0       	ldi	r24, 0x03	; 3
    2202:	0e 94 a6 01 	call	0x34c	; 0x34c <BLOCK_HOLD>
    2206:	2f ef       	ldi	r18, 0xFF	; 255
    2208:	47 ea       	ldi	r20, 0xA7	; 167
    220a:	81 e6       	ldi	r24, 0x61	; 97
    220c:	21 50       	subi	r18, 0x01	; 1
    220e:	40 40       	sbci	r20, 0x00	; 0
    2210:	80 40       	sbci	r24, 0x00	; 0
    2212:	e1 f7       	brne	.-8      	; 0x220c <MOVE_TO_APPROPRIATE_DESTINATION+0x13c>
    2214:	00 c0       	rjmp	.+0      	; 0x2216 <MOVE_TO_APPROPRIATE_DESTINATION+0x146>
    2216:	00 00       	nop
	_delay_ms(2000);
	MOTOR_PORT = 0x00;
    2218:	12 ba       	out	0x12, r1	; 18
	block_caught = FALSE;
    221a:	10 92 fd 00 	sts	0x00FD, r1
	MOVE_BACK_IF_BLOCK();
    221e:	0e 94 84 04 	call	0x908	; 0x908 <MOVE_BACK_IF_BLOCK>
}
    2222:	0f 91       	pop	r16
    2224:	08 95       	ret

00002226 <_exit>:
    2226:	f8 94       	cli

00002228 <__stop_program>:
    2228:	ff cf       	rjmp	.-2      	; 0x2228 <__stop_program>
