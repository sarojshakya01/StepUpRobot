
Step Up Round 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00001f84  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002de  008000d6  008000d6  0000208e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002090  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000027f3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  00002822  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ec1  00000000  00000000  00002952  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000038f  00000000  00000000  00004813  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a00  00000000  00000000  00004ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000034c  00000000  00000000  000055a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000463  00000000  00000000  000058f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001684  00000000  00000000  00005d53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000120  00000000  00000000  000073d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3d       	cpi	r26, 0xD6	; 214
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a6 ed       	ldi	r26, 0xD6	; 214
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 03 	call	0x7bc	; 0x7bc <main>
      8a:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_CMND>:
void DETECT_NEXT_NODE();
int main();

void LCD_CMND(unsigned char cmnd) 
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd & 0xF0);
      92:	9b b3       	in	r25, 0x1b	; 27
      94:	28 2f       	mov	r18, r24
      96:	20 7f       	andi	r18, 0xF0	; 240
      98:	9f 70       	andi	r25, 0x0F	; 15
      9a:	92 2b       	or	r25, r18
      9c:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT &= ~(1<<LCD_RS); 
      9e:	da 98       	cbi	0x1b, 2	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; 
      a0:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      a2:	ef e8       	ldi	r30, 0x8F	; 143
      a4:	f1 e0       	ldi	r31, 0x01	; 1
      a6:	31 97       	sbiw	r30, 0x01	; 1
      a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_CMND+0x14>
      aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_CMND+0x1a>
      ac:	00 00       	nop
	_delay_us(100);
	LCD_DATA_PORT &= ~(1<<LCD_EN); 
      ae:	db 98       	cbi	0x1b, 3	; 27
      b0:	ef ea       	ldi	r30, 0xAF	; 175
      b2:	f4 e0       	ldi	r31, 0x04	; 4
      b4:	31 97       	sbiw	r30, 0x01	; 1
      b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_CMND+0x22>
      b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_CMND+0x28>
      ba:	00 00       	nop
	_delay_us(300);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd << 4); 
      bc:	2b b3       	in	r18, 0x1b	; 27
      be:	f0 e1       	ldi	r31, 0x10	; 16
      c0:	8f 9f       	mul	r24, r31
      c2:	c0 01       	movw	r24, r0
      c4:	11 24       	eor	r1, r1
      c6:	92 2f       	mov	r25, r18
      c8:	9f 70       	andi	r25, 0x0F	; 15
      ca:	89 2b       	or	r24, r25
      cc:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; 
      ce:	db 9a       	sbi	0x1b, 3	; 27
      d0:	8f ea       	ldi	r24, 0xAF	; 175
      d2:	94 e0       	ldi	r25, 0x04	; 4
      d4:	01 97       	sbiw	r24, 0x01	; 1
      d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_CMND+0x42>
      d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_CMND+0x48>
      da:	00 00       	nop
	_delay_us(300);
	LCD_DATA_PORT &= ~(1<<LCD_EN); 
      dc:	db 98       	cbi	0x1b, 3	; 27
      de:	08 95       	ret

000000e0 <LCD_DATA>:
}
void LCD_DATA(unsigned char data) 
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
      e0:	9b b3       	in	r25, 0x1b	; 27
      e2:	28 2f       	mov	r18, r24
      e4:	20 7f       	andi	r18, 0xF0	; 240
      e6:	9f 70       	andi	r25, 0x0F	; 15
      e8:	92 2b       	or	r25, r18
      ea:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT |= 1<<LCD_RS; 
      ec:	da 9a       	sbi	0x1b, 2	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; 
      ee:	db 9a       	sbi	0x1b, 3	; 27
      f0:	ef e1       	ldi	r30, 0x1F	; 31
      f2:	f3 e0       	ldi	r31, 0x03	; 3
      f4:	31 97       	sbiw	r30, 0x01	; 1
      f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_DATA+0x14>
      f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_DATA+0x1a>
      fa:	00 00       	nop
	_delay_us(200);
	LCD_DATA_PORT &= ~(1<<LCD_EN); 
      fc:	db 98       	cbi	0x1b, 3	; 27
      fe:	ef e1       	ldi	r30, 0x1F	; 31
     100:	f3 e0       	ldi	r31, 0x03	; 3
     102:	31 97       	sbiw	r30, 0x01	; 1
     104:	f1 f7       	brne	.-4      	; 0x102 <LCD_DATA+0x22>
     106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_DATA+0x28>
     108:	00 00       	nop
	_delay_us(200);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data << 4);
     10a:	2b b3       	in	r18, 0x1b	; 27
     10c:	f0 e1       	ldi	r31, 0x10	; 16
     10e:	8f 9f       	mul	r24, r31
     110:	c0 01       	movw	r24, r0
     112:	11 24       	eor	r1, r1
     114:	92 2f       	mov	r25, r18
     116:	9f 70       	andi	r25, 0x0F	; 15
     118:	89 2b       	or	r24, r25
     11a:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; 
     11c:	db 9a       	sbi	0x1b, 3	; 27
     11e:	8f e1       	ldi	r24, 0x1F	; 31
     120:	93 e0       	ldi	r25, 0x03	; 3
     122:	01 97       	sbiw	r24, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <LCD_DATA+0x42>
     126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_DATA+0x48>
     128:	00 00       	nop
	_delay_us(200);
	LCD_DATA_PORT &= ~(1<<LCD_EN); 
     12a:	db 98       	cbi	0x1b, 3	; 27
     12c:	08 95       	ret

0000012e <LCD_INITIALIZE>:
}
void LCD_INITIALIZE(void)
{
	LCD_DATA_DDR = 0xFC;
     12e:	8c ef       	ldi	r24, 0xFC	; 252
     130:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PORT &= ~(1<<LCD_EN);
     132:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     134:	2f ef       	ldi	r18, 0xFF	; 255
     136:	83 ec       	ldi	r24, 0xC3	; 195
     138:	99 e0       	ldi	r25, 0x09	; 9
     13a:	21 50       	subi	r18, 0x01	; 1
     13c:	80 40       	sbci	r24, 0x00	; 0
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	e1 f7       	brne	.-8      	; 0x13a <LCD_INITIALIZE+0xc>
     142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_INITIALIZE+0x16>
     144:	00 00       	nop
	_delay_ms(200);
	LCD_CMND(0x33);
     146:	83 e3       	ldi	r24, 0x33	; 51
     148:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     14c:	2f ef       	ldi	r18, 0xFF	; 255
     14e:	89 ef       	ldi	r24, 0xF9	; 249
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	21 50       	subi	r18, 0x01	; 1
     154:	80 40       	sbci	r24, 0x00	; 0
     156:	90 40       	sbci	r25, 0x00	; 0
     158:	e1 f7       	brne	.-8      	; 0x152 <LCD_INITIALIZE+0x24>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_INITIALIZE+0x2e>
     15c:	00 00       	nop
	_delay_ms(20);
	LCD_CMND(0x32);
     15e:	82 e3       	ldi	r24, 0x32	; 50
     160:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     164:	2f ef       	ldi	r18, 0xFF	; 255
     166:	89 ef       	ldi	r24, 0xF9	; 249
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	21 50       	subi	r18, 0x01	; 1
     16c:	80 40       	sbci	r24, 0x00	; 0
     16e:	90 40       	sbci	r25, 0x00	; 0
     170:	e1 f7       	brne	.-8      	; 0x16a <LCD_INITIALIZE+0x3c>
     172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_INITIALIZE+0x46>
     174:	00 00       	nop
	_delay_ms(20);
	LCD_CMND(0x28);
     176:	88 e2       	ldi	r24, 0x28	; 40
     178:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     17c:	2f ef       	ldi	r18, 0xFF	; 255
     17e:	89 ef       	ldi	r24, 0xF9	; 249
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	21 50       	subi	r18, 0x01	; 1
     184:	80 40       	sbci	r24, 0x00	; 0
     186:	90 40       	sbci	r25, 0x00	; 0
     188:	e1 f7       	brne	.-8      	; 0x182 <LCD_INITIALIZE+0x54>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_INITIALIZE+0x5e>
     18c:	00 00       	nop
	_delay_ms(20);
	LCD_CMND(0x0C);
     18e:	8c e0       	ldi	r24, 0x0C	; 12
     190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     194:	2f ef       	ldi	r18, 0xFF	; 255
     196:	89 ef       	ldi	r24, 0xF9	; 249
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	21 50       	subi	r18, 0x01	; 1
     19c:	80 40       	sbci	r24, 0x00	; 0
     19e:	90 40       	sbci	r25, 0x00	; 0
     1a0:	e1 f7       	brne	.-8      	; 0x19a <LCD_INITIALIZE+0x6c>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_INITIALIZE+0x76>
     1a4:	00 00       	nop
	_delay_ms(20);
	LCD_CMND(0x01);
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     1ac:	2f ef       	ldi	r18, 0xFF	; 255
     1ae:	89 ef       	ldi	r24, 0xF9	; 249
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	21 50       	subi	r18, 0x01	; 1
     1b4:	80 40       	sbci	r24, 0x00	; 0
     1b6:	90 40       	sbci	r25, 0x00	; 0
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <LCD_INITIALIZE+0x84>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_INITIALIZE+0x8e>
     1bc:	00 00       	nop
     1be:	08 95       	ret

000001c0 <LCD_CLEAR>:
	_delay_ms(20);
}
void LCD_CLEAR(void)
{
	LCD_CMND(0x01);
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     1c6:	8f e3       	ldi	r24, 0x3F	; 63
     1c8:	9f e1       	ldi	r25, 0x1F	; 31
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_CLEAR+0xa>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_CLEAR+0x10>
     1d0:	00 00       	nop
     1d2:	08 95       	ret

000001d4 <LCD_PRINT>:
	_delay_ms(2);
}
void LCD_PRINT(char * str)
{
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ec 01       	movw	r28, r24
	unsigned char i=0;
	while(str[i] != 0)
     1dc:	88 81       	ld	r24, Y
     1de:	88 23       	and	r24, r24
     1e0:	71 f0       	breq	.+28     	; 0x1fe <LCD_PRINT+0x2a>
	LCD_CMND(0x01);
	_delay_ms(2);
}
void LCD_PRINT(char * str)
{
	unsigned char i=0;
     1e2:	10 e0       	ldi	r17, 0x00	; 0
	while(str[i] != 0)
	{
		LCD_DATA(str[i]);
     1e4:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		i++;
     1e8:	1f 5f       	subi	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ea:	85 e3       	ldi	r24, 0x35	; 53
     1ec:	8a 95       	dec	r24
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_PRINT+0x18>
     1f0:	00 00       	nop
	_delay_ms(2);
}
void LCD_PRINT(char * str)
{
	unsigned char i=0;
	while(str[i] != 0)
     1f2:	fe 01       	movw	r30, r28
     1f4:	e1 0f       	add	r30, r17
     1f6:	f1 1d       	adc	r31, r1
     1f8:	80 81       	ld	r24, Z
     1fa:	81 11       	cpse	r24, r1
     1fc:	f3 cf       	rjmp	.-26     	; 0x1e4 <LCD_PRINT+0x10>
	{
		LCD_DATA(str[i]);
		i++;
		_delay_us(10);
	}
}
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	08 95       	ret

00000206 <LCD_SET_CURSER>:
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{ 
	if(y==1)
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	29 f4       	brne	.+10     	; 0x214 <LCD_SET_CURSER+0xe>
	LCD_CMND(0x7F+x);
     20a:	86 2f       	mov	r24, r22
     20c:	81 58       	subi	r24, 0x81	; 129
     20e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     212:	08 95       	ret
	else if(y==2)
     214:	82 30       	cpi	r24, 0x02	; 2
     216:	21 f4       	brne	.+8      	; 0x220 <LCD_SET_CURSER+0x1a>
	LCD_CMND(0xBF+x);
     218:	86 2f       	mov	r24, r22
     21a:	81 54       	subi	r24, 0x41	; 65
     21c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CMND>
     220:	08 95       	ret

00000222 <LCD_NUM>:
}
void LCD_NUM(unsigned char num)
{
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	c8 2f       	mov	r28, r24
	LCD_DATA(num/10 + 0x30);
     228:	dd ec       	ldi	r29, 0xCD	; 205
     22a:	8d 9f       	mul	r24, r29
     22c:	d1 2d       	mov	r29, r1
     22e:	11 24       	eor	r1, r1
     230:	d6 95       	lsr	r29
     232:	d6 95       	lsr	r29
     234:	d6 95       	lsr	r29
     236:	8d 2f       	mov	r24, r29
     238:	80 5d       	subi	r24, 0xD0	; 208
     23a:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(num%10 + 0x30);
     23e:	dd 0f       	add	r29, r29
     240:	8d 2f       	mov	r24, r29
     242:	88 0f       	add	r24, r24
     244:	88 0f       	add	r24, r24
     246:	d8 0f       	add	r29, r24
     248:	8c 2f       	mov	r24, r28
     24a:	8d 1b       	sub	r24, r29
     24c:	80 5d       	subi	r24, 0xD0	; 208
     24e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	08 95       	ret

00000258 <PORT_INITIALIZE>:

void PORT_INITIALIZE()
{
	SENSOR_DDR = 0x00;
     258:	14 ba       	out	0x14, r1	; 20
	SENSOR_PORT = 0xFF;
     25a:	8f ef       	ldi	r24, 0xFF	; 255
     25c:	85 bb       	out	0x15, r24	; 21
	MOTOR_DDR = 0xFF;
     25e:	81 bb       	out	0x11, r24	; 17
	MOTOR_PORT = 0x00;
     260:	12 ba       	out	0x12, r1	; 18
     262:	08 95       	ret

00000264 <SET_INITIAL_INFO>:
}

void SET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
	SENSOR_PORT = 0xFF;
	MOTOR_DDR = 0xFF;
	MOTOR_PORT = 0x00;
}

void SET_INITIAL_INFO()
     268:	46 e4       	ldi	r20, 0x46	; 70
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	12 c0       	rjmp	.+36     	; 0x292 <SET_INITIAL_INFO+0x2e>
     26e:	df 01       	movw	r26, r30
     270:	11 97       	sbiw	r26, 0x01	; 1
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details1[i][j].X=i;
     272:	8c 93       	st	X, r24
			details1[i][j].Y=j;
     274:	20 83       	st	Z, r18
	SENSOR_PORT = 0xFF;
	MOTOR_DDR = 0xFF;
	MOTOR_PORT = 0x00;
}

void SET_INITIAL_INFO()
     276:	df 01       	movw	r26, r30
     278:	13 97       	sbiw	r26, 0x03	; 3
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details1[i][j].X=i;
			details1[i][j].Y=j;
			details1[i][j].status = UNVISITED;
     27a:	1c 92       	st	X, r1
	SENSOR_PORT = 0xFF;
	MOTOR_DDR = 0xFF;
	MOTOR_PORT = 0x00;
}

void SET_INITIAL_INFO()
     27c:	df 01       	movw	r26, r30
     27e:	12 97       	sbiw	r26, 0x02	; 2
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details1[i][j].X=i;
			details1[i][j].Y=j;
			details1[i][j].status = UNVISITED;
			details1[i][j].priority = 0;
     280:	1c 92       	st	X, r1
     282:	2f 5f       	subi	r18, 0xFF	; 255
     284:	3a 96       	adiw	r30, 0x0a	; 10
void SET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
     286:	27 30       	cpi	r18, 0x07	; 7
     288:	91 f7       	brne	.-28     	; 0x26e <SET_INITIAL_INFO+0xa>
}

void SET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	83 30       	cpi	r24, 0x03	; 3
     28e:	91 05       	cpc	r25, r1
     290:	49 f0       	breq	.+18     	; 0x2a4 <SET_INITIAL_INFO+0x40>
	SENSOR_PORT = 0xFF;
	MOTOR_DDR = 0xFF;
	MOTOR_PORT = 0x00;
}

void SET_INITIAL_INFO()
     292:	48 9f       	mul	r20, r24
     294:	f0 01       	movw	r30, r0
     296:	49 9f       	mul	r20, r25
     298:	f0 0d       	add	r31, r0
     29a:	11 24       	eor	r1, r1
     29c:	eb 51       	subi	r30, 0x1B	; 27
     29e:	fd 4f       	sbci	r31, 0xFD	; 253
     2a0:	23 2f       	mov	r18, r19
     2a2:	e5 cf       	rjmp	.-54     	; 0x26e <SET_INITIAL_INFO+0xa>
     2a4:	08 95       	ret

000002a6 <DEFINE_DESTINATION>:
}

void DEFINE_DESTINATION()
{
	unsigned i;
	for (i=0;i<destinationCounter;i++)
     2a6:	20 91 60 00 	lds	r18, 0x0060
     2aa:	22 23       	and	r18, r18
     2ac:	89 f0       	breq	.+34     	; 0x2d0 <DEFINE_DESTINATION+0x2a>
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	eb ee       	ldi	r30, 0xEB	; 235
     2b2:	f1 e0       	ldi	r31, 0x01	; 1
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
	{
		destination[i].X = 1;
     2b8:	51 e0       	ldi	r21, 0x01	; 1
			details1[i][j].priority = 0;
		}
	}
}

void DEFINE_DESTINATION()
     2ba:	df 01       	movw	r26, r30
     2bc:	11 97       	sbiw	r26, 0x01	; 1
{
	unsigned i;
	for (i=0;i<destinationCounter;i++)
	{
		destination[i].X = 1;
     2be:	5c 93       	st	X, r21
			details1[i][j].priority = 0;
		}
	}
}

void DEFINE_DESTINATION()
     2c0:	48 2f       	mov	r20, r24
     2c2:	4f 5f       	subi	r20, 0xFF	; 255
{
	unsigned i;
	for (i=0;i<destinationCounter;i++)
	{
		destination[i].X = 1;
		destination[i].Y = i+1;
     2c4:	40 83       	st	Z, r20
}

void DEFINE_DESTINATION()
{
	unsigned i;
	for (i=0;i<destinationCounter;i++)
     2c6:	01 96       	adiw	r24, 0x01	; 1
     2c8:	3a 96       	adiw	r30, 0x0a	; 10
     2ca:	82 17       	cp	r24, r18
     2cc:	93 07       	cpc	r25, r19
     2ce:	a8 f3       	brcs	.-22     	; 0x2ba <DEFINE_DESTINATION+0x14>
     2d0:	08 95       	ret

000002d2 <SOUND_BUZZER>:
	}
}

void SOUND_BUZZER()
{
	DDRB = 0x03;
     2d2:	83 e0       	ldi	r24, 0x03	; 3
     2d4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x01;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2da:	2f ef       	ldi	r18, 0xFF	; 255
     2dc:	87 e8       	ldi	r24, 0x87	; 135
     2de:	93 e1       	ldi	r25, 0x13	; 19
     2e0:	21 50       	subi	r18, 0x01	; 1
     2e2:	80 40       	sbci	r24, 0x00	; 0
     2e4:	90 40       	sbci	r25, 0x00	; 0
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <SOUND_BUZZER+0xe>
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <SOUND_BUZZER+0x18>
     2ea:	00 00       	nop
	_delay_ms(400);
	PORTB = 0x00;
     2ec:	18 ba       	out	0x18, r1	; 24
     2ee:	08 95       	ret

000002f0 <BOT_MOVE>:
}

void BOT_MOVE(unsigned char direction)
{
	MOTOR_PORT &= 0b00000000;
     2f0:	92 b3       	in	r25, 0x12	; 18
     2f2:	12 ba       	out	0x12, r1	; 18
	switch(direction)
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	81 f0       	breq	.+32     	; 0x318 <BOT_MOVE+0x28>
     2f8:	28 f4       	brcc	.+10     	; 0x304 <BOT_MOVE+0x14>
     2fa:	88 23       	and	r24, r24
     2fc:	49 f0       	breq	.+18     	; 0x310 <BOT_MOVE+0x20>
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	d1 f4       	brne	.+52     	; 0x336 <BOT_MOVE+0x46>
     302:	08 c0       	rjmp	.+16     	; 0x314 <BOT_MOVE+0x24>
     304:	84 30       	cpi	r24, 0x04	; 4
     306:	81 f0       	breq	.+32     	; 0x328 <BOT_MOVE+0x38>
     308:	58 f0       	brcs	.+22     	; 0x320 <BOT_MOVE+0x30>
     30a:	85 30       	cpi	r24, 0x05	; 5
     30c:	a1 f4       	brne	.+40     	; 0x336 <BOT_MOVE+0x46>
     30e:	10 c0       	rjmp	.+32     	; 0x330 <BOT_MOVE+0x40>
	{
		case LEFT:
			MOTOR_PORT |= 0b10000000;
     310:	97 9a       	sbi	0x12, 7	; 18
			break;
     312:	08 95       	ret
		case RIGHT:
			MOTOR_PORT |= 0b01000000;
     314:	96 9a       	sbi	0x12, 6	; 18
			break;
     316:	08 95       	ret
		case FORWARD:
			MOTOR_PORT |= 0b11000000;
     318:	82 b3       	in	r24, 0x12	; 18
     31a:	80 6c       	ori	r24, 0xC0	; 192
     31c:	82 bb       	out	0x12, r24	; 18
			break;
     31e:	08 95       	ret
		case BACKWARD:
			MOTOR_PORT |= 0b00110000;
     320:	82 b3       	in	r24, 0x12	; 18
     322:	80 63       	ori	r24, 0x30	; 48
     324:	82 bb       	out	0x12, r24	; 18
			break;
     326:	08 95       	ret
		case LEFT_BACK:
			MOTOR_PORT |= 0b10010000;
     328:	82 b3       	in	r24, 0x12	; 18
     32a:	80 69       	ori	r24, 0x90	; 144
     32c:	82 bb       	out	0x12, r24	; 18
			break;
     32e:	08 95       	ret
		case RIGHT_BACK:
			MOTOR_PORT |= 0b01100000;
     330:	82 b3       	in	r24, 0x12	; 18
     332:	80 66       	ori	r24, 0x60	; 96
     334:	82 bb       	out	0x12, r24	; 18
     336:	08 95       	ret

00000338 <BLOCK_LIFT>:
	}	
}

void BLOCK_LIFT(unsigned char direction)
{
	MOTOR_PORT &= 0b00000000;
     338:	92 b3       	in	r25, 0x12	; 18
     33a:	12 ba       	out	0x12, r1	; 18
	if(direction == FORWARD)
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	11 f4       	brne	.+4      	; 0x344 <BLOCK_LIFT+0xc>
		MOTOR_PORT |= 0b00000001;
     340:	90 9a       	sbi	0x12, 0	; 18
     342:	08 95       	ret
	else if (direction == BACKWARD)
     344:	83 30       	cpi	r24, 0x03	; 3
     346:	09 f4       	brne	.+2      	; 0x34a <BLOCK_LIFT+0x12>
		MOTOR_PORT |= 0b00000010;
     348:	91 9a       	sbi	0x12, 1	; 18
     34a:	08 95       	ret

0000034c <BLOCK_HOLD>:
}

void BLOCK_HOLD(unsigned char direction)
{
		MOTOR_PORT &= 0b00000000;
     34c:	92 b3       	in	r25, 0x12	; 18
     34e:	12 ba       	out	0x12, r1	; 18
		if(direction == FORWARD)
     350:	82 30       	cpi	r24, 0x02	; 2
     352:	11 f4       	brne	.+4      	; 0x358 <BLOCK_HOLD+0xc>
			MOTOR_PORT |= 0b00000100;
     354:	92 9a       	sbi	0x12, 2	; 18
     356:	08 95       	ret
		else if (direction == BACKWARD)
     358:	83 30       	cpi	r24, 0x03	; 3
     35a:	09 f4       	brne	.+2      	; 0x35e <BLOCK_HOLD+0x12>
			MOTOR_PORT |= 0b00001000;
     35c:	93 9a       	sbi	0x12, 3	; 18
     35e:	08 95       	ret

00000360 <STOP_N_UPDATE_XY>:
	}
}

void STOP_N_UPDATE_XY()
{
	MOTOR_PORT = 0x00;
     360:	12 ba       	out	0x12, r1	; 18
	if (dir == 'N')	Y++;
     362:	80 91 62 00 	lds	r24, 0x0062
     366:	8e 34       	cpi	r24, 0x4E	; 78
     368:	31 f4       	brne	.+12     	; 0x376 <STOP_N_UPDATE_XY+0x16>
     36a:	80 91 e2 00 	lds	r24, 0x00E2
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	80 93 e2 00 	sts	0x00E2, r24
     374:	17 c0       	rjmp	.+46     	; 0x3a4 <STOP_N_UPDATE_XY+0x44>
	else if (dir == 'E')	X--;
     376:	85 34       	cpi	r24, 0x45	; 69
     378:	31 f4       	brne	.+12     	; 0x386 <STOP_N_UPDATE_XY+0x26>
     37a:	80 91 e3 00 	lds	r24, 0x00E3
     37e:	81 50       	subi	r24, 0x01	; 1
     380:	80 93 e3 00 	sts	0x00E3, r24
     384:	0f c0       	rjmp	.+30     	; 0x3a4 <STOP_N_UPDATE_XY+0x44>
	else if (dir == 'W')	X++;
     386:	87 35       	cpi	r24, 0x57	; 87
     388:	31 f4       	brne	.+12     	; 0x396 <STOP_N_UPDATE_XY+0x36>
     38a:	80 91 e3 00 	lds	r24, 0x00E3
     38e:	8f 5f       	subi	r24, 0xFF	; 255
     390:	80 93 e3 00 	sts	0x00E3, r24
     394:	07 c0       	rjmp	.+14     	; 0x3a4 <STOP_N_UPDATE_XY+0x44>
	else if (dir == 'S')	Y--	;
     396:	83 35       	cpi	r24, 0x53	; 83
     398:	29 f4       	brne	.+10     	; 0x3a4 <STOP_N_UPDATE_XY+0x44>
     39a:	80 91 e2 00 	lds	r24, 0x00E2
     39e:	81 50       	subi	r24, 0x01	; 1
     3a0:	80 93 e2 00 	sts	0x00E2, r24
	count++;
     3a4:	80 91 df 00 	lds	r24, 0x00DF
     3a8:	8f 5f       	subi	r24, 0xFF	; 255
     3aa:	80 93 df 00 	sts	0x00DF, r24
	SOUND_BUZZER();
     3ae:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SOUND_BUZZER>
     3b2:	08 95       	ret

000003b4 <FOLLOW_LINE_BACKWARD>:
	}
}

void FOLLOW_LINE_BACKWARD()
{
	if (((SENSOR_PIN & GRID_SENSOR_MASK) == 0x00 && prev_count==FALSE))
     3b4:	83 b3       	in	r24, 0x13	; 19
     3b6:	87 70       	andi	r24, 0x07	; 7
     3b8:	69 f4       	brne	.+26     	; 0x3d4 <FOLLOW_LINE_BACKWARD+0x20>
     3ba:	80 91 dd 00 	lds	r24, 0x00DD
     3be:	81 11       	cpse	r24, r1
     3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <FOLLOW_LINE_BACKWARD+0x20>
	{
		prev_count= TRUE;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 dd 00 	sts	0x00DD, r24
		count++;
     3c8:	80 91 df 00 	lds	r24, 0x00DF
     3cc:	8f 5f       	subi	r24, 0xFF	; 255
     3ce:	80 93 df 00 	sts	0x00DF, r24
     3d2:	08 95       	ret
	}
	else if (((SENSOR_PIN & GRID_SENSOR_MASK) == 0x00 && prev_count==TRUE))
     3d4:	83 b3       	in	r24, 0x13	; 19
     3d6:	87 70       	andi	r24, 0x07	; 7
     3d8:	41 f4       	brne	.+16     	; 0x3ea <FOLLOW_LINE_BACKWARD+0x36>
     3da:	80 91 dd 00 	lds	r24, 0x00DD
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	21 f4       	brne	.+8      	; 0x3ea <FOLLOW_LINE_BACKWARD+0x36>
	{
		BOT_MOVE(BACKWARD);
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     3e8:	08 95       	ret
	}
	else
	{
		BOT_MOVE(BACKWARD);
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     3f0:	08 95       	ret

000003f2 <TURN_90>:
	}
}

void TURN_90(unsigned char direction)
{
	MOTOR_PORT = 0x00;
     3f2:	12 ba       	out	0x12, r1	; 18
     3f4:	2f ef       	ldi	r18, 0xFF	; 255
     3f6:	31 ee       	ldi	r19, 0xE1	; 225
     3f8:	94 e0       	ldi	r25, 0x04	; 4
     3fa:	21 50       	subi	r18, 0x01	; 1
     3fc:	30 40       	sbci	r19, 0x00	; 0
     3fe:	90 40       	sbci	r25, 0x00	; 0
     400:	e1 f7       	brne	.-8      	; 0x3fa <TURN_90+0x8>
     402:	00 c0       	rjmp	.+0      	; 0x404 <TURN_90+0x12>
     404:	00 00       	nop
	_delay_ms(100);
	if(direction == LEFT)
     406:	81 11       	cpse	r24, r1
     408:	48 c0       	rjmp	.+144    	; 0x49a <TURN_90+0xa8>
	{
		BOT_MOVE(FORWARD);
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     410:	2f ef       	ldi	r18, 0xFF	; 255
     412:	32 e5       	ldi	r19, 0x52	; 82
     414:	87 e0       	ldi	r24, 0x07	; 7
     416:	21 50       	subi	r18, 0x01	; 1
     418:	30 40       	sbci	r19, 0x00	; 0
     41a:	80 40       	sbci	r24, 0x00	; 0
     41c:	e1 f7       	brne	.-8      	; 0x416 <TURN_90+0x24>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <TURN_90+0x2e>
     420:	00 00       	nop
		_delay_ms(150);
		BOT_MOVE(LEFT_BACK);
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     428:	9f ef       	ldi	r25, 0xFF	; 255
     42a:	29 e6       	ldi	r18, 0x69	; 105
     42c:	38 e1       	ldi	r19, 0x18	; 24
     42e:	91 50       	subi	r25, 0x01	; 1
     430:	20 40       	sbci	r18, 0x00	; 0
     432:	30 40       	sbci	r19, 0x00	; 0
     434:	e1 f7       	brne	.-8      	; 0x42e <TURN_90+0x3c>
     436:	00 c0       	rjmp	.+0      	; 0x438 <TURN_90+0x46>
     438:	00 00       	nop
		_delay_ms(TURN_90_DELAY);
		if((SENSOR_PIN & GRID_SENSOR_MASK) == 0b00000111) BOT_MOVE(LEFT_BACK);
     43a:	83 b3       	in	r24, 0x13	; 19
     43c:	87 70       	andi	r24, 0x07	; 7
     43e:	87 30       	cpi	r24, 0x07	; 7
     440:	19 f4       	brne	.+6      	; 0x448 <TURN_90+0x56>
     442:	84 e0       	ldi	r24, 0x04	; 4
     444:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     448:	8f e7       	ldi	r24, 0x7F	; 127
     44a:	99 ea       	ldi	r25, 0xA9	; 169
     44c:	23 e0       	ldi	r18, 0x03	; 3
     44e:	81 50       	subi	r24, 0x01	; 1
     450:	90 40       	sbci	r25, 0x00	; 0
     452:	20 40       	sbci	r18, 0x00	; 0
     454:	e1 f7       	brne	.-8      	; 0x44e <TURN_90+0x5c>
     456:	00 c0       	rjmp	.+0      	; 0x458 <TURN_90+0x66>
     458:	00 00       	nop
		_delay_ms(75);
		MOTOR_PORT = 0x00;
     45a:	12 ba       	out	0x12, r1	; 18
		switch(dir)
     45c:	80 91 62 00 	lds	r24, 0x0062
     460:	8e 34       	cpi	r24, 0x4E	; 78
     462:	59 f0       	breq	.+22     	; 0x47a <TURN_90+0x88>
     464:	20 f4       	brcc	.+8      	; 0x46e <TURN_90+0x7c>
     466:	85 34       	cpi	r24, 0x45	; 69
     468:	09 f0       	breq	.+2      	; 0x46c <TURN_90+0x7a>
     46a:	5f c0       	rjmp	.+190    	; 0x52a <TURN_90+0x138>
     46c:	0a c0       	rjmp	.+20     	; 0x482 <TURN_90+0x90>
     46e:	83 35       	cpi	r24, 0x53	; 83
     470:	81 f0       	breq	.+32     	; 0x492 <TURN_90+0xa0>
     472:	87 35       	cpi	r24, 0x57	; 87
     474:	09 f0       	breq	.+2      	; 0x478 <TURN_90+0x86>
     476:	59 c0       	rjmp	.+178    	; 0x52a <TURN_90+0x138>
     478:	08 c0       	rjmp	.+16     	; 0x48a <TURN_90+0x98>
		{
			case 'N':
				dir = 'W';
     47a:	87 e5       	ldi	r24, 0x57	; 87
     47c:	80 93 62 00 	sts	0x0062, r24
				break;
     480:	08 95       	ret
			case 'E':
				dir = 'N';
     482:	8e e4       	ldi	r24, 0x4E	; 78
     484:	80 93 62 00 	sts	0x0062, r24
				break;
     488:	08 95       	ret
			case  'W':
				dir ='S';
     48a:	83 e5       	ldi	r24, 0x53	; 83
     48c:	80 93 62 00 	sts	0x0062, r24
				break;
     490:	08 95       	ret
			case 'S':
				dir = 'E';
     492:	85 e4       	ldi	r24, 0x45	; 69
     494:	80 93 62 00 	sts	0x0062, r24
				break;
     498:	08 95       	ret
		}
	}
	
	else if(direction == RIGHT)
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	09 f0       	breq	.+2      	; 0x4a0 <TURN_90+0xae>
     49e:	45 c0       	rjmp	.+138    	; 0x52a <TURN_90+0x138>
	{
		BOT_MOVE(FORWARD);
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     4a6:	3f ef       	ldi	r19, 0xFF	; 255
     4a8:	82 e5       	ldi	r24, 0x52	; 82
     4aa:	97 e0       	ldi	r25, 0x07	; 7
     4ac:	31 50       	subi	r19, 0x01	; 1
     4ae:	80 40       	sbci	r24, 0x00	; 0
     4b0:	90 40       	sbci	r25, 0x00	; 0
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <TURN_90+0xba>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <TURN_90+0xc4>
     4b6:	00 00       	nop
		_delay_ms(150);
		BOT_MOVE(RIGHT_BACK);
     4b8:	85 e0       	ldi	r24, 0x05	; 5
     4ba:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     4be:	2f ef       	ldi	r18, 0xFF	; 255
     4c0:	39 e6       	ldi	r19, 0x69	; 105
     4c2:	88 e1       	ldi	r24, 0x18	; 24
     4c4:	21 50       	subi	r18, 0x01	; 1
     4c6:	30 40       	sbci	r19, 0x00	; 0
     4c8:	80 40       	sbci	r24, 0x00	; 0
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <TURN_90+0xd2>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <TURN_90+0xdc>
     4ce:	00 00       	nop
		_delay_ms(TURN_90_DELAY);
		if((SENSOR_PIN & GRID_SENSOR_MASK) == 0b00000111) BOT_MOVE(RIGHT_BACK);
     4d0:	83 b3       	in	r24, 0x13	; 19
     4d2:	87 70       	andi	r24, 0x07	; 7
     4d4:	87 30       	cpi	r24, 0x07	; 7
     4d6:	19 f4       	brne	.+6      	; 0x4de <TURN_90+0xec>
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     4de:	9f e7       	ldi	r25, 0x7F	; 127
     4e0:	29 ea       	ldi	r18, 0xA9	; 169
     4e2:	33 e0       	ldi	r19, 0x03	; 3
     4e4:	91 50       	subi	r25, 0x01	; 1
     4e6:	20 40       	sbci	r18, 0x00	; 0
     4e8:	30 40       	sbci	r19, 0x00	; 0
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <TURN_90+0xf2>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <TURN_90+0xfc>
     4ee:	00 00       	nop
		_delay_ms(75);
		MOTOR_PORT = 0x00;		
     4f0:	12 ba       	out	0x12, r1	; 18
		switch(dir)
     4f2:	80 91 62 00 	lds	r24, 0x0062
     4f6:	8e 34       	cpi	r24, 0x4E	; 78
     4f8:	49 f0       	breq	.+18     	; 0x50c <TURN_90+0x11a>
     4fa:	18 f4       	brcc	.+6      	; 0x502 <TURN_90+0x110>
     4fc:	85 34       	cpi	r24, 0x45	; 69
     4fe:	a9 f4       	brne	.+42     	; 0x52a <TURN_90+0x138>
     500:	09 c0       	rjmp	.+18     	; 0x514 <TURN_90+0x122>
     502:	83 35       	cpi	r24, 0x53	; 83
     504:	79 f0       	breq	.+30     	; 0x524 <TURN_90+0x132>
     506:	87 35       	cpi	r24, 0x57	; 87
     508:	81 f4       	brne	.+32     	; 0x52a <TURN_90+0x138>
     50a:	08 c0       	rjmp	.+16     	; 0x51c <TURN_90+0x12a>
		{
			case 'N':
				dir = 'E';
     50c:	85 e4       	ldi	r24, 0x45	; 69
     50e:	80 93 62 00 	sts	0x0062, r24
				break;
     512:	08 95       	ret
			case 'E':
				dir = 'S';
     514:	83 e5       	ldi	r24, 0x53	; 83
     516:	80 93 62 00 	sts	0x0062, r24
				break;
     51a:	08 95       	ret
			case  'W':
				dir ='N';
     51c:	8e e4       	ldi	r24, 0x4E	; 78
     51e:	80 93 62 00 	sts	0x0062, r24
				break;
     522:	08 95       	ret
			case 'S':
				dir = 'W';
     524:	87 e5       	ldi	r24, 0x57	; 87
     526:	80 93 62 00 	sts	0x0062, r24
     52a:	08 95       	ret

0000052c <TURN_180>:
	//loop_count = 0;
}

void TURN_180()
{
	MOTOR_PORT = 0x00;
     52c:	12 ba       	out	0x12, r1	; 18
     52e:	2f ef       	ldi	r18, 0xFF	; 255
     530:	81 ee       	ldi	r24, 0xE1	; 225
     532:	94 e0       	ldi	r25, 0x04	; 4
     534:	21 50       	subi	r18, 0x01	; 1
     536:	80 40       	sbci	r24, 0x00	; 0
     538:	90 40       	sbci	r25, 0x00	; 0
     53a:	e1 f7       	brne	.-8      	; 0x534 <TURN_180+0x8>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <TURN_180+0x12>
     53e:	00 00       	nop
	_delay_ms(100);
	BOT_MOVE(FORWARD);
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     546:	2f ef       	ldi	r18, 0xFF	; 255
     548:	82 e5       	ldi	r24, 0x52	; 82
     54a:	97 e0       	ldi	r25, 0x07	; 7
     54c:	21 50       	subi	r18, 0x01	; 1
     54e:	80 40       	sbci	r24, 0x00	; 0
     550:	90 40       	sbci	r25, 0x00	; 0
     552:	e1 f7       	brne	.-8      	; 0x54c <TURN_180+0x20>
     554:	00 c0       	rjmp	.+0      	; 0x556 <TURN_180+0x2a>
     556:	00 00       	nop
	_delay_ms(150);
	BOT_MOVE(LEFT_BACK);
     558:	84 e0       	ldi	r24, 0x04	; 4
     55a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     55e:	2f ef       	ldi	r18, 0xFF	; 255
     560:	89 ed       	ldi	r24, 0xD9	; 217
     562:	9f e2       	ldi	r25, 0x2F	; 47
     564:	21 50       	subi	r18, 0x01	; 1
     566:	80 40       	sbci	r24, 0x00	; 0
     568:	90 40       	sbci	r25, 0x00	; 0
     56a:	e1 f7       	brne	.-8      	; 0x564 <TURN_180+0x38>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <TURN_180+0x42>
     56e:	00 00       	nop
	_delay_ms(TURN_180_DELAY);
	MOTOR_PORT = 0x00;
     570:	12 ba       	out	0x12, r1	; 18
	if((SENSOR_PIN & GRID_SENSOR_MASK) == 0b00000111) BOT_MOVE(LEFT_BACK);
     572:	83 b3       	in	r24, 0x13	; 19
     574:	87 70       	andi	r24, 0x07	; 7
     576:	87 30       	cpi	r24, 0x07	; 7
     578:	19 f4       	brne	.+6      	; 0x580 <TURN_180+0x54>
     57a:	84 e0       	ldi	r24, 0x04	; 4
     57c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     580:	2f ef       	ldi	r18, 0xFF	; 255
     582:	81 ee       	ldi	r24, 0xE1	; 225
     584:	94 e0       	ldi	r25, 0x04	; 4
     586:	21 50       	subi	r18, 0x01	; 1
     588:	80 40       	sbci	r24, 0x00	; 0
     58a:	90 40       	sbci	r25, 0x00	; 0
     58c:	e1 f7       	brne	.-8      	; 0x586 <TURN_180+0x5a>
     58e:	00 c0       	rjmp	.+0      	; 0x590 <TURN_180+0x64>
     590:	00 00       	nop
	_delay_ms(100);
	MOTOR_PORT = 0x00;
     592:	12 ba       	out	0x12, r1	; 18
	switch(dir)
     594:	80 91 62 00 	lds	r24, 0x0062
     598:	8e 34       	cpi	r24, 0x4E	; 78
     59a:	49 f0       	breq	.+18     	; 0x5ae <TURN_180+0x82>
     59c:	18 f4       	brcc	.+6      	; 0x5a4 <TURN_180+0x78>
     59e:	85 34       	cpi	r24, 0x45	; 69
     5a0:	a9 f4       	brne	.+42     	; 0x5cc <TURN_180+0xa0>
     5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <TURN_180+0x8a>
     5a4:	83 35       	cpi	r24, 0x53	; 83
     5a6:	79 f0       	breq	.+30     	; 0x5c6 <TURN_180+0x9a>
     5a8:	87 35       	cpi	r24, 0x57	; 87
     5aa:	81 f4       	brne	.+32     	; 0x5cc <TURN_180+0xa0>
     5ac:	08 c0       	rjmp	.+16     	; 0x5be <TURN_180+0x92>
	{
		case 'N':
			dir = 'S';
     5ae:	83 e5       	ldi	r24, 0x53	; 83
     5b0:	80 93 62 00 	sts	0x0062, r24
			break;
     5b4:	0b c0       	rjmp	.+22     	; 0x5cc <TURN_180+0xa0>
		case 'E':
			dir = 'W';
     5b6:	87 e5       	ldi	r24, 0x57	; 87
     5b8:	80 93 62 00 	sts	0x0062, r24
			break;
     5bc:	07 c0       	rjmp	.+14     	; 0x5cc <TURN_180+0xa0>
		case  'W':
			dir ='E';
     5be:	85 e4       	ldi	r24, 0x45	; 69
     5c0:	80 93 62 00 	sts	0x0062, r24
			break;
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <TURN_180+0xa0>
		case 'S':
			dir = 'N';
     5c6:	8e e4       	ldi	r24, 0x4E	; 78
     5c8:	80 93 62 00 	sts	0x0062, r24
			break;
	}
	loop_count++;
     5cc:	80 91 d6 00 	lds	r24, 0x00D6
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
     5d2:	80 93 d6 00 	sts	0x00D6, r24
     5d6:	08 95       	ret

000005d8 <ENQUEUE>:
		MOVE_NEXT_NODE(X,Y,nextNode.X,nextNode.Y);
	}
}

void ENQUEUE(STRUCTURE q)
{
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	2a 97       	sbiw	r28, 0x0a	; 10
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	09 83       	std	Y+1, r16	; 0x01
     5f2:	1a 83       	std	Y+2, r17	; 0x02
     5f4:	2b 83       	std	Y+3, r18	; 0x03
     5f6:	3c 83       	std	Y+4, r19	; 0x04
     5f8:	4d 83       	std	Y+5, r20	; 0x05
     5fa:	5e 83       	std	Y+6, r21	; 0x06
     5fc:	6f 83       	std	Y+7, r22	; 0x07
     5fe:	78 87       	std	Y+8, r23	; 0x08
     600:	89 87       	std	Y+9, r24	; 0x09
     602:	9a 87       	std	Y+10, r25	; 0x0a
	QUEUE[Qfront] = q;
     604:	20 91 d9 00 	lds	r18, 0x00D9
     608:	a2 2f       	mov	r26, r18
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	aa 0f       	add	r26, r26
     60e:	bb 1f       	adc	r27, r27
     610:	cd 01       	movw	r24, r26
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	a8 0f       	add	r26, r24
     61c:	b9 1f       	adc	r27, r25
     61e:	a6 5e       	subi	r26, 0xE6	; 230
     620:	bd 4f       	sbci	r27, 0xFD	; 253
     622:	8a e0       	ldi	r24, 0x0A	; 10
     624:	fe 01       	movw	r30, r28
     626:	31 96       	adiw	r30, 0x01	; 1
     628:	01 90       	ld	r0, Z+
     62a:	0d 92       	st	X+, r0
     62c:	8a 95       	dec	r24
     62e:	e1 f7       	brne	.-8      	; 0x628 <ENQUEUE+0x50>
	Qfront++;
     630:	2f 5f       	subi	r18, 0xFF	; 255
     632:	20 93 d9 00 	sts	0x00D9, r18
}
     636:	2a 96       	adiw	r28, 0x0a	; 10
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <DEQUEUE>:

STRUCTURE DEQUEUE()
{
	Qrear++;
     64c:	20 91 d8 00 	lds	r18, 0x00D8
     650:	2f 5f       	subi	r18, 0xFF	; 255
     652:	20 93 d8 00 	sts	0x00D8, r18
	return (QUEUE[Qrear-1]);
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	21 50       	subi	r18, 0x01	; 1
     65a:	31 09       	sbc	r19, r1
     65c:	f9 01       	movw	r30, r18
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	22 0f       	add	r18, r18
     664:	33 1f       	adc	r19, r19
     666:	22 0f       	add	r18, r18
     668:	33 1f       	adc	r19, r19
     66a:	22 0f       	add	r18, r18
     66c:	33 1f       	adc	r19, r19
     66e:	e2 0f       	add	r30, r18
     670:	f3 1f       	adc	r31, r19
     672:	e6 5e       	subi	r30, 0xE6	; 230
     674:	fd 4f       	sbci	r31, 0xFD	; 253
     676:	2a e0       	ldi	r18, 0x0A	; 10
     678:	dc 01       	movw	r26, r24
     67a:	01 90       	ld	r0, Z+
     67c:	0d 92       	st	X+, r0
     67e:	2a 95       	dec	r18
     680:	e1 f7       	brne	.-8      	; 0x67a <DEQUEUE+0x2e>
}
     682:	08 95       	ret

00000684 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY>:
	return INFINITE;
}

void REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY(unsigned char index, unsigned char arrayType)
{
	if(arrayType == BLOCK)
     684:	62 30       	cpi	r22, 0x02	; 2
     686:	41 f5       	brne	.+80     	; 0x6d8 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY+0x54>
	{
		block[index] = block[blockCounter-1];
     688:	20 91 d7 00 	lds	r18, 0x00D7
     68c:	a8 2f       	mov	r26, r24
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	aa 0f       	add	r26, r26
     692:	bb 1f       	adc	r27, r27
     694:	cd 01       	movw	r24, r26
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	a8 0f       	add	r26, r24
     6a0:	b9 1f       	adc	r27, r25
     6a2:	ac 51       	subi	r26, 0x1C	; 28
     6a4:	bf 4f       	sbci	r27, 0xFF	; 255
     6a6:	82 2f       	mov	r24, r18
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	fc 01       	movw	r30, r24
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	e8 0f       	add	r30, r24
     6c0:	f9 1f       	adc	r31, r25
     6c2:	ec 51       	subi	r30, 0x1C	; 28
     6c4:	ff 4f       	sbci	r31, 0xFF	; 255
     6c6:	8a e0       	ldi	r24, 0x0A	; 10
     6c8:	01 90       	ld	r0, Z+
     6ca:	0d 92       	st	X+, r0
     6cc:	8a 95       	dec	r24
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY+0x44>
		blockCounter--;
     6d0:	21 50       	subi	r18, 0x01	; 1
     6d2:	20 93 d7 00 	sts	0x00D7, r18
     6d6:	08 95       	ret
	}
	else if(arrayType == DESTINATION)
     6d8:	63 30       	cpi	r22, 0x03	; 3
     6da:	39 f5       	brne	.+78     	; 0x72a <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY+0xa6>
	{
		destination[index] = destination[destinationCounter-1];
     6dc:	20 91 60 00 	lds	r18, 0x0060
     6e0:	a8 2f       	mov	r26, r24
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	aa 0f       	add	r26, r26
     6e6:	bb 1f       	adc	r27, r27
     6e8:	cd 01       	movw	r24, r26
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	a8 0f       	add	r26, r24
     6f4:	b9 1f       	adc	r27, r25
     6f6:	a8 51       	subi	r26, 0x18	; 24
     6f8:	be 4f       	sbci	r27, 0xFE	; 254
     6fa:	82 2f       	mov	r24, r18
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	fc 01       	movw	r30, r24
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	e8 0f       	add	r30, r24
     714:	f9 1f       	adc	r31, r25
     716:	e8 51       	subi	r30, 0x18	; 24
     718:	fe 4f       	sbci	r31, 0xFE	; 254
     71a:	8a e0       	ldi	r24, 0x0A	; 10
     71c:	01 90       	ld	r0, Z+
     71e:	0d 92       	st	X+, r0
     720:	8a 95       	dec	r24
     722:	e1 f7       	brne	.-8      	; 0x71c <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY+0x98>
		destinationCounter--;
     724:	21 50       	subi	r18, 0x01	; 1
     726:	20 93 60 00 	sts	0x0060, r18
     72a:	08 95       	ret

0000072c <ADD_THE_BLOCKS_TO_ARRAY>:
	block_caught = FALSE;
	MOVE_BACK_IF_BLOCK();
}

void ADD_THE_BLOCKS_TO_ARRAY()
{
     72c:	cf 93       	push	r28
	unsigned i;
	for (i=0;i<blockCounter;i++)
     72e:	40 91 d7 00 	lds	r20, 0x00D7
     732:	44 23       	and	r20, r20
     734:	19 f1       	breq	.+70     	; 0x77c <ADD_THE_BLOCKS_TO_ARRAY+0x50>
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	e7 ee       	ldi	r30, 0xE7	; 231
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
	{
		block[i].X = block[i].X;
		block[i].Y = block[i].Y;
		details1[block[i].X][block[i].Y].status = BLOCK;
     740:	c6 e4       	ldi	r28, 0x46	; 70
     742:	72 e0       	ldi	r23, 0x02	; 2
	MOTOR_PORT = 0x00;
	block_caught = FALSE;
	MOVE_BACK_IF_BLOCK();
}

void ADD_THE_BLOCKS_TO_ARRAY()
     744:	df 01       	movw	r26, r30
     746:	11 97       	sbiw	r26, 0x01	; 1
	unsigned i;
	for (i=0;i<blockCounter;i++)
	{
		block[i].X = block[i].X;
		block[i].Y = block[i].Y;
		details1[block[i].X][block[i].Y].status = BLOCK;
     748:	6c 91       	ld	r22, X
     74a:	80 81       	ld	r24, Z
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	dc 01       	movw	r26, r24
     754:	aa 0f       	add	r26, r26
     756:	bb 1f       	adc	r27, r27
     758:	aa 0f       	add	r26, r26
     75a:	bb 1f       	adc	r27, r27
     75c:	8a 0f       	add	r24, r26
     75e:	9b 1f       	adc	r25, r27
     760:	dc 01       	movw	r26, r24
     762:	c6 9f       	mul	r28, r22
     764:	a0 0d       	add	r26, r0
     766:	b1 1d       	adc	r27, r1
     768:	11 24       	eor	r1, r1
     76a:	ae 51       	subi	r26, 0x1E	; 30
     76c:	bd 4f       	sbci	r27, 0xFD	; 253
     76e:	7c 93       	st	X, r23
}

void ADD_THE_BLOCKS_TO_ARRAY()
{
	unsigned i;
	for (i=0;i<blockCounter;i++)
     770:	2f 5f       	subi	r18, 0xFF	; 255
     772:	3f 4f       	sbci	r19, 0xFF	; 255
     774:	3a 96       	adiw	r30, 0x0a	; 10
     776:	24 17       	cp	r18, r20
     778:	35 07       	cpc	r19, r21
     77a:	20 f3       	brcs	.-56     	; 0x744 <ADD_THE_BLOCKS_TO_ARRAY+0x18>
	{
		block[i].X = block[i].X;
		block[i].Y = block[i].Y;
		details1[block[i].X][block[i].Y].status = BLOCK;
	}
}
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <RESET_INITIAL_INFO>:

void RESET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
		block[i].Y = block[i].Y;
		details1[block[i].X][block[i].Y].status = BLOCK;
	}
}

void RESET_INITIAL_INFO()
     784:	46 e4       	ldi	r20, 0x46	; 70
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	0f c0       	rjmp	.+30     	; 0x7a8 <RESET_INITIAL_INFO+0x28>
     78a:	df 01       	movw	r26, r30
     78c:	11 97       	sbiw	r26, 0x01	; 1
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details1[i][j].X=i;
     78e:	8c 93       	st	X, r24
			details1[i][j].Y=j;
     790:	20 83       	st	Z, r18
		block[i].Y = block[i].Y;
		details1[block[i].X][block[i].Y].status = BLOCK;
	}
}

void RESET_INITIAL_INFO()
     792:	df 01       	movw	r26, r30
     794:	13 97       	sbiw	r26, 0x03	; 3
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details1[i][j].X=i;
			details1[i][j].Y=j;
			details1[i][j].status = UNVISITED;
     796:	1c 92       	st	X, r1
     798:	2f 5f       	subi	r18, 0xFF	; 255
     79a:	3a 96       	adiw	r30, 0x0a	; 10
void RESET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
     79c:	27 30       	cpi	r18, 0x07	; 7
     79e:	a9 f7       	brne	.-22     	; 0x78a <RESET_INITIAL_INFO+0xa>
}

void RESET_INITIAL_INFO()
{
	unsigned int i,j;
	for(i=0;i<MAX_GRID_X;i++)
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	83 30       	cpi	r24, 0x03	; 3
     7a4:	91 05       	cpc	r25, r1
     7a6:	49 f0       	breq	.+18     	; 0x7ba <RESET_INITIAL_INFO+0x3a>
		block[i].Y = block[i].Y;
		details1[block[i].X][block[i].Y].status = BLOCK;
	}
}

void RESET_INITIAL_INFO()
     7a8:	48 9f       	mul	r20, r24
     7aa:	f0 01       	movw	r30, r0
     7ac:	49 9f       	mul	r20, r25
     7ae:	f0 0d       	add	r31, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	eb 51       	subi	r30, 0x1B	; 27
     7b4:	fd 4f       	sbci	r31, 0xFD	; 253
     7b6:	23 2f       	mov	r18, r19
     7b8:	e8 cf       	rjmp	.-48     	; 0x78a <RESET_INITIAL_INFO+0xa>
     7ba:	08 95       	ret

000007bc <main>:
int main(void)
{
	unsigned char i=0;
	while(1)
	{
		if(mode == 0)
     7bc:	80 91 da 00 	lds	r24, 0x00DA
     7c0:	81 11       	cpse	r24, r1
     7c2:	59 c0       	rjmp	.+178    	; 0x876 <__stack+0x17>
		{
			LCD_INITIALIZE();
     7c4:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_INITIALIZE>
			PORT_INITIALIZE();
     7c8:	0e 94 2c 01 	call	0x258	; 0x258 <PORT_INITIALIZE>
			SET_INITIAL_INFO();
     7cc:	0e 94 32 01 	call	0x264	; 0x264 <SET_INITIAL_INFO>
			LCD_SET_CURSER(1,1);
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
			LCD_PRINT("Initializing...");
     7d8:	83 e6       	ldi	r24, 0x63	; 99
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
			LCD_SET_CURSER(2,1);
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
			LCD_PRINT("Please Wait...");
     7e8:	83 e7       	ldi	r24, 0x73	; 115
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
     7f0:	2f ef       	ldi	r18, 0xFF	; 255
     7f2:	83 ed       	ldi	r24, 0xD3	; 211
     7f4:	90 e3       	ldi	r25, 0x30	; 48
     7f6:	21 50       	subi	r18, 0x01	; 1
     7f8:	80 40       	sbci	r24, 0x00	; 0
     7fa:	90 40       	sbci	r25, 0x00	; 0
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <main+0x3a>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <main+0x44>
     800:	00 00       	nop
			_delay_ms(1000);
			MOTOR_PORT = 0x00;
     802:	12 ba       	out	0x12, r1	; 18
				{
					SOUND_BUZZER();
					LCD_CLEAR();
					LCD_PRINT("BOT @ Start Node");
					_delay_ms(1000);
					currentMode = INTERMEDIATE_MODE;
     804:	12 e0       	ldi	r17, 0x02	; 2
					FOLLOW_ONE_NODE(FORWARD);
			
			//------BLOCK SEARCH MODE STARTS HERE-------
					currentMode = BLOCK_SEARCH_MODE;
					X=0;Y=0;
					details1[0][0].status = VISITED;
     806:	c2 ee       	ldi	r28, 0xE2	; 226
     808:	d2 e0       	ldi	r29, 0x02	; 2
     80a:	01 e0       	ldi	r16, 0x01	; 1
			LCD_PRINT("Please Wait...");
			_delay_ms(1000);
			MOTOR_PORT = 0x00;
			while(1)
			{
				if((SENSOR_PIN & GRID_SENSOR_MASK) == 0x00)
     80c:	93 b3       	in	r25, 0x13	; 19
     80e:	97 70       	andi	r25, 0x07	; 7
     810:	e9 f7       	brne	.-6      	; 0x80c <main+0x50>
				{
					SOUND_BUZZER();
     812:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SOUND_BUZZER>
					LCD_CLEAR();
     816:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
					LCD_PRINT("BOT @ Start Node");
     81a:	82 e8       	ldi	r24, 0x82	; 130
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
     822:	2f ef       	ldi	r18, 0xFF	; 255
     824:	83 ed       	ldi	r24, 0xD3	; 211
     826:	90 e3       	ldi	r25, 0x30	; 48
     828:	21 50       	subi	r18, 0x01	; 1
     82a:	80 40       	sbci	r24, 0x00	; 0
     82c:	90 40       	sbci	r25, 0x00	; 0
     82e:	e1 f7       	brne	.-8      	; 0x828 <main+0x6c>
     830:	00 c0       	rjmp	.+0      	; 0x832 <main+0x76>
     832:	00 00       	nop
					_delay_ms(1000);
					currentMode = INTERMEDIATE_MODE;
     834:	10 93 de 00 	sts	0x00DE, r17
					FOLLOW_ONE_NODE(FORWARD);
     838:	81 2f       	mov	r24, r17
     83a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
			
			//------BLOCK SEARCH MODE STARTS HERE-------
					currentMode = BLOCK_SEARCH_MODE;
     83e:	10 92 de 00 	sts	0x00DE, r1
					X=0;Y=0;
     842:	10 92 e3 00 	sts	0x00E3, r1
     846:	10 92 e2 00 	sts	0x00E2, r1
					details1[0][0].status = VISITED;
     84a:	08 83       	st	Y, r16
					LCD_CLEAR();
     84c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
					LCD_PRINT("BLOCK SEARCH MOD");
     850:	83 e9       	ldi	r24, 0x93	; 147
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
					BOT_MOVE(FORWARD);
     858:	81 2f       	mov	r24, r17
     85a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     85e:	2f ef       	ldi	r18, 0xFF	; 255
     860:	83 ec       	ldi	r24, 0xC3	; 195
     862:	99 e0       	ldi	r25, 0x09	; 9
     864:	21 50       	subi	r18, 0x01	; 1
     866:	80 40       	sbci	r24, 0x00	; 0
     868:	90 40       	sbci	r25, 0x00	; 0
     86a:	e1 f7       	brne	.-8      	; 0x864 <__stack+0x5>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
     86e:	00 00       	nop
					_delay_ms(200);
					DETECT_NEXT_NODE();
     870:	0e 94 bf 0a 	call	0x157e	; 0x157e <DETECT_NEXT_NODE>
     874:	cb cf       	rjmp	.-106    	; 0x80c <main+0x50>
				
			//------BLOCK SEARCH MODE ENDS HERE-------
	
		}
			//------BLOCK SOLVE MODE STARTS HERE--------
			LCD_CLEAR();
     876:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
			LCD_PRINT("  SOLVE MODE");
     87a:	84 ea       	ldi	r24, 0xA4	; 164
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
     882:	2f ef       	ldi	r18, 0xFF	; 255
     884:	83 ed       	ldi	r24, 0xD3	; 211
     886:	90 e3       	ldi	r25, 0x30	; 48
     888:	21 50       	subi	r18, 0x01	; 1
     88a:	80 40       	sbci	r24, 0x00	; 0
     88c:	90 40       	sbci	r25, 0x00	; 0
     88e:	e1 f7       	brne	.-8      	; 0x888 <__stack+0x29>
     890:	00 c0       	rjmp	.+0      	; 0x892 <__stack+0x33>
     892:	00 00       	nop
			_delay_ms(1000);
			currentMode = SOLVE_MODE;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 de 00 	sts	0x00DE, r24
			RESET_INITIAL_INFO();
     89a:	0e 94 c0 03 	call	0x780	; 0x780 <RESET_INITIAL_INFO>
			DEFINE_DESTINATION();
     89e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DEFINE_DESTINATION>
			//BLOCK_POS();
			ADD_THE_BLOCKS_TO_ARRAY();		
     8a2:	0e 94 96 03 	call	0x72c	; 0x72c <ADD_THE_BLOCKS_TO_ARRAY>
			for (i=0;i<ROUND3;i++)
			{
				MOVE_TO_NEAREST_BLOCK();
     8a6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <MOVE_TO_NEAREST_BLOCK>
				MOVE_TO_APPROPRIATE_DESTINATION();
     8aa:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <MOVE_TO_APPROPRIATE_DESTINATION>
			DEFINE_DESTINATION();
			//BLOCK_POS();
			ADD_THE_BLOCKS_TO_ARRAY();		
			for (i=0;i<ROUND3;i++)
			{
				MOVE_TO_NEAREST_BLOCK();
     8ae:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <MOVE_TO_NEAREST_BLOCK>
				MOVE_TO_APPROPRIATE_DESTINATION();
     8b2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <MOVE_TO_APPROPRIATE_DESTINATION>
			DEFINE_DESTINATION();
			//BLOCK_POS();
			ADD_THE_BLOCKS_TO_ARRAY();		
			for (i=0;i<ROUND3;i++)
			{
				MOVE_TO_NEAREST_BLOCK();
     8b6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <MOVE_TO_NEAREST_BLOCK>
				MOVE_TO_APPROPRIATE_DESTINATION();
     8ba:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <MOVE_TO_APPROPRIATE_DESTINATION>
			DEFINE_DESTINATION();
			//BLOCK_POS();
			ADD_THE_BLOCKS_TO_ARRAY();		
			for (i=0;i<ROUND3;i++)
			{
				MOVE_TO_NEAREST_BLOCK();
     8be:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <MOVE_TO_NEAREST_BLOCK>
				MOVE_TO_APPROPRIATE_DESTINATION();
     8c2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <MOVE_TO_APPROPRIATE_DESTINATION>
			DEFINE_DESTINATION();
			//BLOCK_POS();
			ADD_THE_BLOCKS_TO_ARRAY();		
			for (i=0;i<ROUND3;i++)
			{
				MOVE_TO_NEAREST_BLOCK();
     8c6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <MOVE_TO_NEAREST_BLOCK>
				MOVE_TO_APPROPRIATE_DESTINATION();
     8ca:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <MOVE_TO_APPROPRIATE_DESTINATION>
			}
			//------BLOCK SOLVE MODE ENDS HERE--------
			MOTOR_PORT = 0x00;
     8ce:	12 ba       	out	0x12, r1	; 18
     8d0:	ff cf       	rjmp	.-2      	; 0x8d0 <__stack+0x71>

000008d2 <MOVE_BACK_IF_BLOCK>:
		else if (direction == BACKWARD)
			MOTOR_PORT |= 0b00001000;
}

void MOVE_BACK_IF_BLOCK()
{
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
	BOT_MOVE(BACKWARD);
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     8dc:	2f ef       	ldi	r18, 0xFF	; 255
     8de:	88 ef       	ldi	r24, 0xF8	; 248
     8e0:	95 e1       	ldi	r25, 0x15	; 21
     8e2:	21 50       	subi	r18, 0x01	; 1
     8e4:	80 40       	sbci	r24, 0x00	; 0
     8e6:	90 40       	sbci	r25, 0x00	; 0
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <MOVE_BACK_IF_BLOCK+0x10>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <MOVE_BACK_IF_BLOCK+0x1a>
     8ec:	00 00       	nop
	_delay_ms(450);
	MOTOR_PORT = 0x00;
     8ee:	12 ba       	out	0x12, r1	; 18
	TCCR1A = 0xA1;
     8f0:	81 ea       	ldi	r24, 0xA1	; 161
     8f2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x01;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	8e bd       	out	0x2e, r24	; 46
	while((SENSOR_PIN & GRID_SENSOR_MASK) != 0x00)
     8f8:	83 b3       	in	r24, 0x13	; 19
     8fa:	87 70       	andi	r24, 0x07	; 7
     8fc:	61 f0       	breq	.+24     	; 0x916 <MOVE_BACK_IF_BLOCK+0x44>
	{
		OCR1A = 180;
     8fe:	c4 eb       	ldi	r28, 0xB4	; 180
     900:	d0 e0       	ldi	r29, 0x00	; 0
     902:	db bd       	out	0x2b, r29	; 43
     904:	ca bd       	out	0x2a, r28	; 42
		OCR1B = 180;
     906:	d9 bd       	out	0x29, r29	; 41
     908:	c8 bd       	out	0x28, r28	; 40
		BOT_MOVE(BACKWARD);
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
	BOT_MOVE(BACKWARD);
	_delay_ms(450);
	MOTOR_PORT = 0x00;
	TCCR1A = 0xA1;
	TCCR1B = 0x01;
	while((SENSOR_PIN & GRID_SENSOR_MASK) != 0x00)
     910:	83 b3       	in	r24, 0x13	; 19
     912:	87 70       	andi	r24, 0x07	; 7
     914:	b1 f7       	brne	.-20     	; 0x902 <MOVE_BACK_IF_BLOCK+0x30>
	{
		OCR1A = 180;
		OCR1B = 180;
		BOT_MOVE(BACKWARD);
	}
	MOTOR_PORT = 0x00;
     916:	12 ba       	out	0x12, r1	; 18
	BOT_MOVE(FORWARD);
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     91e:	2f ef       	ldi	r18, 0xFF	; 255
     920:	83 ec       	ldi	r24, 0xC3	; 195
     922:	99 e0       	ldi	r25, 0x09	; 9
     924:	21 50       	subi	r18, 0x01	; 1
     926:	80 40       	sbci	r24, 0x00	; 0
     928:	90 40       	sbci	r25, 0x00	; 0
     92a:	e1 f7       	brne	.-8      	; 0x924 <MOVE_BACK_IF_BLOCK+0x52>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <MOVE_BACK_IF_BLOCK+0x5c>
     92e:	00 00       	nop
	_delay_ms(200);
	MOTOR_PORT = 0x00;		
     930:	12 ba       	out	0x12, r1	; 18
	TCCR1A = 0x00;
     932:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x00;
     934:	1e bc       	out	0x2e, r1	; 46
	OCR1A = 255;
     936:	8f ef       	ldi	r24, 0xFF	; 255
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	9b bd       	out	0x2b, r25	; 43
     93c:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 255;
     93e:	99 bd       	out	0x29, r25	; 41
     940:	88 bd       	out	0x28, r24	; 40
	if(dir == 'N')
     942:	80 91 62 00 	lds	r24, 0x0062
     946:	8e 34       	cpi	r24, 0x4E	; 78
     948:	31 f4       	brne	.+12     	; 0x956 <MOVE_BACK_IF_BLOCK+0x84>
	Y--;
     94a:	80 91 e2 00 	lds	r24, 0x00E2
     94e:	81 50       	subi	r24, 0x01	; 1
     950:	80 93 e2 00 	sts	0x00E2, r24
     954:	17 c0       	rjmp	.+46     	; 0x984 <MOVE_BACK_IF_BLOCK+0xb2>
	else if(dir=='E')
     956:	85 34       	cpi	r24, 0x45	; 69
     958:	31 f4       	brne	.+12     	; 0x966 <MOVE_BACK_IF_BLOCK+0x94>
	X++;
     95a:	80 91 e3 00 	lds	r24, 0x00E3
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	80 93 e3 00 	sts	0x00E3, r24
     964:	0f c0       	rjmp	.+30     	; 0x984 <MOVE_BACK_IF_BLOCK+0xb2>
	else if(dir=='W')
     966:	87 35       	cpi	r24, 0x57	; 87
     968:	31 f4       	brne	.+12     	; 0x976 <MOVE_BACK_IF_BLOCK+0xa4>
	X--;
     96a:	80 91 e3 00 	lds	r24, 0x00E3
     96e:	81 50       	subi	r24, 0x01	; 1
     970:	80 93 e3 00 	sts	0x00E3, r24
     974:	07 c0       	rjmp	.+14     	; 0x984 <MOVE_BACK_IF_BLOCK+0xb2>
	else if(dir=='S')
     976:	83 35       	cpi	r24, 0x53	; 83
     978:	29 f4       	brne	.+10     	; 0x984 <MOVE_BACK_IF_BLOCK+0xb2>
	Y++	;
     97a:	80 91 e2 00 	lds	r24, 0x00E2
     97e:	8f 5f       	subi	r24, 0xFF	; 255
     980:	80 93 e2 00 	sts	0x00E2, r24
	prev_count = TRUE;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 dd 00 	sts	0x00DD, r24
	
	if(currentMode == BLOCK_SEARCH_MODE && blockCounter < 5)	DETECT_NEXT_NODE();
     98a:	80 91 de 00 	lds	r24, 0x00DE
     98e:	81 11       	cpse	r24, r1
     990:	06 c0       	rjmp	.+12     	; 0x99e <MOVE_BACK_IF_BLOCK+0xcc>
     992:	80 91 d7 00 	lds	r24, 0x00D7
     996:	85 30       	cpi	r24, 0x05	; 5
     998:	10 f4       	brcc	.+4      	; 0x99e <MOVE_BACK_IF_BLOCK+0xcc>
     99a:	0e 94 bf 0a 	call	0x157e	; 0x157e <DETECT_NEXT_NODE>
	if(blockCounter == 5 && currentMode == BLOCK_SEARCH_MODE)
     99e:	80 91 d7 00 	lds	r24, 0x00D7
     9a2:	85 30       	cpi	r24, 0x05	; 5
     9a4:	a9 f5       	brne	.+106    	; 0xa10 <MOVE_BACK_IF_BLOCK+0x13e>
     9a6:	80 91 de 00 	lds	r24, 0x00DE
     9aa:	81 11       	cpse	r24, r1
     9ac:	31 c0       	rjmp	.+98     	; 0xa10 <MOVE_BACK_IF_BLOCK+0x13e>
	{
		mode = 1;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 93 da 00 	sts	0x00DA, r24
		currentMode = SOLVE_MODE;
     9b4:	80 93 de 00 	sts	0x00DE, r24
		LCD_CLEAR();
     9b8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
		LCD_PRINT("NOW, ROBOT IS");
     9bc:	81 eb       	ldi	r24, 0xB1	; 177
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
		LCD_SET_CURSER(2,2);
     9c4:	62 e0       	ldi	r22, 0x02	; 2
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
		LCD_PRINT("at ");
     9cc:	8f eb       	ldi	r24, 0xBF	; 191
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
		LCD_DATA('(');
     9d4:	88 e2       	ldi	r24, 0x28	; 40
     9d6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(X+0x30);
     9da:	80 91 e3 00 	lds	r24, 0x00E3
     9de:	80 5d       	subi	r24, 0xD0	; 208
     9e0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(',');
     9e4:	8c e2       	ldi	r24, 0x2C	; 44
     9e6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(Y+0x30);
     9ea:	80 91 e2 00 	lds	r24, 0x00E2
     9ee:	80 5d       	subi	r24, 0xD0	; 208
     9f0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(')');
     9f4:	89 e2       	ldi	r24, 0x29	; 41
     9f6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
     9fa:	2f ef       	ldi	r18, 0xFF	; 255
     9fc:	87 ea       	ldi	r24, 0xA7	; 167
     9fe:	91 e6       	ldi	r25, 0x61	; 97
     a00:	21 50       	subi	r18, 0x01	; 1
     a02:	80 40       	sbci	r24, 0x00	; 0
     a04:	90 40       	sbci	r25, 0x00	; 0
     a06:	e1 f7       	brne	.-8      	; 0xa00 <MOVE_BACK_IF_BLOCK+0x12e>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <MOVE_BACK_IF_BLOCK+0x138>
     a0a:	00 00       	nop
		_delay_ms(2000);
		main();
     a0c:	0e 94 de 03 	call	0x7bc	; 0x7bc <main>
	}
}
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	08 95       	ret

00000a16 <BLOCK_RECORD>:

void BLOCK_RECORD()
{
	prev_block_detect = TRUE;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	80 93 dc 00 	sts	0x00DC, r24
	if(currentMode == BLOCK_SEARCH_MODE)
     a1c:	80 91 de 00 	lds	r24, 0x00DE
     a20:	81 11       	cpse	r24, r1
     a22:	91 c0       	rjmp	.+290    	; 0xb46 <BLOCK_RECORD+0x130>
	{
		block[block_no].X = X;
     a24:	30 91 e0 00 	lds	r19, 0x00E0
     a28:	20 91 e3 00 	lds	r18, 0x00E3
     a2c:	83 2f       	mov	r24, r19
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	fc 01       	movw	r30, r24
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	8e 0f       	add	r24, r30
     a40:	9f 1f       	adc	r25, r31
     a42:	fc 01       	movw	r30, r24
     a44:	ec 51       	subi	r30, 0x1C	; 28
     a46:	ff 4f       	sbci	r31, 0xFF	; 255
     a48:	22 83       	std	Z+2, r18	; 0x02
		block[block_no].Y = Y;
     a4a:	40 91 e2 00 	lds	r20, 0x00E2
     a4e:	83 2f       	mov	r24, r19
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	fc 01       	movw	r30, r24
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	8e 0f       	add	r24, r30
     a62:	9f 1f       	adc	r25, r31
     a64:	fc 01       	movw	r30, r24
     a66:	ec 51       	subi	r30, 0x1C	; 28
     a68:	ff 4f       	sbci	r31, 0xFF	; 255
     a6a:	43 83       	std	Z+3, r20	; 0x03
		details1[X][Y].status = BLOCK;
     a6c:	84 2f       	mov	r24, r20
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	fc 01       	movw	r30, r24
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	ee 0f       	add	r30, r30
     a7c:	ff 1f       	adc	r31, r31
     a7e:	8e 0f       	add	r24, r30
     a80:	9f 1f       	adc	r25, r31
     a82:	56 e4       	ldi	r21, 0x46	; 70
     a84:	25 9f       	mul	r18, r21
     a86:	90 01       	movw	r18, r0
     a88:	11 24       	eor	r1, r1
     a8a:	fc 01       	movw	r30, r24
     a8c:	e2 0f       	add	r30, r18
     a8e:	f3 1f       	adc	r31, r19
     a90:	ee 51       	subi	r30, 0x1E	; 30
     a92:	fd 4f       	sbci	r31, 0xFD	; 253
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	80 83       	st	Z, r24
		//details2[X][Y].status = DESTINATION;
		details1[X][Y].priority = -1;
     a98:	84 2f       	mov	r24, r20
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	fc 01       	movw	r30, r24
     aa2:	ee 0f       	add	r30, r30
     aa4:	ff 1f       	adc	r31, r31
     aa6:	ee 0f       	add	r30, r30
     aa8:	ff 1f       	adc	r31, r31
     aaa:	8e 0f       	add	r24, r30
     aac:	9f 1f       	adc	r25, r31
     aae:	28 0f       	add	r18, r24
     ab0:	39 1f       	adc	r19, r25
     ab2:	f9 01       	movw	r30, r18
     ab4:	ee 51       	subi	r30, 0x1E	; 30
     ab6:	fd 4f       	sbci	r31, 0xFD	; 253
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	81 83       	std	Z+1, r24	; 0x01
		LCD_CLEAR();
     abc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
		LCD_PRINT("BLOCK");
     ac0:	83 ec       	ldi	r24, 0xC3	; 195
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
		LCD_DATA(block_no+0x31);
     ac8:	80 91 e0 00 	lds	r24, 0x00E0
     acc:	8f 5c       	subi	r24, 0xCF	; 207
     ace:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_PRINT(" @ ");
     ad2:	89 ec       	ldi	r24, 0xC9	; 201
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
		LCD_DATA('(');
     ada:	88 e2       	ldi	r24, 0x28	; 40
     adc:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(block[block_no].X+0x30);
     ae0:	80 91 e0 00 	lds	r24, 0x00E0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	fc 01       	movw	r30, r24
     aec:	ee 0f       	add	r30, r30
     aee:	ff 1f       	adc	r31, r31
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	8e 0f       	add	r24, r30
     af6:	9f 1f       	adc	r25, r31
     af8:	fc 01       	movw	r30, r24
     afa:	ec 51       	subi	r30, 0x1C	; 28
     afc:	ff 4f       	sbci	r31, 0xFF	; 255
     afe:	82 81       	ldd	r24, Z+2	; 0x02
     b00:	80 5d       	subi	r24, 0xD0	; 208
     b02:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(',');
     b06:	8c e2       	ldi	r24, 0x2C	; 44
     b08:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(block[block_no].Y+0x30);
     b0c:	80 91 e0 00 	lds	r24, 0x00E0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	fc 01       	movw	r30, r24
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	ee 0f       	add	r30, r30
     b1e:	ff 1f       	adc	r31, r31
     b20:	8e 0f       	add	r24, r30
     b22:	9f 1f       	adc	r25, r31
     b24:	fc 01       	movw	r30, r24
     b26:	ec 51       	subi	r30, 0x1C	; 28
     b28:	ff 4f       	sbci	r31, 0xFF	; 255
     b2a:	83 81       	ldd	r24, Z+3	; 0x03
     b2c:	80 5d       	subi	r24, 0xD0	; 208
     b2e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		LCD_DATA(')');
     b32:	89 e2       	ldi	r24, 0x29	; 41
     b34:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
		coord_count++;
     b38:	80 91 61 00 	lds	r24, 0x0061
     b3c:	8f 5f       	subi	r24, 0xFF	; 255
     b3e:	80 93 61 00 	sts	0x0061, r24
		MOVE_BACK_IF_BLOCK();
     b42:	0e 94 69 04 	call	0x8d2	; 0x8d2 <MOVE_BACK_IF_BLOCK>
     b46:	08 95       	ret

00000b48 <DETECT_BLOCK>:
	SOUND_BUZZER();
}

char DETECT_BLOCK()
{
	if((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0xF0 && prev_block_detect == FALSE && block_caught == FALSE)
     b48:	83 b3       	in	r24, 0x13	; 19
     b4a:	88 7f       	andi	r24, 0xF8	; 248
     b4c:	80 3f       	cpi	r24, 0xF0	; 240
     b4e:	a9 f4       	brne	.+42     	; 0xb7a <DETECT_BLOCK+0x32>
     b50:	80 91 dc 00 	lds	r24, 0x00DC
     b54:	81 11       	cpse	r24, r1
     b56:	11 c0       	rjmp	.+34     	; 0xb7a <DETECT_BLOCK+0x32>
     b58:	80 91 db 00 	lds	r24, 0x00DB
     b5c:	81 11       	cpse	r24, r1
     b5e:	0d c0       	rjmp	.+26     	; 0xb7a <DETECT_BLOCK+0x32>
	{
		STOP_N_UPDATE_XY();
     b60:	0e 94 b0 01 	call	0x360	; 0x360 <STOP_N_UPDATE_XY>
		block_no = 0;
     b64:	10 92 e0 00 	sts	0x00E0, r1
		blockCounter++;
     b68:	80 91 d7 00 	lds	r24, 0x00D7
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	80 93 d7 00 	sts	0x00D7, r24
		BLOCK_RECORD();
     b72:	0e 94 0b 05 	call	0xa16	; 0xa16 <BLOCK_RECORD>
		return TRUE;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	08 95       	ret
	}
	if ((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0xE0 && prev_block_detect == FALSE && block_caught == FALSE)
     b7a:	83 b3       	in	r24, 0x13	; 19
     b7c:	88 7f       	andi	r24, 0xF8	; 248
     b7e:	80 3e       	cpi	r24, 0xE0	; 224
     b80:	b1 f4       	brne	.+44     	; 0xbae <DETECT_BLOCK+0x66>
     b82:	80 91 dc 00 	lds	r24, 0x00DC
     b86:	81 11       	cpse	r24, r1
     b88:	12 c0       	rjmp	.+36     	; 0xbae <DETECT_BLOCK+0x66>
     b8a:	80 91 db 00 	lds	r24, 0x00DB
     b8e:	81 11       	cpse	r24, r1
     b90:	0e c0       	rjmp	.+28     	; 0xbae <DETECT_BLOCK+0x66>
	{
		STOP_N_UPDATE_XY();
     b92:	0e 94 b0 01 	call	0x360	; 0x360 <STOP_N_UPDATE_XY>
		block_no = 1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	80 93 e0 00 	sts	0x00E0, r24
		blockCounter++;
     b9c:	80 91 d7 00 	lds	r24, 0x00D7
     ba0:	8f 5f       	subi	r24, 0xFF	; 255
     ba2:	80 93 d7 00 	sts	0x00D7, r24
		BLOCK_RECORD();
     ba6:	0e 94 0b 05 	call	0xa16	; 0xa16 <BLOCK_RECORD>
		return TRUE;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	08 95       	ret
	}
	if ((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0xC0 && prev_block_detect == FALSE && block_caught == FALSE)
     bae:	83 b3       	in	r24, 0x13	; 19
     bb0:	88 7f       	andi	r24, 0xF8	; 248
     bb2:	80 3c       	cpi	r24, 0xC0	; 192
     bb4:	b1 f4       	brne	.+44     	; 0xbe2 <DETECT_BLOCK+0x9a>
     bb6:	80 91 dc 00 	lds	r24, 0x00DC
     bba:	81 11       	cpse	r24, r1
     bbc:	12 c0       	rjmp	.+36     	; 0xbe2 <DETECT_BLOCK+0x9a>
     bbe:	80 91 db 00 	lds	r24, 0x00DB
     bc2:	81 11       	cpse	r24, r1
     bc4:	0e c0       	rjmp	.+28     	; 0xbe2 <DETECT_BLOCK+0x9a>
	{
		STOP_N_UPDATE_XY();
     bc6:	0e 94 b0 01 	call	0x360	; 0x360 <STOP_N_UPDATE_XY>
		block_no = 2;
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	80 93 e0 00 	sts	0x00E0, r24
		blockCounter++;
     bd0:	80 91 d7 00 	lds	r24, 0x00D7
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	80 93 d7 00 	sts	0x00D7, r24
		BLOCK_RECORD();
     bda:	0e 94 0b 05 	call	0xa16	; 0xa16 <BLOCK_RECORD>
		return TRUE;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	08 95       	ret
	}
	if ((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0x80 && prev_block_detect == FALSE && block_caught == FALSE)
     be2:	83 b3       	in	r24, 0x13	; 19
     be4:	88 7f       	andi	r24, 0xF8	; 248
     be6:	80 38       	cpi	r24, 0x80	; 128
     be8:	b1 f4       	brne	.+44     	; 0xc16 <DETECT_BLOCK+0xce>
     bea:	80 91 dc 00 	lds	r24, 0x00DC
     bee:	81 11       	cpse	r24, r1
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <DETECT_BLOCK+0xce>
     bf2:	80 91 db 00 	lds	r24, 0x00DB
     bf6:	81 11       	cpse	r24, r1
     bf8:	0e c0       	rjmp	.+28     	; 0xc16 <DETECT_BLOCK+0xce>
	{
		STOP_N_UPDATE_XY();
     bfa:	0e 94 b0 01 	call	0x360	; 0x360 <STOP_N_UPDATE_XY>
		block_no = 3;
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	80 93 e0 00 	sts	0x00E0, r24
		blockCounter++;
     c04:	80 91 d7 00 	lds	r24, 0x00D7
     c08:	8f 5f       	subi	r24, 0xFF	; 255
     c0a:	80 93 d7 00 	sts	0x00D7, r24
		BLOCK_RECORD();
     c0e:	0e 94 0b 05 	call	0xa16	; 0xa16 <BLOCK_RECORD>
		return TRUE;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 95       	ret
	}
	if ((SENSOR_PIN & BLOCK_SENSOR_MASK) == 0x00 && prev_block_detect == FALSE && block_caught == FALSE)
     c16:	83 b3       	in	r24, 0x13	; 19
     c18:	88 7f       	andi	r24, 0xF8	; 248
     c1a:	b1 f4       	brne	.+44     	; 0xc48 <DETECT_BLOCK+0x100>
     c1c:	80 91 dc 00 	lds	r24, 0x00DC
     c20:	81 11       	cpse	r24, r1
     c22:	12 c0       	rjmp	.+36     	; 0xc48 <DETECT_BLOCK+0x100>
     c24:	80 91 db 00 	lds	r24, 0x00DB
     c28:	81 11       	cpse	r24, r1
     c2a:	0e c0       	rjmp	.+28     	; 0xc48 <DETECT_BLOCK+0x100>
	{
		STOP_N_UPDATE_XY();
     c2c:	0e 94 b0 01 	call	0x360	; 0x360 <STOP_N_UPDATE_XY>
		block_no = 4;
     c30:	84 e0       	ldi	r24, 0x04	; 4
     c32:	80 93 e0 00 	sts	0x00E0, r24
		blockCounter++;
     c36:	80 91 d7 00 	lds	r24, 0x00D7
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	80 93 d7 00 	sts	0x00D7, r24
		BLOCK_RECORD();
     c40:	0e 94 0b 05 	call	0xa16	; 0xa16 <BLOCK_RECORD>
		return TRUE;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	08 95       	ret
	}
	else //if(((SENSOR_PIN & 0x08) != 0x00 && block_caught == FALSE))
	{
		prev_block_detect =  FALSE;
     c48:	10 92 dc 00 	sts	0x00DC, r1
		return FALSE;
     c4c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     c4e:	08 95       	ret

00000c50 <FOLLOW_LINE_FORWARD>:

void FOLLOW_LINE_FORWARD()
{
	if(DETECT_BLOCK() == TRUE)
     c50:	0e 94 a4 05 	call	0xb48	; 0xb48 <DETECT_BLOCK>
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	21 f4       	brne	.+8      	; 0xc60 <FOLLOW_LINE_FORWARD+0x10>
	{
		MOTOR_PORT = 0x00;
     c58:	12 ba       	out	0x12, r1	; 18
		SOUND_BUZZER();
     c5a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SOUND_BUZZER>
     c5e:	08 95       	ret
	}
			
	else if ((SENSOR_PIN & GRID_SENSOR_MASK) == 0x00 && prev_count==FALSE)
     c60:	83 b3       	in	r24, 0x13	; 19
     c62:	87 70       	andi	r24, 0x07	; 7
     c64:	09 f0       	breq	.+2      	; 0xc68 <FOLLOW_LINE_FORWARD+0x18>
     c66:	64 c0       	rjmp	.+200    	; 0xd30 <FOLLOW_LINE_FORWARD+0xe0>
     c68:	80 91 dd 00 	lds	r24, 0x00DD
     c6c:	81 11       	cpse	r24, r1
     c6e:	60 c0       	rjmp	.+192    	; 0xd30 <FOLLOW_LINE_FORWARD+0xe0>
	{
		prev_count= TRUE;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 93 dd 00 	sts	0x00DD, r24
		count++;
     c76:	80 91 df 00 	lds	r24, 0x00DF
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
     c7c:	80 93 df 00 	sts	0x00DF, r24
		
		if(dir == 'N')
     c80:	80 91 62 00 	lds	r24, 0x0062
     c84:	8e 34       	cpi	r24, 0x4E	; 78
     c86:	31 f4       	brne	.+12     	; 0xc94 <FOLLOW_LINE_FORWARD+0x44>
		Y++;
     c88:	80 91 e2 00 	lds	r24, 0x00E2
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	80 93 e2 00 	sts	0x00E2, r24
     c92:	17 c0       	rjmp	.+46     	; 0xcc2 <FOLLOW_LINE_FORWARD+0x72>
		else if(dir=='E')
     c94:	85 34       	cpi	r24, 0x45	; 69
     c96:	31 f4       	brne	.+12     	; 0xca4 <FOLLOW_LINE_FORWARD+0x54>
		X--;
     c98:	80 91 e3 00 	lds	r24, 0x00E3
     c9c:	81 50       	subi	r24, 0x01	; 1
     c9e:	80 93 e3 00 	sts	0x00E3, r24
     ca2:	0f c0       	rjmp	.+30     	; 0xcc2 <FOLLOW_LINE_FORWARD+0x72>
		else if(dir=='W')
     ca4:	87 35       	cpi	r24, 0x57	; 87
     ca6:	31 f4       	brne	.+12     	; 0xcb4 <FOLLOW_LINE_FORWARD+0x64>
		X++;
     ca8:	80 91 e3 00 	lds	r24, 0x00E3
     cac:	8f 5f       	subi	r24, 0xFF	; 255
     cae:	80 93 e3 00 	sts	0x00E3, r24
     cb2:	07 c0       	rjmp	.+14     	; 0xcc2 <FOLLOW_LINE_FORWARD+0x72>
		else if(dir=='S')
     cb4:	83 35       	cpi	r24, 0x53	; 83
     cb6:	29 f4       	brne	.+10     	; 0xcc2 <FOLLOW_LINE_FORWARD+0x72>
		Y--;
     cb8:	80 91 e2 00 	lds	r24, 0x00E2
     cbc:	81 50       	subi	r24, 0x01	; 1
     cbe:	80 93 e2 00 	sts	0x00E2, r24
		
		if(currentMode == BLOCK_SEARCH_MODE)
     cc2:	80 91 de 00 	lds	r24, 0x00DE
     cc6:	81 11       	cpse	r24, r1
     cc8:	6f c0       	rjmp	.+222    	; 0xda8 <FOLLOW_LINE_FORWARD+0x158>
		{
			details1[X][Y].status = VISITED;
     cca:	20 91 e3 00 	lds	r18, 0x00E3
     cce:	40 91 e2 00 	lds	r20, 0x00E2
     cd2:	84 2f       	mov	r24, r20
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	fc 01       	movw	r30, r24
     cdc:	ee 0f       	add	r30, r30
     cde:	ff 1f       	adc	r31, r31
     ce0:	ee 0f       	add	r30, r30
     ce2:	ff 1f       	adc	r31, r31
     ce4:	8e 0f       	add	r24, r30
     ce6:	9f 1f       	adc	r25, r31
     ce8:	56 e4       	ldi	r21, 0x46	; 70
     cea:	25 9f       	mul	r18, r21
     cec:	90 01       	movw	r18, r0
     cee:	11 24       	eor	r1, r1
     cf0:	fc 01       	movw	r30, r24
     cf2:	e2 0f       	add	r30, r18
     cf4:	f3 1f       	adc	r31, r19
     cf6:	ee 51       	subi	r30, 0x1E	; 30
     cf8:	fd 4f       	sbci	r31, 0xFD	; 253
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 83       	st	Z, r24
			details1[X][Y].priority = 0;
     cfe:	84 2f       	mov	r24, r20
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	fc 01       	movw	r30, r24
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	ee 0f       	add	r30, r30
     d0e:	ff 1f       	adc	r31, r31
     d10:	8e 0f       	add	r24, r30
     d12:	9f 1f       	adc	r25, r31
     d14:	28 0f       	add	r18, r24
     d16:	39 1f       	adc	r19, r25
     d18:	f9 01       	movw	r30, r18
     d1a:	ee 51       	subi	r30, 0x1E	; 30
     d1c:	fd 4f       	sbci	r31, 0xFD	; 253
     d1e:	11 82       	std	Z+1, r1	; 0x01
			coord_count++;
     d20:	80 91 61 00 	lds	r24, 0x0061
     d24:	8f 5f       	subi	r24, 0xFF	; 255
     d26:	80 93 61 00 	sts	0x0061, r24
			DETECT_NEXT_NODE();
     d2a:	0e 94 bf 0a 	call	0x157e	; 0x157e <DETECT_NEXT_NODE>
     d2e:	08 95       	ret
		}
	}
	
	else if ((SENSOR_PIN & GRID_SENSOR_MASK) == 0x00 && prev_count==TRUE)
     d30:	83 b3       	in	r24, 0x13	; 19
     d32:	87 70       	andi	r24, 0x07	; 7
     d34:	41 f4       	brne	.+16     	; 0xd46 <FOLLOW_LINE_FORWARD+0xf6>
     d36:	80 91 dd 00 	lds	r24, 0x00DD
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	21 f4       	brne	.+8      	; 0xd46 <FOLLOW_LINE_FORWARD+0xf6>
	{
		BOT_MOVE(FORWARD);
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
     d44:	08 95       	ret
	}
	else if((SENSOR_PIN & GRID_SENSOR_MASK) == 0b00000101)
     d46:	83 b3       	in	r24, 0x13	; 19
     d48:	87 70       	andi	r24, 0x07	; 7
     d4a:	85 30       	cpi	r24, 0x05	; 5
     d4c:	31 f4       	brne	.+12     	; 0xd5a <FOLLOW_LINE_FORWARD+0x10a>
	{
		BOT_MOVE(FORWARD);
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
		prev_count = FALSE;
     d54:	10 92 dd 00 	sts	0x00DD, r1
     d58:	08 95       	ret
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK)  == 0b00000001)
     d5a:	83 b3       	in	r24, 0x13	; 19
     d5c:	87 70       	andi	r24, 0x07	; 7
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	31 f4       	brne	.+12     	; 0xd6e <FOLLOW_LINE_FORWARD+0x11e>
	{
		BOT_MOVE(LEFT);
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
		prev_count = FALSE;
     d68:	10 92 dd 00 	sts	0x00DD, r1
     d6c:	08 95       	ret
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK)  == 0b00000011)
     d6e:	83 b3       	in	r24, 0x13	; 19
     d70:	87 70       	andi	r24, 0x07	; 7
     d72:	83 30       	cpi	r24, 0x03	; 3
     d74:	31 f4       	brne	.+12     	; 0xd82 <FOLLOW_LINE_FORWARD+0x132>
	{
		BOT_MOVE(LEFT);
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
		prev_count = FALSE;
     d7c:	10 92 dd 00 	sts	0x00DD, r1
     d80:	08 95       	ret
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK)  == 0b00000100)
     d82:	83 b3       	in	r24, 0x13	; 19
     d84:	87 70       	andi	r24, 0x07	; 7
     d86:	84 30       	cpi	r24, 0x04	; 4
     d88:	31 f4       	brne	.+12     	; 0xd96 <FOLLOW_LINE_FORWARD+0x146>
	{
		BOT_MOVE(RIGHT);
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
		prev_count = FALSE;
     d90:	10 92 dd 00 	sts	0x00DD, r1
     d94:	08 95       	ret
	}
	else if ((SENSOR_PIN & GRID_SENSOR_MASK)  == 0b00000110)
     d96:	83 b3       	in	r24, 0x13	; 19
     d98:	87 70       	andi	r24, 0x07	; 7
     d9a:	86 30       	cpi	r24, 0x06	; 6
     d9c:	29 f4       	brne	.+10     	; 0xda8 <FOLLOW_LINE_FORWARD+0x158>
	{
		BOT_MOVE(RIGHT);
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
		prev_count = FALSE;
     da4:	10 92 dd 00 	sts	0x00DD, r1
     da8:	08 95       	ret

00000daa <FOLLOW_ONE_NODE>:
	loop_count++;
}

void FOLLOW_ONE_NODE(unsigned char direction)
{
	count = 0;
     daa:	10 92 df 00 	sts	0x00DF, r1
	if(direction == FORWARD)
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	39 f4       	brne	.+14     	; 0xdc0 <FOLLOW_ONE_NODE+0x16>
	{
		while (count == 0)
		{
			FOLLOW_LINE_FORWARD();
     db2:	0e 94 28 06 	call	0xc50	; 0xc50 <FOLLOW_LINE_FORWARD>
void FOLLOW_ONE_NODE(unsigned char direction)
{
	count = 0;
	if(direction == FORWARD)
	{
		while (count == 0)
     db6:	80 91 df 00 	lds	r24, 0x00DF
     dba:	88 23       	and	r24, r24
     dbc:	d1 f3       	breq	.-12     	; 0xdb2 <FOLLOW_ONE_NODE+0x8>
     dbe:	08 95       	ret
		{
			FOLLOW_LINE_FORWARD();
		}
		
	}
	else if(direction == BACKWARD)
     dc0:	83 30       	cpi	r24, 0x03	; 3
     dc2:	31 f4       	brne	.+12     	; 0xdd0 <FOLLOW_ONE_NODE+0x26>
	{
		while(count ==0 )
		{
			FOLLOW_LINE_BACKWARD();
     dc4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <FOLLOW_LINE_BACKWARD>
		}
		
	}
	else if(direction == BACKWARD)
	{
		while(count ==0 )
     dc8:	80 91 df 00 	lds	r24, 0x00DF
     dcc:	88 23       	and	r24, r24
     dce:	d1 f3       	breq	.-12     	; 0xdc4 <FOLLOW_ONE_NODE+0x1a>
     dd0:	08 95       	ret

00000dd2 <MOVE_NEXT_NODE>:
	}
}

void MOVE_NEXT_NODE(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{	
	if(x2==x1 && y2==y1)
     dd2:	48 13       	cpse	r20, r24
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <MOVE_NEXT_NODE+0xc>
     dd6:	26 13       	cpse	r18, r22
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <MOVE_NEXT_NODE+0xc>
	{
		MOTOR_PORT = 0x00;
     dda:	12 ba       	out	0x12, r1	; 18
     ddc:	08 95       	ret
	}
	if(y2>y1)
     dde:	62 17       	cp	r22, r18
     de0:	18 f5       	brcc	.+70     	; 0xe28 <MOVE_NEXT_NODE+0x56>
	{
		if(dir == 'N')
     de2:	80 91 62 00 	lds	r24, 0x0062
     de6:	8e 34       	cpi	r24, 0x4E	; 78
     de8:	21 f4       	brne	.+8      	; 0xdf2 <MOVE_NEXT_NODE+0x20>
		{
			FOLLOW_ONE_NODE(FORWARD);
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     df0:	08 95       	ret
		}
		else if(dir == 'E' )
     df2:	85 34       	cpi	r24, 0x45	; 69
     df4:	39 f4       	brne	.+14     	; 0xe04 <MOVE_NEXT_NODE+0x32>
		{
			TURN_90(LEFT);
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     e02:	08 95       	ret
		}
		else if(dir == 'W')
     e04:	87 35       	cpi	r24, 0x57	; 87
     e06:	39 f4       	brne	.+14     	; 0xe16 <MOVE_NEXT_NODE+0x44>
		{
			TURN_90(RIGHT);
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     e14:	08 95       	ret
		}
		else if(dir == 'S')
     e16:	83 35       	cpi	r24, 0x53	; 83
     e18:	09 f0       	breq	.+2      	; 0xe1c <MOVE_NEXT_NODE+0x4a>
     e1a:	72 c0       	rjmp	.+228    	; 0xf00 <MOVE_NEXT_NODE+0x12e>
		{
			TURN_180();
     e1c:	0e 94 96 02 	call	0x52c	; 0x52c <TURN_180>
			FOLLOW_ONE_NODE(FORWARD);
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     e26:	08 95       	ret
		}
		
	}
	else if(y2<y1)
     e28:	26 17       	cp	r18, r22
     e2a:	18 f5       	brcc	.+70     	; 0xe72 <MOVE_NEXT_NODE+0xa0>
	{
		if(dir == 'N')
     e2c:	80 91 62 00 	lds	r24, 0x0062
     e30:	8e 34       	cpi	r24, 0x4E	; 78
     e32:	31 f4       	brne	.+12     	; 0xe40 <MOVE_NEXT_NODE+0x6e>
		{
			TURN_180();
     e34:	0e 94 96 02 	call	0x52c	; 0x52c <TURN_180>
			FOLLOW_ONE_NODE(FORWARD);
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     e3e:	08 95       	ret
		}
		else if(dir == 'E' )
     e40:	85 34       	cpi	r24, 0x45	; 69
     e42:	39 f4       	brne	.+14     	; 0xe52 <MOVE_NEXT_NODE+0x80>
		{
			TURN_90(RIGHT);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     e50:	08 95       	ret
		}
		else if(dir == 'W')
     e52:	87 35       	cpi	r24, 0x57	; 87
     e54:	39 f4       	brne	.+14     	; 0xe64 <MOVE_NEXT_NODE+0x92>
		{
			TURN_90(LEFT);
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     e62:	08 95       	ret
		}
		else if(dir == 'S')
     e64:	83 35       	cpi	r24, 0x53	; 83
     e66:	09 f0       	breq	.+2      	; 0xe6a <MOVE_NEXT_NODE+0x98>
     e68:	4b c0       	rjmp	.+150    	; 0xf00 <MOVE_NEXT_NODE+0x12e>
		{
			FOLLOW_ONE_NODE(FORWARD);
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     e70:	08 95       	ret
		}
	}
	else if(x2>x1)
     e72:	84 17       	cp	r24, r20
     e74:	10 f5       	brcc	.+68     	; 0xeba <MOVE_NEXT_NODE+0xe8>
	{
		if(dir == 'N')
     e76:	80 91 62 00 	lds	r24, 0x0062
     e7a:	8e 34       	cpi	r24, 0x4E	; 78
     e7c:	39 f4       	brne	.+14     	; 0xe8c <MOVE_NEXT_NODE+0xba>
		{
			TURN_90(LEFT);
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     e8a:	08 95       	ret
		}
		else if(dir == 'E' )
     e8c:	85 34       	cpi	r24, 0x45	; 69
     e8e:	31 f4       	brne	.+12     	; 0xe9c <MOVE_NEXT_NODE+0xca>
		{
			TURN_180();
     e90:	0e 94 96 02 	call	0x52c	; 0x52c <TURN_180>
			FOLLOW_ONE_NODE(FORWARD);
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     e9a:	08 95       	ret
		}
		else if(dir == 'W')
     e9c:	87 35       	cpi	r24, 0x57	; 87
     e9e:	21 f4       	brne	.+8      	; 0xea8 <MOVE_NEXT_NODE+0xd6>
		{
			FOLLOW_ONE_NODE(FORWARD);
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     ea6:	08 95       	ret
		}
		else if(dir == 'S')
     ea8:	83 35       	cpi	r24, 0x53	; 83
     eaa:	51 f5       	brne	.+84     	; 0xf00 <MOVE_NEXT_NODE+0x12e>
		{
			TURN_90(RIGHT);
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     eb8:	08 95       	ret
		}
	}
	else if(x2<x1)
     eba:	48 17       	cp	r20, r24
     ebc:	08 f5       	brcc	.+66     	; 0xf00 <MOVE_NEXT_NODE+0x12e>
	{
		if(dir == 'N')
     ebe:	80 91 62 00 	lds	r24, 0x0062
     ec2:	8e 34       	cpi	r24, 0x4E	; 78
     ec4:	39 f4       	brne	.+14     	; 0xed4 <MOVE_NEXT_NODE+0x102>
		{
			TURN_90(RIGHT);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     ed2:	08 95       	ret
		}
		else if(dir == 'E' )
     ed4:	85 34       	cpi	r24, 0x45	; 69
     ed6:	21 f4       	brne	.+8      	; 0xee0 <MOVE_NEXT_NODE+0x10e>
		{
			FOLLOW_ONE_NODE(FORWARD);
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     ede:	08 95       	ret
		}
		else if(dir == 'W')
     ee0:	87 35       	cpi	r24, 0x57	; 87
     ee2:	31 f4       	brne	.+12     	; 0xef0 <MOVE_NEXT_NODE+0x11e>
		{
			TURN_180();
     ee4:	0e 94 96 02 	call	0x52c	; 0x52c <TURN_180>
			FOLLOW_ONE_NODE(FORWARD);
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     eee:	08 95       	ret
		}
		else if(dir == 'S')
     ef0:	83 35       	cpi	r24, 0x53	; 83
     ef2:	31 f4       	brne	.+12     	; 0xf00 <MOVE_NEXT_NODE+0x12e>
		{
			TURN_90(LEFT);
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TURN_90>
			FOLLOW_ONE_NODE(FORWARD);
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
     f00:	08 95       	ret

00000f02 <DIGKSTRA>:
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
{
     f02:	2f 92       	push	r2
     f04:	3f 92       	push	r3
     f06:	4f 92       	push	r4
     f08:	5f 92       	push	r5
     f0a:	6f 92       	push	r6
     f0c:	7f 92       	push	r7
     f0e:	8f 92       	push	r8
     f10:	9f 92       	push	r9
     f12:	af 92       	push	r10
     f14:	bf 92       	push	r11
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	c1 57       	subi	r28, 0x71	; 113
     f2c:	d1 09       	sbc	r29, r1
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	e0 96       	adiw	r28, 0x30	; 48
     f3a:	4f af       	std	Y+63, r20	; 0x3f
     f3c:	e0 97       	sbiw	r28, 0x30	; 48
     f3e:	e1 96       	adiw	r28, 0x31	; 49
     f40:	2f af       	std	Y+63, r18	; 0x3f
     f42:	e1 97       	sbiw	r28, 0x31	; 49
     f44:	e2 96       	adiw	r28, 0x32	; 50
     f46:	0f af       	std	Y+63, r16	; 0x3f
     f48:	e2 97       	sbiw	r28, 0x32	; 50
{
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	16 e4       	ldi	r17, 0x46	; 70
     f50:	70 e0       	ldi	r23, 0x00	; 0
	unsigned char tempDistance = 0;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details2[i][j].distance = INFINITE;
     f52:	54 e1       	ldi	r21, 0x14	; 20
     f54:	13 c0       	rjmp	.+38     	; 0xf7c <DIGKSTRA+0x7a>
{
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
     f56:	df 01       	movw	r26, r30
     f58:	11 97       	sbiw	r26, 0x01	; 1
	unsigned char tempDistance = 0;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details2[i][j].distance = INFINITE;
     f5a:	5c 93       	st	X, r21
			details2[i][j].visit = FALSE;
     f5c:	10 82       	st	Z, r1
{
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
     f5e:	df 01       	movw	r26, r30
     f60:	13 97       	sbiw	r26, 0x03	; 3
	{
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details2[i][j].distance = INFINITE;
			details2[i][j].visit = FALSE;
			details2[i][j].X = i;
     f62:	4c 93       	st	X, r20
{
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
     f64:	df 01       	movw	r26, r30
     f66:	12 97       	sbiw	r26, 0x02	; 2
		for(j=0;j<MAX_GRID_Y;j++)
		{
			details2[i][j].distance = INFINITE;
			details2[i][j].visit = FALSE;
			details2[i][j].X = i;
			details2[i][j].Y = j;
     f68:	9c 93       	st	X, r25
	STRUCTURE dqued, pathQUEUE[10];
	unsigned char tempX = 0, tempY = 0;
	unsigned char tempDistance = 0;
	for(i=0;i<MAX_GRID_X;i++)
	{
		for(j=0;j<MAX_GRID_Y;j++)
     f6a:	9f 5f       	subi	r25, 0xFF	; 255
     f6c:	3a 96       	adiw	r30, 0x0a	; 10
     f6e:	97 30       	cpi	r25, 0x07	; 7
     f70:	91 f7       	brne	.-28     	; 0xf56 <DIGKSTRA+0x54>
     f72:	2f 5f       	subi	r18, 0xFF	; 255
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
{
	unsigned char i,j;
	STRUCTURE dqued, pathQUEUE[10];
	unsigned char tempX = 0, tempY = 0;
	unsigned char tempDistance = 0;
	for(i=0;i<MAX_GRID_X;i++)
     f76:	23 30       	cpi	r18, 0x03	; 3
     f78:	31 05       	cpc	r19, r1
     f7a:	51 f0       	breq	.+20     	; 0xf90 <DIGKSTRA+0x8e>
     f7c:	42 2f       	mov	r20, r18
{
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
     f7e:	12 9f       	mul	r17, r18
     f80:	f0 01       	movw	r30, r0
     f82:	13 9f       	mul	r17, r19
     f84:	f0 0d       	add	r31, r0
     f86:	11 24       	eor	r1, r1
     f88:	e5 5e       	subi	r30, 0xE5	; 229
     f8a:	fe 4f       	sbci	r31, 0xFE	; 254
     f8c:	97 2f       	mov	r25, r23
     f8e:	e3 cf       	rjmp	.-58     	; 0xf56 <DIGKSTRA+0x54>
			details2[i][j].visit = FALSE;
			details2[i][j].X = i;
			details2[i][j].Y = j;
		}
	}
	details2[x1][y1].distance = 0;
     f90:	26 2f       	mov	r18, r22
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	22 0f       	add	r18, r18
     f96:	33 1f       	adc	r19, r19
     f98:	f9 01       	movw	r30, r18
     f9a:	ee 0f       	add	r30, r30
     f9c:	ff 1f       	adc	r31, r31
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	2e 0f       	add	r18, r30
     fa4:	3f 1f       	adc	r19, r31
     fa6:	46 e4       	ldi	r20, 0x46	; 70
     fa8:	84 9f       	mul	r24, r20
     faa:	c0 01       	movw	r24, r0
     fac:	11 24       	eor	r1, r1
     fae:	f9 01       	movw	r30, r18
     fb0:	e8 0f       	add	r30, r24
     fb2:	f9 1f       	adc	r31, r25
     fb4:	ea 5e       	subi	r30, 0xEA	; 234
     fb6:	fe 4f       	sbci	r31, 0xFE	; 254
     fb8:	14 82       	std	Z+4, r1	; 0x04
	details2[x1][y1].visit = TRUE;
     fba:	26 2f       	mov	r18, r22
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	f9 01       	movw	r30, r18
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	ee 0f       	add	r30, r30
     fca:	ff 1f       	adc	r31, r31
     fcc:	2e 0f       	add	r18, r30
     fce:	3f 1f       	adc	r19, r31
     fd0:	f9 01       	movw	r30, r18
     fd2:	e8 0f       	add	r30, r24
     fd4:	f9 1f       	adc	r31, r25
     fd6:	ea 5e       	subi	r30, 0xEA	; 234
     fd8:	fe 4f       	sbci	r31, 0xFE	; 254
     fda:	21 e0       	ldi	r18, 0x01	; 1
     fdc:	25 83       	std	Z+5, r18	; 0x05
	Qfront=0; Qrear=0;
     fde:	10 92 d9 00 	sts	0x00D9, r1
     fe2:	10 92 d8 00 	sts	0x00D8, r1
	
	ENQUEUE(details2[x1][y1]);
     fe6:	26 2f       	mov	r18, r22
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	f9 01       	movw	r30, r18
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	2e 0f       	add	r18, r30
     ffa:	3f 1f       	adc	r19, r31
     ffc:	f9 01       	movw	r30, r18
     ffe:	e8 0f       	add	r30, r24
    1000:	f9 1f       	adc	r31, r25
    1002:	ea 5e       	subi	r30, 0xEA	; 234
    1004:	fe 4f       	sbci	r31, 0xFE	; 254
    1006:	00 81       	ld	r16, Z
    1008:	11 81       	ldd	r17, Z+1	; 0x01
    100a:	22 81       	ldd	r18, Z+2	; 0x02
    100c:	33 81       	ldd	r19, Z+3	; 0x03
    100e:	44 81       	ldd	r20, Z+4	; 0x04
    1010:	55 81       	ldd	r21, Z+5	; 0x05
    1012:	66 81       	ldd	r22, Z+6	; 0x06
    1014:	77 81       	ldd	r23, Z+7	; 0x07
    1016:	80 85       	ldd	r24, Z+8	; 0x08
    1018:	91 85       	ldd	r25, Z+9	; 0x09
    101a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <ENQUEUE>
	while(Qrear != 20)
	{
		dqued = DEQUEUE();
		tempX = dqued.X;
		tempY = dqued.Y;
		if((tempY+1 < MAX_GRID_Y) && details2[tempX][tempY+1].visit == FALSE && details2[tempX][tempY+1].status != DESTINATION)
    101e:	0f 2e       	mov	r0, r31
    1020:	f6 e4       	ldi	r31, 0x46	; 70
    1022:	7f 2e       	mov	r7, r31
    1024:	f0 2d       	mov	r31, r0
			}
			else
			{*/
				ENQUEUE(details2[tempX][tempY+1]);
				tempDistance = details2[tempX][tempY].distance+1;
				details2[tempX][tempY+1].visit = TRUE;
    1026:	44 24       	eor	r4, r4
    1028:	43 94       	inc	r4
	details2[x1][y1].distance = 0;
	details2[x1][y1].visit = TRUE;
	Qfront=0; Qrear=0;
	
	ENQUEUE(details2[x1][y1]);
	while(Qrear != 20)
    102a:	a3 c1       	rjmp	.+838    	; 0x1372 <DIGKSTRA+0x470>
	{
		dqued = DEQUEUE();
    102c:	ce 01       	movw	r24, r28
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	0e 94 26 03 	call	0x64c	; 0x64c <DEQUEUE>
		tempX = dqued.X;
    1034:	6b 80       	ldd	r6, Y+3	; 0x03
		tempY = dqued.Y;
    1036:	5c 80       	ldd	r5, Y+4	; 0x04
		if((tempY+1 < MAX_GRID_Y) && details2[tempX][tempY+1].visit == FALSE && details2[tempX][tempY+1].status != DESTINATION)
    1038:	e5 2c       	mov	r14, r5
    103a:	f1 2c       	mov	r15, r1
    103c:	67 01       	movw	r12, r14
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	c8 1a       	sub	r12, r24
    1042:	d8 0a       	sbc	r13, r24
    1044:	97 e0       	ldi	r25, 0x07	; 7
    1046:	c9 16       	cp	r12, r25
    1048:	d1 04       	cpc	r13, r1
    104a:	0c f0       	brlt	.+2      	; 0x104e <DIGKSTRA+0x14c>
    104c:	5e c0       	rjmp	.+188    	; 0x110a <DIGKSTRA+0x208>
    104e:	f6 01       	movw	r30, r12
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	c6 01       	movw	r24, r12
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	e8 0f       	add	r30, r24
    1064:	f9 1f       	adc	r31, r25
    1066:	86 2c       	mov	r8, r6
    1068:	91 2c       	mov	r9, r1
    106a:	76 9c       	mul	r7, r6
    106c:	e0 0d       	add	r30, r0
    106e:	f1 1d       	adc	r31, r1
    1070:	11 24       	eor	r1, r1
    1072:	ea 5e       	subi	r30, 0xEA	; 234
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	85 81       	ldd	r24, Z+5	; 0x05
    1078:	81 11       	cpse	r24, r1
    107a:	47 c0       	rjmp	.+142    	; 0x110a <DIGKSTRA+0x208>
    107c:	f6 01       	movw	r30, r12
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	c6 01       	movw	r24, r12
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	e8 0f       	add	r30, r24
    1092:	f9 1f       	adc	r31, r25
    1094:	78 9c       	mul	r7, r8
    1096:	c0 01       	movw	r24, r0
    1098:	79 9c       	mul	r7, r9
    109a:	90 0d       	add	r25, r0
    109c:	11 24       	eor	r1, r1
    109e:	e8 0f       	add	r30, r24
    10a0:	f9 1f       	adc	r31, r25
    10a2:	ea 5e       	subi	r30, 0xEA	; 234
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	80 81       	ld	r24, Z
    10a8:	83 30       	cpi	r24, 0x03	; 3
    10aa:	79 f1       	breq	.+94     	; 0x110a <DIGKSTRA+0x208>
			{
				;
			}
			else
			{*/
				ENQUEUE(details2[tempX][tempY+1]);
    10ac:	78 9c       	mul	r7, r8
    10ae:	10 01       	movw	r2, r0
    10b0:	79 9c       	mul	r7, r9
    10b2:	30 0c       	add	r3, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	5f 01       	movw	r10, r30
    10b8:	00 81       	ld	r16, Z
    10ba:	11 81       	ldd	r17, Z+1	; 0x01
    10bc:	22 81       	ldd	r18, Z+2	; 0x02
    10be:	33 81       	ldd	r19, Z+3	; 0x03
    10c0:	44 81       	ldd	r20, Z+4	; 0x04
    10c2:	55 81       	ldd	r21, Z+5	; 0x05
    10c4:	66 81       	ldd	r22, Z+6	; 0x06
    10c6:	77 81       	ldd	r23, Z+7	; 0x07
    10c8:	80 85       	ldd	r24, Z+8	; 0x08
    10ca:	91 85       	ldd	r25, Z+9	; 0x09
    10cc:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <ENQUEUE>
				tempDistance = details2[tempX][tempY].distance+1;
    10d0:	f7 01       	movw	r30, r14
    10d2:	ee 0f       	add	r30, r30
    10d4:	ff 1f       	adc	r31, r31
    10d6:	c7 01       	movw	r24, r14
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	e8 0f       	add	r30, r24
    10e6:	f9 1f       	adc	r31, r25
    10e8:	e2 0d       	add	r30, r2
    10ea:	f3 1d       	adc	r31, r3
    10ec:	ea 5e       	subi	r30, 0xEA	; 234
    10ee:	fe 4f       	sbci	r31, 0xFE	; 254
    10f0:	24 81       	ldd	r18, Z+4	; 0x04
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
				details2[tempX][tempY+1].visit = TRUE;
    10f4:	f5 01       	movw	r30, r10
    10f6:	45 82       	std	Z+5, r4	; 0x05
				if(tempDistance < details2[tempX][tempY+1].distance)
    10f8:	84 81       	ldd	r24, Z+4	; 0x04
    10fa:	28 17       	cp	r18, r24
    10fc:	30 f4       	brcc	.+12     	; 0x110a <DIGKSTRA+0x208>
				{
					details2[tempX][tempY+1].distance =  tempDistance;
    10fe:	f5 01       	movw	r30, r10
    1100:	24 83       	std	Z+4, r18	; 0x04
					details2[tempX][tempY+1].prevX= tempX;
    1102:	66 82       	std	Z+6, r6	; 0x06
    1104:	17 82       	std	Z+7, r1	; 0x07
					details2[tempX][tempY+1].prevY= tempY;
    1106:	50 86       	std	Z+8, r5	; 0x08
    1108:	11 86       	std	Z+9, r1	; 0x09
				}
			//}
		}
		
		if((tempX-1 >= 0) && details2[tempX-1][tempY].visit == FALSE && details2[tempX-1][tempY].status != DESTINATION)
    110a:	a6 2c       	mov	r10, r6
    110c:	b1 2c       	mov	r11, r1
    110e:	65 01       	movw	r12, r10
    1110:	f1 e0       	ldi	r31, 0x01	; 1
    1112:	cf 1a       	sub	r12, r31
    1114:	d1 08       	sbc	r13, r1
    1116:	0a f4       	brpl	.+2      	; 0x111a <DIGKSTRA+0x218>
    1118:	5f c0       	rjmp	.+190    	; 0x11d8 <DIGKSTRA+0x2d6>
    111a:	f7 01       	movw	r30, r14
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	c7 01       	movw	r24, r14
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	e8 0f       	add	r30, r24
    1130:	f9 1f       	adc	r31, r25
    1132:	7c 9c       	mul	r7, r12
    1134:	c0 01       	movw	r24, r0
    1136:	7d 9c       	mul	r7, r13
    1138:	90 0d       	add	r25, r0
    113a:	11 24       	eor	r1, r1
    113c:	e8 0f       	add	r30, r24
    113e:	f9 1f       	adc	r31, r25
    1140:	ea 5e       	subi	r30, 0xEA	; 234
    1142:	fe 4f       	sbci	r31, 0xFE	; 254
    1144:	85 81       	ldd	r24, Z+5	; 0x05
    1146:	81 11       	cpse	r24, r1
    1148:	47 c0       	rjmp	.+142    	; 0x11d8 <DIGKSTRA+0x2d6>
    114a:	f7 01       	movw	r30, r14
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	c7 01       	movw	r24, r14
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	e8 0f       	add	r30, r24
    1160:	f9 1f       	adc	r31, r25
    1162:	7c 9c       	mul	r7, r12
    1164:	c0 01       	movw	r24, r0
    1166:	7d 9c       	mul	r7, r13
    1168:	90 0d       	add	r25, r0
    116a:	11 24       	eor	r1, r1
    116c:	e8 0f       	add	r30, r24
    116e:	f9 1f       	adc	r31, r25
    1170:	ea 5e       	subi	r30, 0xEA	; 234
    1172:	fe 4f       	sbci	r31, 0xFE	; 254
    1174:	80 81       	ld	r24, Z
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	79 f1       	breq	.+94     	; 0x11d8 <DIGKSTRA+0x2d6>
			{
				;
			}
			else
			{*/
				ENQUEUE(details2[tempX-1][tempY]);
    117a:	17 01       	movw	r2, r14
    117c:	22 0c       	add	r2, r2
    117e:	33 1c       	adc	r3, r3
    1180:	c7 01       	movw	r24, r14
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	28 0e       	add	r2, r24
    1190:	39 1e       	adc	r3, r25
    1192:	4f 01       	movw	r8, r30
    1194:	00 81       	ld	r16, Z
    1196:	11 81       	ldd	r17, Z+1	; 0x01
    1198:	22 81       	ldd	r18, Z+2	; 0x02
    119a:	33 81       	ldd	r19, Z+3	; 0x03
    119c:	44 81       	ldd	r20, Z+4	; 0x04
    119e:	55 81       	ldd	r21, Z+5	; 0x05
    11a0:	66 81       	ldd	r22, Z+6	; 0x06
    11a2:	77 81       	ldd	r23, Z+7	; 0x07
    11a4:	80 85       	ldd	r24, Z+8	; 0x08
    11a6:	91 85       	ldd	r25, Z+9	; 0x09
    11a8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <ENQUEUE>
				tempDistance = details2[tempX][tempY].distance+1;
    11ac:	7a 9c       	mul	r7, r10
    11ae:	f0 01       	movw	r30, r0
    11b0:	7b 9c       	mul	r7, r11
    11b2:	f0 0d       	add	r31, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	e2 0d       	add	r30, r2
    11b8:	f3 1d       	adc	r31, r3
    11ba:	ea 5e       	subi	r30, 0xEA	; 234
    11bc:	fe 4f       	sbci	r31, 0xFE	; 254
    11be:	24 81       	ldd	r18, Z+4	; 0x04
    11c0:	2f 5f       	subi	r18, 0xFF	; 255
				details2[tempX-1][tempY].visit = TRUE;
    11c2:	f4 01       	movw	r30, r8
    11c4:	45 82       	std	Z+5, r4	; 0x05
				if(tempDistance < details2[tempX-1][tempY].distance)
    11c6:	84 81       	ldd	r24, Z+4	; 0x04
    11c8:	28 17       	cp	r18, r24
    11ca:	30 f4       	brcc	.+12     	; 0x11d8 <DIGKSTRA+0x2d6>
				{
					details2[tempX-1][tempY].distance =  tempDistance;
    11cc:	f4 01       	movw	r30, r8
    11ce:	24 83       	std	Z+4, r18	; 0x04
					details2[tempX-1][tempY].prevX= tempX;
    11d0:	66 82       	std	Z+6, r6	; 0x06
    11d2:	17 82       	std	Z+7, r1	; 0x07
					details2[tempX-1][tempY].prevY= tempY;
    11d4:	50 86       	std	Z+8, r5	; 0x08
    11d6:	11 86       	std	Z+9, r1	; 0x09
				}
			//}
		}
		
		if((tempY-1 >= 0) && details2[tempX][tempY-1].visit == FALSE && details2[tempX][tempY-1].status != DESTINATION)
    11d8:	67 01       	movw	r12, r14
    11da:	f1 e0       	ldi	r31, 0x01	; 1
    11dc:	cf 1a       	sub	r12, r31
    11de:	d1 08       	sbc	r13, r1
    11e0:	0a f4       	brpl	.+2      	; 0x11e4 <DIGKSTRA+0x2e2>
    11e2:	5f c0       	rjmp	.+190    	; 0x12a2 <DIGKSTRA+0x3a0>
    11e4:	f6 01       	movw	r30, r12
    11e6:	ee 0f       	add	r30, r30
    11e8:	ff 1f       	adc	r31, r31
    11ea:	c6 01       	movw	r24, r12
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	e8 0f       	add	r30, r24
    11fa:	f9 1f       	adc	r31, r25
    11fc:	7a 9c       	mul	r7, r10
    11fe:	c0 01       	movw	r24, r0
    1200:	7b 9c       	mul	r7, r11
    1202:	90 0d       	add	r25, r0
    1204:	11 24       	eor	r1, r1
    1206:	e8 0f       	add	r30, r24
    1208:	f9 1f       	adc	r31, r25
    120a:	ea 5e       	subi	r30, 0xEA	; 234
    120c:	fe 4f       	sbci	r31, 0xFE	; 254
    120e:	85 81       	ldd	r24, Z+5	; 0x05
    1210:	81 11       	cpse	r24, r1
    1212:	47 c0       	rjmp	.+142    	; 0x12a2 <DIGKSTRA+0x3a0>
    1214:	f6 01       	movw	r30, r12
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	c6 01       	movw	r24, r12
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	e8 0f       	add	r30, r24
    122a:	f9 1f       	adc	r31, r25
    122c:	7a 9c       	mul	r7, r10
    122e:	c0 01       	movw	r24, r0
    1230:	7b 9c       	mul	r7, r11
    1232:	90 0d       	add	r25, r0
    1234:	11 24       	eor	r1, r1
    1236:	e8 0f       	add	r30, r24
    1238:	f9 1f       	adc	r31, r25
    123a:	ea 5e       	subi	r30, 0xEA	; 234
    123c:	fe 4f       	sbci	r31, 0xFE	; 254
    123e:	80 81       	ld	r24, Z
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	79 f1       	breq	.+94     	; 0x12a2 <DIGKSTRA+0x3a0>
			{
				;
			}
			else
			{*/
				ENQUEUE(details2[tempX][tempY-1]);
    1244:	7a 9c       	mul	r7, r10
    1246:	10 01       	movw	r2, r0
    1248:	7b 9c       	mul	r7, r11
    124a:	30 0c       	add	r3, r0
    124c:	11 24       	eor	r1, r1
    124e:	4f 01       	movw	r8, r30
    1250:	00 81       	ld	r16, Z
    1252:	11 81       	ldd	r17, Z+1	; 0x01
    1254:	22 81       	ldd	r18, Z+2	; 0x02
    1256:	33 81       	ldd	r19, Z+3	; 0x03
    1258:	44 81       	ldd	r20, Z+4	; 0x04
    125a:	55 81       	ldd	r21, Z+5	; 0x05
    125c:	66 81       	ldd	r22, Z+6	; 0x06
    125e:	77 81       	ldd	r23, Z+7	; 0x07
    1260:	80 85       	ldd	r24, Z+8	; 0x08
    1262:	91 85       	ldd	r25, Z+9	; 0x09
    1264:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <ENQUEUE>
				tempDistance = details2[tempX][tempY].distance+1;
    1268:	f7 01       	movw	r30, r14
    126a:	ee 0f       	add	r30, r30
    126c:	ff 1f       	adc	r31, r31
    126e:	c7 01       	movw	r24, r14
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	e8 0f       	add	r30, r24
    127e:	f9 1f       	adc	r31, r25
    1280:	e2 0d       	add	r30, r2
    1282:	f3 1d       	adc	r31, r3
    1284:	ea 5e       	subi	r30, 0xEA	; 234
    1286:	fe 4f       	sbci	r31, 0xFE	; 254
    1288:	24 81       	ldd	r18, Z+4	; 0x04
    128a:	2f 5f       	subi	r18, 0xFF	; 255
				details2[tempX][tempY-1].visit = TRUE;
    128c:	f4 01       	movw	r30, r8
    128e:	45 82       	std	Z+5, r4	; 0x05
				if(tempDistance < details2[tempX][tempY-1].distance)
    1290:	84 81       	ldd	r24, Z+4	; 0x04
    1292:	28 17       	cp	r18, r24
    1294:	30 f4       	brcc	.+12     	; 0x12a2 <DIGKSTRA+0x3a0>
				{
					details2[tempX][tempY-1].distance =  tempDistance;
    1296:	f4 01       	movw	r30, r8
    1298:	24 83       	std	Z+4, r18	; 0x04
					details2[tempX][tempY-1].prevX= tempX;
    129a:	66 82       	std	Z+6, r6	; 0x06
    129c:	17 82       	std	Z+7, r1	; 0x07
					details2[tempX][tempY-1].prevY= tempY;
    129e:	50 86       	std	Z+8, r5	; 0x08
    12a0:	11 86       	std	Z+9, r1	; 0x09
				}
			//}
		}
		
		if((tempX+1 < MAX_GRID_X) && details2[tempX+1][tempY].visit == FALSE && details2[tempX+1][tempY].status != DESTINATION)
    12a2:	65 01       	movw	r12, r10
    12a4:	ff ef       	ldi	r31, 0xFF	; 255
    12a6:	cf 1a       	sub	r12, r31
    12a8:	df 0a       	sbc	r13, r31
    12aa:	23 e0       	ldi	r18, 0x03	; 3
    12ac:	c2 16       	cp	r12, r18
    12ae:	d1 04       	cpc	r13, r1
    12b0:	0c f0       	brlt	.+2      	; 0x12b4 <DIGKSTRA+0x3b2>
    12b2:	5f c0       	rjmp	.+190    	; 0x1372 <DIGKSTRA+0x470>
    12b4:	f7 01       	movw	r30, r14
    12b6:	ee 0f       	add	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	c7 01       	movw	r24, r14
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	e8 0f       	add	r30, r24
    12ca:	f9 1f       	adc	r31, r25
    12cc:	7c 9c       	mul	r7, r12
    12ce:	c0 01       	movw	r24, r0
    12d0:	7d 9c       	mul	r7, r13
    12d2:	90 0d       	add	r25, r0
    12d4:	11 24       	eor	r1, r1
    12d6:	e8 0f       	add	r30, r24
    12d8:	f9 1f       	adc	r31, r25
    12da:	ea 5e       	subi	r30, 0xEA	; 234
    12dc:	fe 4f       	sbci	r31, 0xFE	; 254
    12de:	85 81       	ldd	r24, Z+5	; 0x05
    12e0:	81 11       	cpse	r24, r1
    12e2:	47 c0       	rjmp	.+142    	; 0x1372 <DIGKSTRA+0x470>
    12e4:	f7 01       	movw	r30, r14
    12e6:	ee 0f       	add	r30, r30
    12e8:	ff 1f       	adc	r31, r31
    12ea:	c7 01       	movw	r24, r14
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	e8 0f       	add	r30, r24
    12fa:	f9 1f       	adc	r31, r25
    12fc:	7c 9c       	mul	r7, r12
    12fe:	c0 01       	movw	r24, r0
    1300:	7d 9c       	mul	r7, r13
    1302:	90 0d       	add	r25, r0
    1304:	11 24       	eor	r1, r1
    1306:	e8 0f       	add	r30, r24
    1308:	f9 1f       	adc	r31, r25
    130a:	ea 5e       	subi	r30, 0xEA	; 234
    130c:	fe 4f       	sbci	r31, 0xFE	; 254
    130e:	80 81       	ld	r24, Z
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	79 f1       	breq	.+94     	; 0x1372 <DIGKSTRA+0x470>
			{
				;
			}
			else
			{*/
				ENQUEUE(details2[tempX+1][tempY]);
    1314:	17 01       	movw	r2, r14
    1316:	22 0c       	add	r2, r2
    1318:	33 1c       	adc	r3, r3
    131a:	c7 01       	movw	r24, r14
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	28 0e       	add	r2, r24
    132a:	39 1e       	adc	r3, r25
    132c:	4f 01       	movw	r8, r30
    132e:	00 81       	ld	r16, Z
    1330:	11 81       	ldd	r17, Z+1	; 0x01
    1332:	22 81       	ldd	r18, Z+2	; 0x02
    1334:	33 81       	ldd	r19, Z+3	; 0x03
    1336:	44 81       	ldd	r20, Z+4	; 0x04
    1338:	55 81       	ldd	r21, Z+5	; 0x05
    133a:	66 81       	ldd	r22, Z+6	; 0x06
    133c:	77 81       	ldd	r23, Z+7	; 0x07
    133e:	80 85       	ldd	r24, Z+8	; 0x08
    1340:	91 85       	ldd	r25, Z+9	; 0x09
    1342:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <ENQUEUE>
				tempDistance = details2[tempX][tempY].distance+1;
    1346:	7a 9c       	mul	r7, r10
    1348:	f0 01       	movw	r30, r0
    134a:	7b 9c       	mul	r7, r11
    134c:	f0 0d       	add	r31, r0
    134e:	11 24       	eor	r1, r1
    1350:	e2 0d       	add	r30, r2
    1352:	f3 1d       	adc	r31, r3
    1354:	ea 5e       	subi	r30, 0xEA	; 234
    1356:	fe 4f       	sbci	r31, 0xFE	; 254
    1358:	24 81       	ldd	r18, Z+4	; 0x04
    135a:	2f 5f       	subi	r18, 0xFF	; 255
				details2[tempX+1][tempY].visit = TRUE;
    135c:	f4 01       	movw	r30, r8
    135e:	45 82       	std	Z+5, r4	; 0x05
				if(tempDistance < details2[tempX+1][tempY].distance)
    1360:	84 81       	ldd	r24, Z+4	; 0x04
    1362:	28 17       	cp	r18, r24
    1364:	30 f4       	brcc	.+12     	; 0x1372 <DIGKSTRA+0x470>
				{
					details2[tempX+1][tempY].distance =  tempDistance;
    1366:	f4 01       	movw	r30, r8
    1368:	24 83       	std	Z+4, r18	; 0x04
					details2[tempX+1][tempY].prevX= tempX;
    136a:	66 82       	std	Z+6, r6	; 0x06
    136c:	17 82       	std	Z+7, r1	; 0x07
					details2[tempX+1][tempY].prevY= tempY;
    136e:	50 86       	std	Z+8, r5	; 0x08
    1370:	11 86       	std	Z+9, r1	; 0x09
	details2[x1][y1].distance = 0;
	details2[x1][y1].visit = TRUE;
	Qfront=0; Qrear=0;
	
	ENQUEUE(details2[x1][y1]);
	while(Qrear != 20)
    1372:	80 91 d8 00 	lds	r24, 0x00D8
    1376:	84 31       	cpi	r24, 0x14	; 20
    1378:	09 f0       	breq	.+2      	; 0x137c <DIGKSTRA+0x47a>
    137a:	58 ce       	rjmp	.-848    	; 0x102c <DIGKSTRA+0x12a>
				}
			//}
		}
	}

	pathQUEUE[0].X = x2;
    137c:	e0 96       	adiw	r28, 0x30	; 48
    137e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1380:	e0 97       	sbiw	r28, 0x30	; 48
    1382:	fd 87       	std	Y+13, r31	; 0x0d
	pathQUEUE[0].Y = y2;
    1384:	e1 96       	adiw	r28, 0x31	; 49
    1386:	2f ad       	ldd	r18, Y+63	; 0x3f
    1388:	e1 97       	sbiw	r28, 0x31	; 49
    138a:	2e 87       	std	Y+14, r18	; 0x0e
	tempX = pathQUEUE[0].X;
	tempY = pathQUEUE[0].Y;
	j = details2[x2][y2].distance;
    138c:	82 2f       	mov	r24, r18
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	fc 01       	movw	r30, r24
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	ee 0f       	add	r30, r30
    139c:	ff 1f       	adc	r31, r31
    139e:	8e 0f       	add	r24, r30
    13a0:	9f 1f       	adc	r25, r31
    13a2:	fc 01       	movw	r30, r24
    13a4:	e0 96       	adiw	r28, 0x30	; 48
    13a6:	4f ad       	ldd	r20, Y+63	; 0x3f
    13a8:	e0 97       	sbiw	r28, 0x30	; 48
    13aa:	36 e4       	ldi	r19, 0x46	; 70
    13ac:	43 9f       	mul	r20, r19
    13ae:	e0 0d       	add	r30, r0
    13b0:	f1 1d       	adc	r31, r1
    13b2:	11 24       	eor	r1, r1
    13b4:	ea 5e       	subi	r30, 0xEA	; 234
    13b6:	fe 4f       	sbci	r31, 0xFE	; 254
    13b8:	14 81       	ldd	r17, Z+4	; 0x04
	
	if(j>0 && j<INFINITE)
    13ba:	21 2f       	mov	r18, r17
    13bc:	21 50       	subi	r18, 0x01	; 1
    13be:	23 31       	cpi	r18, 0x13	; 19
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <DIGKSTRA+0x4c2>
    13c2:	ba c0       	rjmp	.+372    	; 0x1538 <DIGKSTRA+0x636>
	{
		for(i=1;i<=j;i++)
    13c4:	11 23       	and	r17, r17
    13c6:	09 f4       	brne	.+2      	; 0x13ca <DIGKSTRA+0x4c8>
    13c8:	bf c0       	rjmp	.+382    	; 0x1548 <DIGKSTRA+0x646>
    13ca:	fe 01       	movw	r30, r28
    13cc:	77 96       	adiw	r30, 0x17	; 23
    13ce:	6e 01       	movw	r12, r28
    13d0:	88 e1       	ldi	r24, 0x18	; 24
    13d2:	c8 0e       	add	r12, r24
    13d4:	d1 1c       	adc	r13, r1
{
	Qrear++;
	return (QUEUE[Qrear-1]);
}

unsigned char DIGKSTRA(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char MOVE)
    13d6:	82 2f       	mov	r24, r18
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	9c 01       	movw	r18, r24
    13e0:	22 0f       	add	r18, r18
    13e2:	33 1f       	adc	r19, r19
    13e4:	22 0f       	add	r18, r18
    13e6:	33 1f       	adc	r19, r19
    13e8:	82 0f       	add	r24, r18
    13ea:	93 1f       	adc	r25, r19
    13ec:	a1 e2       	ldi	r26, 0x21	; 33
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ac 0f       	add	r26, r28
    13f2:	bd 1f       	adc	r27, r29
    13f4:	8a 0f       	add	r24, r26
    13f6:	9b 1f       	adc	r25, r27
    13f8:	e1 96       	adiw	r28, 0x31	; 49
    13fa:	ff ac       	ldd	r15, Y+63	; 0x3f
    13fc:	e1 97       	sbiw	r28, 0x31	; 49
	
	if(j>0 && j<INFINITE)
	{
		for(i=1;i<=j;i++)
		{
			pathQUEUE[i].X = details2[tempX][tempY].prevX;
    13fe:	06 e4       	ldi	r16, 0x46	; 70
    1400:	2f 2d       	mov	r18, r15
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	22 0f       	add	r18, r18
    1406:	33 1f       	adc	r19, r19
    1408:	b9 01       	movw	r22, r18
    140a:	66 0f       	add	r22, r22
    140c:	77 1f       	adc	r23, r23
    140e:	66 0f       	add	r22, r22
    1410:	77 1f       	adc	r23, r23
    1412:	26 0f       	add	r18, r22
    1414:	37 1f       	adc	r19, r23
    1416:	04 9f       	mul	r16, r20
    1418:	a0 01       	movw	r20, r0
    141a:	11 24       	eor	r1, r1
    141c:	24 0f       	add	r18, r20
    141e:	35 1f       	adc	r19, r21
    1420:	2a 5e       	subi	r18, 0xEA	; 234
    1422:	3e 4f       	sbci	r19, 0xFE	; 254
    1424:	d9 01       	movw	r26, r18
    1426:	16 96       	adiw	r26, 0x06	; 6
    1428:	2c 91       	ld	r18, X
    142a:	20 83       	st	Z, r18
			pathQUEUE[i].Y = details2[tempX][tempY].prevY;
    142c:	2f 2d       	mov	r18, r15
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	22 0f       	add	r18, r18
    1432:	33 1f       	adc	r19, r19
    1434:	b9 01       	movw	r22, r18
    1436:	66 0f       	add	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	66 0f       	add	r22, r22
    143c:	77 1f       	adc	r23, r23
    143e:	26 0f       	add	r18, r22
    1440:	37 1f       	adc	r19, r23
    1442:	42 0f       	add	r20, r18
    1444:	53 1f       	adc	r21, r19
    1446:	4a 5e       	subi	r20, 0xEA	; 234
    1448:	5e 4f       	sbci	r21, 0xFE	; 254
    144a:	da 01       	movw	r26, r20
    144c:	18 96       	adiw	r26, 0x08	; 8
    144e:	fc 90       	ld	r15, X
    1450:	d6 01       	movw	r26, r12
    1452:	fc 92       	st	X, r15
			tempX = pathQUEUE[i].X;
    1454:	40 81       	ld	r20, Z
    1456:	3a 96       	adiw	r30, 0x0a	; 10
    1458:	ba e0       	ldi	r27, 0x0A	; 10
    145a:	cb 0e       	add	r12, r27
    145c:	d1 1c       	adc	r13, r1
	tempY = pathQUEUE[0].Y;
	j = details2[x2][y2].distance;
	
	if(j>0 && j<INFINITE)
	{
		for(i=1;i<=j;i++)
    145e:	e8 17       	cp	r30, r24
    1460:	f9 07       	cpc	r31, r25
    1462:	71 f6       	brne	.-100    	; 0x1400 <DIGKSTRA+0x4fe>
    1464:	6b c0       	rjmp	.+214    	; 0x153c <DIGKSTRA+0x63a>
			pathQUEUE[i].Y = details2[tempX][tempY].prevY;
			tempX = pathQUEUE[i].X;
			tempY = pathQUEUE[i].Y;
		}
		
		if(MOVE==TRUE)
    1466:	01 2f       	mov	r16, r17
		{
			for(i=j;i>0;i--)
			{
				LCD_CLEAR();
    1468:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
				LCD_SET_CURSER(2,1);
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
				LCD_DATA('(');
    1474:	88 e2       	ldi	r24, 0x28	; 40
    1476:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(pathQUEUE[i].X + 0x30);
    147a:	e0 2e       	mov	r14, r16
    147c:	f1 2c       	mov	r15, r1
    147e:	67 01       	movw	r12, r14
    1480:	cc 0c       	add	r12, r12
    1482:	dd 1c       	adc	r13, r13
    1484:	c7 01       	movw	r24, r14
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	c8 0e       	add	r12, r24
    1494:	d9 1e       	adc	r13, r25
    1496:	e1 e0       	ldi	r30, 0x01	; 1
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	ec 0f       	add	r30, r28
    149c:	fd 1f       	adc	r31, r29
    149e:	ce 0e       	add	r12, r30
    14a0:	df 1e       	adc	r13, r31
    14a2:	d6 01       	movw	r26, r12
    14a4:	1c 96       	adiw	r26, 0x0c	; 12
    14a6:	bc 90       	ld	r11, X
    14a8:	8b 2d       	mov	r24, r11
    14aa:	80 5d       	subi	r24, 0xD0	; 208
    14ac:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(',');
    14b0:	8c e2       	ldi	r24, 0x2C	; 44
    14b2:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(pathQUEUE[i].Y + 0x30);
    14b6:	f6 01       	movw	r30, r12
    14b8:	d5 84       	ldd	r13, Z+13	; 0x0d
    14ba:	8d 2d       	mov	r24, r13
    14bc:	80 5d       	subi	r24, 0xD0	; 208
    14be:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(')');
    14c2:	89 e2       	ldi	r24, 0x29	; 41
    14c4:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_PRINT(" --> ");
    14c8:	8d ec       	ldi	r24, 0xCD	; 205
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
				LCD_DATA('(');
    14d0:	88 e2       	ldi	r24, 0x28	; 40
    14d2:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(pathQUEUE[i-1].X + 0x30);
    14d6:	f1 e0       	ldi	r31, 0x01	; 1
    14d8:	ef 1a       	sub	r14, r31
    14da:	f1 08       	sbc	r15, r1
    14dc:	c7 01       	movw	r24, r14
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	ee 0c       	add	r14, r14
    14e4:	ff 1c       	adc	r15, r15
    14e6:	ee 0c       	add	r14, r14
    14e8:	ff 1c       	adc	r15, r15
    14ea:	ee 0c       	add	r14, r14
    14ec:	ff 1c       	adc	r15, r15
    14ee:	e8 0e       	add	r14, r24
    14f0:	f9 1e       	adc	r15, r25
    14f2:	21 e0       	ldi	r18, 0x01	; 1
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	2c 0f       	add	r18, r28
    14f8:	3d 1f       	adc	r19, r29
    14fa:	e2 0e       	add	r14, r18
    14fc:	f3 1e       	adc	r15, r19
    14fe:	d7 01       	movw	r26, r14
    1500:	1c 96       	adiw	r26, 0x0c	; 12
    1502:	cc 90       	ld	r12, X
    1504:	8c 2d       	mov	r24, r12
    1506:	80 5d       	subi	r24, 0xD0	; 208
    1508:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(',');
    150c:	8c e2       	ldi	r24, 0x2C	; 44
    150e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(pathQUEUE[i-1].Y + 0x30);
    1512:	f7 01       	movw	r30, r14
    1514:	f5 84       	ldd	r15, Z+13	; 0x0d
    1516:	8f 2d       	mov	r24, r15
    1518:	80 5d       	subi	r24, 0xD0	; 208
    151a:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				LCD_DATA(')');
    151e:	89 e2       	ldi	r24, 0x29	; 41
    1520:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
				MOVE_NEXT_NODE(pathQUEUE[i].X,pathQUEUE[i].Y,pathQUEUE[i-1].X,pathQUEUE[i-1].Y);
    1524:	2f 2d       	mov	r18, r15
    1526:	4c 2d       	mov	r20, r12
    1528:	6d 2d       	mov	r22, r13
    152a:	8b 2d       	mov	r24, r11
    152c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <MOVE_NEXT_NODE>
			tempY = pathQUEUE[i].Y;
		}
		
		if(MOVE==TRUE)
		{
			for(i=j;i>0;i--)
    1530:	01 50       	subi	r16, 0x01	; 1
    1532:	09 f0       	breq	.+2      	; 0x1536 <DIGKSTRA+0x634>
    1534:	99 cf       	rjmp	.-206    	; 0x1468 <DIGKSTRA+0x566>
    1536:	08 c0       	rjmp	.+16     	; 0x1548 <DIGKSTRA+0x646>
				MOVE_NEXT_NODE(pathQUEUE[i].X,pathQUEUE[i].Y,pathQUEUE[i-1].X,pathQUEUE[i-1].Y);
			}
		}
		return j;
	}
	return INFINITE;
    1538:	14 e1       	ldi	r17, 0x14	; 20
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <DIGKSTRA+0x646>
			pathQUEUE[i].Y = details2[tempX][tempY].prevY;
			tempX = pathQUEUE[i].X;
			tempY = pathQUEUE[i].Y;
		}
		
		if(MOVE==TRUE)
    153c:	e2 96       	adiw	r28, 0x32	; 50
    153e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1540:	e2 97       	sbiw	r28, 0x32	; 50
    1542:	f1 30       	cpi	r31, 0x01	; 1
    1544:	09 f4       	brne	.+2      	; 0x1548 <DIGKSTRA+0x646>
    1546:	8f cf       	rjmp	.-226    	; 0x1466 <DIGKSTRA+0x564>
			}
		}
		return j;
	}
	return INFINITE;
}
    1548:	81 2f       	mov	r24, r17
    154a:	cf 58       	subi	r28, 0x8F	; 143
    154c:	df 4f       	sbci	r29, 0xFF	; 255
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	bf 90       	pop	r11
    156a:	af 90       	pop	r10
    156c:	9f 90       	pop	r9
    156e:	8f 90       	pop	r8
    1570:	7f 90       	pop	r7
    1572:	6f 90       	pop	r6
    1574:	5f 90       	pop	r5
    1576:	4f 90       	pop	r4
    1578:	3f 90       	pop	r3
    157a:	2f 90       	pop	r2
    157c:	08 95       	ret

0000157e <DETECT_NEXT_NODE>:
		}
	}
}

void DETECT_NEXT_NODE()
{
    157e:	8f 92       	push	r8
    1580:	9f 92       	push	r9
    1582:	af 92       	push	r10
    1584:	bf 92       	push	r11
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
	unsigned char dir_count = 0;
	STRUCTURE nextNode;
	nextNode.X = X;
    1596:	b0 90 e3 00 	lds	r11, 0x00E3
	nextNode.Y = Y;
    159a:	c0 90 e2 00 	lds	r12, 0x00E2
	nextNode.priority = 0;
		
	if((X-1) >= 0 && (X-1) < MAX_GRID_X)
    159e:	6b 2d       	mov	r22, r11
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	fb 01       	movw	r30, r22
    15a4:	31 97       	sbiw	r30, 0x01	; 1
    15a6:	e3 30       	cpi	r30, 0x03	; 3
    15a8:	f1 05       	cpc	r31, r1
    15aa:	e8 f5       	brcc	.+122    	; 0x1626 <DETECT_NEXT_NODE+0xa8>
	{
		if(details1[X-1][Y].status == UNVISITED)
    15ac:	8c 2d       	mov	r24, r12
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	dc 01       	movw	r26, r24
    15b6:	aa 0f       	add	r26, r26
    15b8:	bb 1f       	adc	r27, r27
    15ba:	aa 0f       	add	r26, r26
    15bc:	bb 1f       	adc	r27, r27
    15be:	8a 0f       	add	r24, r26
    15c0:	9b 1f       	adc	r25, r27
    15c2:	46 e4       	ldi	r20, 0x46	; 70
    15c4:	4e 9f       	mul	r20, r30
    15c6:	90 01       	movw	r18, r0
    15c8:	4f 9f       	mul	r20, r31
    15ca:	30 0d       	add	r19, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	dc 01       	movw	r26, r24
    15d0:	a2 0f       	add	r26, r18
    15d2:	b3 1f       	adc	r27, r19
    15d4:	ae 51       	subi	r26, 0x1E	; 30
    15d6:	bd 4f       	sbci	r27, 0xFD	; 253
    15d8:	8c 91       	ld	r24, X
    15da:	81 11       	cpse	r24, r1
    15dc:	24 c0       	rjmp	.+72     	; 0x1626 <DETECT_NEXT_NODE+0xa8>
		{
			details1[X-1][Y].priority++;
    15de:	8c 2d       	mov	r24, r12
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	dc 01       	movw	r26, r24
    15e8:	aa 0f       	add	r26, r26
    15ea:	bb 1f       	adc	r27, r27
    15ec:	aa 0f       	add	r26, r26
    15ee:	bb 1f       	adc	r27, r27
    15f0:	8a 0f       	add	r24, r26
    15f2:	9b 1f       	adc	r25, r27
    15f4:	dc 01       	movw	r26, r24
    15f6:	a2 0f       	add	r26, r18
    15f8:	b3 1f       	adc	r27, r19
    15fa:	ae 51       	subi	r26, 0x1E	; 30
    15fc:	bd 4f       	sbci	r27, 0xFD	; 253
    15fe:	8c 2d       	mov	r24, r12
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	ec 01       	movw	r28, r24
    1608:	cc 0f       	add	r28, r28
    160a:	dd 1f       	adc	r29, r29
    160c:	cc 0f       	add	r28, r28
    160e:	dd 1f       	adc	r29, r29
    1610:	8c 0f       	add	r24, r28
    1612:	9d 1f       	adc	r25, r29
    1614:	28 0f       	add	r18, r24
    1616:	39 1f       	adc	r19, r25
    1618:	e9 01       	movw	r28, r18
    161a:	ce 51       	subi	r28, 0x1E	; 30
    161c:	dd 4f       	sbci	r29, 0xFD	; 253
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	8f 5f       	subi	r24, 0xFF	; 255
    1622:	11 96       	adiw	r26, 0x01	; 1
    1624:	8c 93       	st	X, r24
		}
	}

	if((Y-1) >= 0 && (Y-1) < MAX_GRID_Y )
    1626:	8c 2d       	mov	r24, r12
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	9c 01       	movw	r18, r24
    162c:	21 50       	subi	r18, 0x01	; 1
    162e:	31 09       	sbc	r19, r1
    1630:	27 30       	cpi	r18, 0x07	; 7
    1632:	31 05       	cpc	r19, r1
    1634:	a0 f5       	brcc	.+104    	; 0x169e <DETECT_NEXT_NODE+0x120>
	{
		if(details1[X][Y-1].status == UNVISITED)
    1636:	d9 01       	movw	r26, r18
    1638:	aa 0f       	add	r26, r26
    163a:	bb 1f       	adc	r27, r27
    163c:	a9 01       	movw	r20, r18
    163e:	44 0f       	add	r20, r20
    1640:	55 1f       	adc	r21, r21
    1642:	44 0f       	add	r20, r20
    1644:	55 1f       	adc	r21, r21
    1646:	44 0f       	add	r20, r20
    1648:	55 1f       	adc	r21, r21
    164a:	a4 0f       	add	r26, r20
    164c:	b5 1f       	adc	r27, r21
    164e:	c6 e4       	ldi	r28, 0x46	; 70
    1650:	c6 9f       	mul	r28, r22
    1652:	a0 01       	movw	r20, r0
    1654:	c7 9f       	mul	r28, r23
    1656:	50 0d       	add	r21, r0
    1658:	11 24       	eor	r1, r1
    165a:	a4 0f       	add	r26, r20
    165c:	b5 1f       	adc	r27, r21
    165e:	ae 51       	subi	r26, 0x1E	; 30
    1660:	bd 4f       	sbci	r27, 0xFD	; 253
    1662:	4c 91       	ld	r20, X
    1664:	41 11       	cpse	r20, r1
    1666:	1b c0       	rjmp	.+54     	; 0x169e <DETECT_NEXT_NODE+0x120>
		{
			details1[X][Y-1].priority++;
    1668:	d9 01       	movw	r26, r18
    166a:	aa 0f       	add	r26, r26
    166c:	bb 1f       	adc	r27, r27
    166e:	a9 01       	movw	r20, r18
    1670:	44 0f       	add	r20, r20
    1672:	55 1f       	adc	r21, r21
    1674:	44 0f       	add	r20, r20
    1676:	55 1f       	adc	r21, r21
    1678:	44 0f       	add	r20, r20
    167a:	55 1f       	adc	r21, r21
    167c:	a4 0f       	add	r26, r20
    167e:	b5 1f       	adc	r27, r21
    1680:	c6 9f       	mul	r28, r22
    1682:	a0 01       	movw	r20, r0
    1684:	c7 9f       	mul	r28, r23
    1686:	50 0d       	add	r21, r0
    1688:	11 24       	eor	r1, r1
    168a:	a4 0f       	add	r26, r20
    168c:	b5 1f       	adc	r27, r21
    168e:	ae 51       	subi	r26, 0x1E	; 30
    1690:	bd 4f       	sbci	r27, 0xFD	; 253
    1692:	11 96       	adiw	r26, 0x01	; 1
    1694:	4c 91       	ld	r20, X
    1696:	11 97       	sbiw	r26, 0x01	; 1
    1698:	4f 5f       	subi	r20, 0xFF	; 255
    169a:	11 96       	adiw	r26, 0x01	; 1
    169c:	4c 93       	st	X, r20
		}
	}

	if((X+1) > 0 && (X+1) < MAX_GRID_X)
    169e:	41 e0       	ldi	r20, 0x01	; 1
    16a0:	4b 15       	cp	r20, r11
    16a2:	b8 f1       	brcs	.+110    	; 0x1712 <DETECT_NEXT_NODE+0x194>
	{
		if(details1[X+1][Y].status == UNVISITED)
    16a4:	ab 01       	movw	r20, r22
    16a6:	4f 5f       	subi	r20, 0xFF	; 255
    16a8:	5f 4f       	sbci	r21, 0xFF	; 255
    16aa:	ec 01       	movw	r28, r24
    16ac:	cc 0f       	add	r28, r28
    16ae:	dd 1f       	adc	r29, r29
    16b0:	dc 01       	movw	r26, r24
    16b2:	aa 0f       	add	r26, r26
    16b4:	bb 1f       	adc	r27, r27
    16b6:	aa 0f       	add	r26, r26
    16b8:	bb 1f       	adc	r27, r27
    16ba:	aa 0f       	add	r26, r26
    16bc:	bb 1f       	adc	r27, r27
    16be:	ac 0f       	add	r26, r28
    16c0:	bd 1f       	adc	r27, r29
    16c2:	16 e4       	ldi	r17, 0x46	; 70
    16c4:	14 9f       	mul	r17, r20
    16c6:	e0 01       	movw	r28, r0
    16c8:	15 9f       	mul	r17, r21
    16ca:	d0 0d       	add	r29, r0
    16cc:	11 24       	eor	r1, r1
    16ce:	ac 0f       	add	r26, r28
    16d0:	bd 1f       	adc	r27, r29
    16d2:	ae 51       	subi	r26, 0x1E	; 30
    16d4:	bd 4f       	sbci	r27, 0xFD	; 253
    16d6:	ac 91       	ld	r26, X
    16d8:	a1 11       	cpse	r26, r1
    16da:	1b c0       	rjmp	.+54     	; 0x1712 <DETECT_NEXT_NODE+0x194>
		{
			details1[X+1][Y].priority++;
    16dc:	ec 01       	movw	r28, r24
    16de:	cc 0f       	add	r28, r28
    16e0:	dd 1f       	adc	r29, r29
    16e2:	dc 01       	movw	r26, r24
    16e4:	aa 0f       	add	r26, r26
    16e6:	bb 1f       	adc	r27, r27
    16e8:	aa 0f       	add	r26, r26
    16ea:	bb 1f       	adc	r27, r27
    16ec:	aa 0f       	add	r26, r26
    16ee:	bb 1f       	adc	r27, r27
    16f0:	ac 0f       	add	r26, r28
    16f2:	bd 1f       	adc	r27, r29
    16f4:	14 9f       	mul	r17, r20
    16f6:	e0 01       	movw	r28, r0
    16f8:	15 9f       	mul	r17, r21
    16fa:	d0 0d       	add	r29, r0
    16fc:	11 24       	eor	r1, r1
    16fe:	ac 0f       	add	r26, r28
    1700:	bd 1f       	adc	r27, r29
    1702:	ae 51       	subi	r26, 0x1E	; 30
    1704:	bd 4f       	sbci	r27, 0xFD	; 253
    1706:	11 96       	adiw	r26, 0x01	; 1
    1708:	4c 91       	ld	r20, X
    170a:	11 97       	sbiw	r26, 0x01	; 1
    170c:	4f 5f       	subi	r20, 0xFF	; 255
    170e:	11 96       	adiw	r26, 0x01	; 1
    1710:	4c 93       	st	X, r20
		}
	}
	
	if((Y+1) > 0 && (Y+1) < MAX_GRID_Y )
    1712:	c5 e0       	ldi	r28, 0x05	; 5
    1714:	cc 15       	cp	r28, r12
    1716:	88 f1       	brcs	.+98     	; 0x177a <DETECT_NEXT_NODE+0x1fc>
	{
		if(details1[X][Y+1].status == UNVISITED)
    1718:	ac 01       	movw	r20, r24
    171a:	4f 5f       	subi	r20, 0xFF	; 255
    171c:	5f 4f       	sbci	r21, 0xFF	; 255
    171e:	ea 01       	movw	r28, r20
    1720:	cc 0f       	add	r28, r28
    1722:	dd 1f       	adc	r29, r29
    1724:	da 01       	movw	r26, r20
    1726:	aa 0f       	add	r26, r26
    1728:	bb 1f       	adc	r27, r27
    172a:	aa 0f       	add	r26, r26
    172c:	bb 1f       	adc	r27, r27
    172e:	aa 0f       	add	r26, r26
    1730:	bb 1f       	adc	r27, r27
    1732:	ac 0f       	add	r26, r28
    1734:	bd 1f       	adc	r27, r29
    1736:	16 e4       	ldi	r17, 0x46	; 70
    1738:	16 9f       	mul	r17, r22
    173a:	e0 01       	movw	r28, r0
    173c:	17 9f       	mul	r17, r23
    173e:	d0 0d       	add	r29, r0
    1740:	11 24       	eor	r1, r1
    1742:	ac 0f       	add	r26, r28
    1744:	bd 1f       	adc	r27, r29
    1746:	ae 51       	subi	r26, 0x1E	; 30
    1748:	bd 4f       	sbci	r27, 0xFD	; 253
    174a:	ac 91       	ld	r26, X
    174c:	a1 11       	cpse	r26, r1
    174e:	15 c0       	rjmp	.+42     	; 0x177a <DETECT_NEXT_NODE+0x1fc>
		{
			details1[X][Y+1].priority++;
    1750:	da 01       	movw	r26, r20
    1752:	aa 0f       	add	r26, r26
    1754:	bb 1f       	adc	r27, r27
    1756:	44 0f       	add	r20, r20
    1758:	55 1f       	adc	r21, r21
    175a:	44 0f       	add	r20, r20
    175c:	55 1f       	adc	r21, r21
    175e:	44 0f       	add	r20, r20
    1760:	55 1f       	adc	r21, r21
    1762:	a4 0f       	add	r26, r20
    1764:	b5 1f       	adc	r27, r21
    1766:	ac 0f       	add	r26, r28
    1768:	bd 1f       	adc	r27, r29
    176a:	ae 51       	subi	r26, 0x1E	; 30
    176c:	bd 4f       	sbci	r27, 0xFD	; 253
    176e:	11 96       	adiw	r26, 0x01	; 1
    1770:	4c 91       	ld	r20, X
    1772:	11 97       	sbiw	r26, 0x01	; 1
    1774:	4f 5f       	subi	r20, 0xFF	; 255
    1776:	11 96       	adiw	r26, 0x01	; 1
    1778:	4c 93       	st	X, r20
		}
	}
		
	if(((X+1)<MAX_GRID_X) && (details1[X+1][Y].priority > nextNode.priority) && (details1[X+1][Y].status == UNVISITED))
    177a:	4b 01       	movw	r8, r22
    177c:	df ef       	ldi	r29, 0xFF	; 255
    177e:	8d 1a       	sub	r8, r29
    1780:	9d 0a       	sbc	r9, r29
    1782:	43 e0       	ldi	r20, 0x03	; 3
    1784:	84 16       	cp	r8, r20
    1786:	91 04       	cpc	r9, r1
    1788:	d4 f5       	brge	.+116    	; 0x17fe <DETECT_NEXT_NODE+0x280>
    178a:	dc 01       	movw	r26, r24
    178c:	aa 0f       	add	r26, r26
    178e:	bb 1f       	adc	r27, r27
    1790:	ac 01       	movw	r20, r24
    1792:	44 0f       	add	r20, r20
    1794:	55 1f       	adc	r21, r21
    1796:	44 0f       	add	r20, r20
    1798:	55 1f       	adc	r21, r21
    179a:	44 0f       	add	r20, r20
    179c:	55 1f       	adc	r21, r21
    179e:	a4 0f       	add	r26, r20
    17a0:	b5 1f       	adc	r27, r21
    17a2:	16 e4       	ldi	r17, 0x46	; 70
    17a4:	18 9d       	mul	r17, r8
    17a6:	a0 01       	movw	r20, r0
    17a8:	19 9d       	mul	r17, r9
    17aa:	50 0d       	add	r21, r0
    17ac:	11 24       	eor	r1, r1
    17ae:	a4 0f       	add	r26, r20
    17b0:	b5 1f       	adc	r27, r21
    17b2:	ae 51       	subi	r26, 0x1E	; 30
    17b4:	bd 4f       	sbci	r27, 0xFD	; 253
    17b6:	11 96       	adiw	r26, 0x01	; 1
    17b8:	4c 91       	ld	r20, X
    17ba:	44 23       	and	r20, r20
    17bc:	19 f1       	breq	.+70     	; 0x1804 <DETECT_NEXT_NODE+0x286>
    17be:	dc 01       	movw	r26, r24
    17c0:	aa 0f       	add	r26, r26
    17c2:	bb 1f       	adc	r27, r27
    17c4:	ac 01       	movw	r20, r24
    17c6:	44 0f       	add	r20, r20
    17c8:	55 1f       	adc	r21, r21
    17ca:	44 0f       	add	r20, r20
    17cc:	55 1f       	adc	r21, r21
    17ce:	44 0f       	add	r20, r20
    17d0:	55 1f       	adc	r21, r21
    17d2:	a4 0f       	add	r26, r20
    17d4:	b5 1f       	adc	r27, r21
    17d6:	18 9d       	mul	r17, r8
    17d8:	a0 01       	movw	r20, r0
    17da:	19 9d       	mul	r17, r9
    17dc:	50 0d       	add	r21, r0
    17de:	11 24       	eor	r1, r1
    17e0:	a4 0f       	add	r26, r20
    17e2:	b5 1f       	adc	r27, r21
    17e4:	ae 51       	subi	r26, 0x1E	; 30
    17e6:	bd 4f       	sbci	r27, 0xFD	; 253
    17e8:	4c 91       	ld	r20, X
    17ea:	41 11       	cpse	r20, r1
    17ec:	0e c0       	rjmp	.+28     	; 0x180a <DETECT_NEXT_NODE+0x28c>
	{
		nextNode.X = X+1;
    17ee:	db 2c       	mov	r13, r11
    17f0:	d3 94       	inc	r13
		nextNode.Y = Y;
		dir_count = 1;
		loop_count = 1;
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	40 93 d6 00 	sts	0x00D6, r20
		
	if(((X+1)<MAX_GRID_X) && (details1[X+1][Y].priority > nextNode.priority) && (details1[X+1][Y].status == UNVISITED))
	{
		nextNode.X = X+1;
		nextNode.Y = Y;
		dir_count = 1;
    17f8:	ff 24       	eor	r15, r15
    17fa:	f3 94       	inc	r15
    17fc:	08 c0       	rjmp	.+16     	; 0x180e <DETECT_NEXT_NODE+0x290>

void DETECT_NEXT_NODE()
{
	unsigned char dir_count = 0;
	STRUCTURE nextNode;
	nextNode.X = X;
    17fe:	db 2c       	mov	r13, r11
	}
}

void DETECT_NEXT_NODE()
{
	unsigned char dir_count = 0;
    1800:	f1 2c       	mov	r15, r1
    1802:	05 c0       	rjmp	.+10     	; 0x180e <DETECT_NEXT_NODE+0x290>
	STRUCTURE nextNode;
	nextNode.X = X;
    1804:	db 2c       	mov	r13, r11
	}
}

void DETECT_NEXT_NODE()
{
	unsigned char dir_count = 0;
    1806:	f1 2c       	mov	r15, r1
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DETECT_NEXT_NODE+0x290>
	STRUCTURE nextNode;
	nextNode.X = X;
    180a:	db 2c       	mov	r13, r11
	}
}

void DETECT_NEXT_NODE()
{
	unsigned char dir_count = 0;
    180c:	f1 2c       	mov	r15, r1
		nextNode.Y = Y;
		dir_count = 1;
		loop_count = 1;
	}
	
	if(((Y-1)>=0) && (details1[X][Y-1].priority > nextNode.priority) && (details1[X][Y-1].status == UNVISITED))
    180e:	33 23       	and	r19, r19
    1810:	e4 f1       	brlt	.+120    	; 0x188a <DETECT_NEXT_NODE+0x30c>
    1812:	d9 01       	movw	r26, r18
    1814:	aa 0f       	add	r26, r26
    1816:	bb 1f       	adc	r27, r27
    1818:	a9 01       	movw	r20, r18
    181a:	44 0f       	add	r20, r20
    181c:	55 1f       	adc	r21, r21
    181e:	44 0f       	add	r20, r20
    1820:	55 1f       	adc	r21, r21
    1822:	44 0f       	add	r20, r20
    1824:	55 1f       	adc	r21, r21
    1826:	a4 0f       	add	r26, r20
    1828:	b5 1f       	adc	r27, r21
    182a:	16 e4       	ldi	r17, 0x46	; 70
    182c:	16 9f       	mul	r17, r22
    182e:	a0 01       	movw	r20, r0
    1830:	17 9f       	mul	r17, r23
    1832:	50 0d       	add	r21, r0
    1834:	11 24       	eor	r1, r1
    1836:	a4 0f       	add	r26, r20
    1838:	b5 1f       	adc	r27, r21
    183a:	ae 51       	subi	r26, 0x1E	; 30
    183c:	bd 4f       	sbci	r27, 0xFD	; 253
    183e:	11 96       	adiw	r26, 0x01	; 1
    1840:	4c 91       	ld	r20, X
    1842:	44 23       	and	r20, r20
    1844:	21 f1       	breq	.+72     	; 0x188e <DETECT_NEXT_NODE+0x310>
    1846:	d9 01       	movw	r26, r18
    1848:	aa 0f       	add	r26, r26
    184a:	bb 1f       	adc	r27, r27
    184c:	a9 01       	movw	r20, r18
    184e:	44 0f       	add	r20, r20
    1850:	55 1f       	adc	r21, r21
    1852:	44 0f       	add	r20, r20
    1854:	55 1f       	adc	r21, r21
    1856:	44 0f       	add	r20, r20
    1858:	55 1f       	adc	r21, r21
    185a:	a4 0f       	add	r26, r20
    185c:	b5 1f       	adc	r27, r21
    185e:	16 9f       	mul	r17, r22
    1860:	a0 01       	movw	r20, r0
    1862:	17 9f       	mul	r17, r23
    1864:	50 0d       	add	r21, r0
    1866:	11 24       	eor	r1, r1
    1868:	a4 0f       	add	r26, r20
    186a:	b5 1f       	adc	r27, r21
    186c:	ae 51       	subi	r26, 0x1E	; 30
    186e:	bd 4f       	sbci	r27, 0xFD	; 253
    1870:	4c 91       	ld	r20, X
    1872:	41 11       	cpse	r20, r1
    1874:	0e c0       	rjmp	.+28     	; 0x1892 <DETECT_NEXT_NODE+0x314>
	{
		nextNode.X = X;
		nextNode.Y = Y-1;
    1876:	ac 2c       	mov	r10, r12
    1878:	aa 94       	dec	r10
		dir_count = 2;
		loop_count = 1;
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	40 93 d6 00 	sts	0x00D6, r20
		loop_count = 1;
	}
	
	if(((Y-1)>=0) && (details1[X][Y-1].priority > nextNode.priority) && (details1[X][Y-1].status == UNVISITED))
	{
		nextNode.X = X;
    1880:	db 2c       	mov	r13, r11
		nextNode.Y = Y-1;
		dir_count = 2;
    1882:	68 94       	set
    1884:	ff 24       	eor	r15, r15
    1886:	f1 f8       	bld	r15, 1
    1888:	05 c0       	rjmp	.+10     	; 0x1894 <DETECT_NEXT_NODE+0x316>
		nextNode.Y = Y;
		dir_count = 1;
		loop_count = 1;
	}
	
	if(((Y-1)>=0) && (details1[X][Y-1].priority > nextNode.priority) && (details1[X][Y-1].status == UNVISITED))
    188a:	ac 2c       	mov	r10, r12
    188c:	03 c0       	rjmp	.+6      	; 0x1894 <DETECT_NEXT_NODE+0x316>
    188e:	ac 2c       	mov	r10, r12
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <DETECT_NEXT_NODE+0x316>
    1892:	ac 2c       	mov	r10, r12
		nextNode.Y = Y-1;
		dir_count = 2;
		loop_count = 1;
	}
		
	if(((X-1)>=0) && (details1[X-1][Y].priority > nextNode.priority) && (details1[X-1][Y].status == UNVISITED))
    1894:	ff 23       	and	r31, r31
    1896:	e4 f1       	brlt	.+120    	; 0x1910 <DETECT_NEXT_NODE+0x392>
    1898:	dc 01       	movw	r26, r24
    189a:	aa 0f       	add	r26, r26
    189c:	bb 1f       	adc	r27, r27
    189e:	ac 01       	movw	r20, r24
    18a0:	44 0f       	add	r20, r20
    18a2:	55 1f       	adc	r21, r21
    18a4:	44 0f       	add	r20, r20
    18a6:	55 1f       	adc	r21, r21
    18a8:	44 0f       	add	r20, r20
    18aa:	55 1f       	adc	r21, r21
    18ac:	a4 0f       	add	r26, r20
    18ae:	b5 1f       	adc	r27, r21
    18b0:	16 e4       	ldi	r17, 0x46	; 70
    18b2:	1e 9f       	mul	r17, r30
    18b4:	a0 01       	movw	r20, r0
    18b6:	1f 9f       	mul	r17, r31
    18b8:	50 0d       	add	r21, r0
    18ba:	11 24       	eor	r1, r1
    18bc:	a4 0f       	add	r26, r20
    18be:	b5 1f       	adc	r27, r21
    18c0:	ae 51       	subi	r26, 0x1E	; 30
    18c2:	bd 4f       	sbci	r27, 0xFD	; 253
    18c4:	11 96       	adiw	r26, 0x01	; 1
    18c6:	4c 91       	ld	r20, X
    18c8:	44 23       	and	r20, r20
    18ca:	11 f1       	breq	.+68     	; 0x1910 <DETECT_NEXT_NODE+0x392>
    18cc:	dc 01       	movw	r26, r24
    18ce:	aa 0f       	add	r26, r26
    18d0:	bb 1f       	adc	r27, r27
    18d2:	ac 01       	movw	r20, r24
    18d4:	44 0f       	add	r20, r20
    18d6:	55 1f       	adc	r21, r21
    18d8:	44 0f       	add	r20, r20
    18da:	55 1f       	adc	r21, r21
    18dc:	44 0f       	add	r20, r20
    18de:	55 1f       	adc	r21, r21
    18e0:	a4 0f       	add	r26, r20
    18e2:	b5 1f       	adc	r27, r21
    18e4:	1e 9f       	mul	r17, r30
    18e6:	a0 01       	movw	r20, r0
    18e8:	1f 9f       	mul	r17, r31
    18ea:	50 0d       	add	r21, r0
    18ec:	11 24       	eor	r1, r1
    18ee:	a4 0f       	add	r26, r20
    18f0:	b5 1f       	adc	r27, r21
    18f2:	ae 51       	subi	r26, 0x1E	; 30
    18f4:	bd 4f       	sbci	r27, 0xFD	; 253
    18f6:	4c 91       	ld	r20, X
    18f8:	41 11       	cpse	r20, r1
    18fa:	0a c0       	rjmp	.+20     	; 0x1910 <DETECT_NEXT_NODE+0x392>
	{
		nextNode.X = X-1;
    18fc:	db 2c       	mov	r13, r11
    18fe:	da 94       	dec	r13
		nextNode.Y = Y;
		dir_count = 3;
		loop_count = 1;
    1900:	41 e0       	ldi	r20, 0x01	; 1
    1902:	40 93 d6 00 	sts	0x00D6, r20
	}
		
	if(((X-1)>=0) && (details1[X-1][Y].priority > nextNode.priority) && (details1[X-1][Y].status == UNVISITED))
	{
		nextNode.X = X-1;
		nextNode.Y = Y;
    1906:	ac 2c       	mov	r10, r12
		dir_count = 3;
    1908:	0f 2e       	mov	r0, r31
    190a:	f3 e0       	ldi	r31, 0x03	; 3
    190c:	ff 2e       	mov	r15, r31
    190e:	f0 2d       	mov	r31, r0
		loop_count = 1;
	}
	
	if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].priority > nextNode.priority) && (details1[X][Y+1].status == UNVISITED))
    1910:	dc 01       	movw	r26, r24
    1912:	11 96       	adiw	r26, 0x01	; 1
    1914:	a7 30       	cpi	r26, 0x07	; 7
    1916:	b1 05       	cpc	r27, r1
    1918:	34 f5       	brge	.+76     	; 0x1966 <DETECT_NEXT_NODE+0x3e8>
    191a:	8d 01       	movw	r16, r26
    191c:	00 0f       	add	r16, r16
    191e:	11 1f       	adc	r17, r17
    1920:	ad 01       	movw	r20, r26
    1922:	44 0f       	add	r20, r20
    1924:	55 1f       	adc	r21, r21
    1926:	44 0f       	add	r20, r20
    1928:	55 1f       	adc	r21, r21
    192a:	44 0f       	add	r20, r20
    192c:	55 1f       	adc	r21, r21
    192e:	04 0f       	add	r16, r20
    1930:	15 1f       	adc	r17, r21
    1932:	0f 2e       	mov	r0, r31
    1934:	f6 e4       	ldi	r31, 0x46	; 70
    1936:	ef 2e       	mov	r14, r31
    1938:	f0 2d       	mov	r31, r0
    193a:	e6 9e       	mul	r14, r22
    193c:	a0 01       	movw	r20, r0
    193e:	e7 9e       	mul	r14, r23
    1940:	50 0d       	add	r21, r0
    1942:	11 24       	eor	r1, r1
    1944:	40 0f       	add	r20, r16
    1946:	51 1f       	adc	r21, r17
    1948:	4e 51       	subi	r20, 0x1E	; 30
    194a:	5d 4f       	sbci	r21, 0xFD	; 253
    194c:	ea 01       	movw	r28, r20
    194e:	49 81       	ldd	r20, Y+1	; 0x01
    1950:	44 23       	and	r20, r20
    1952:	49 f0       	breq	.+18     	; 0x1966 <DETECT_NEXT_NODE+0x3e8>
    1954:	48 81       	ld	r20, Y
    1956:	41 11       	cpse	r20, r1
    1958:	06 c0       	rjmp	.+12     	; 0x1966 <DETECT_NEXT_NODE+0x3e8>
	{
		nextNode.X = X;
		nextNode.Y = Y+1;
    195a:	ac 2c       	mov	r10, r12
    195c:	a3 94       	inc	r10
			nextNode.Y = Y+1;
		}
		details1[X][Y].status = BLOCK;
	}
	
	loop_count--;
    195e:	10 92 d6 00 	sts	0x00D6, r1
		loop_count = 1;
	}
	
	if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].priority > nextNode.priority) && (details1[X][Y+1].status == UNVISITED))
	{
		nextNode.X = X;
    1962:	db 2c       	mov	r13, r11
    1964:	33 c1       	rjmp	.+614    	; 0x1bcc <DETECT_NEXT_NODE+0x64e>
		nextNode.Y = Y+1;
		dir_count = 4;
		loop_count = 1;
	}
	
	if(dir_count == 0)
    1966:	f1 10       	cpse	r15, r1
    1968:	a9 c0       	rjmp	.+338    	; 0x1abc <DETECT_NEXT_NODE+0x53e>
	{
		loop_count++;
    196a:	40 91 d6 00 	lds	r20, 0x00D6
    196e:	4f 5f       	subi	r20, 0xFF	; 255
    1970:	40 93 d6 00 	sts	0x00D6, r20
		if(((X+1)<MAX_GRID_X) && (details1[X+1][Y].status != BLOCK))
    1974:	d3 e0       	ldi	r29, 0x03	; 3
    1976:	8d 16       	cp	r8, r29
    1978:	91 04       	cpc	r9, r1
    197a:	04 f5       	brge	.+64     	; 0x19bc <DETECT_NEXT_NODE+0x43e>
    197c:	8c 01       	movw	r16, r24
    197e:	00 0f       	add	r16, r16
    1980:	11 1f       	adc	r17, r17
    1982:	ac 01       	movw	r20, r24
    1984:	44 0f       	add	r20, r20
    1986:	55 1f       	adc	r21, r21
    1988:	44 0f       	add	r20, r20
    198a:	55 1f       	adc	r21, r21
    198c:	44 0f       	add	r20, r20
    198e:	55 1f       	adc	r21, r21
    1990:	04 0f       	add	r16, r20
    1992:	15 1f       	adc	r17, r21
    1994:	0f 2e       	mov	r0, r31
    1996:	f6 e4       	ldi	r31, 0x46	; 70
    1998:	ff 2e       	mov	r15, r31
    199a:	f0 2d       	mov	r31, r0
    199c:	f8 9c       	mul	r15, r8
    199e:	a0 01       	movw	r20, r0
    19a0:	f9 9c       	mul	r15, r9
    19a2:	50 0d       	add	r21, r0
    19a4:	11 24       	eor	r1, r1
    19a6:	40 0f       	add	r20, r16
    19a8:	51 1f       	adc	r21, r17
    19aa:	4e 51       	subi	r20, 0x1E	; 30
    19ac:	5d 4f       	sbci	r21, 0xFD	; 253
    19ae:	ea 01       	movw	r28, r20
    19b0:	48 81       	ld	r20, Y
    19b2:	42 30       	cpi	r20, 0x02	; 2
    19b4:	19 f0       	breq	.+6      	; 0x19bc <DETECT_NEXT_NODE+0x43e>
		{
			nextNode.X = X+1;
    19b6:	db 2c       	mov	r13, r11
    19b8:	d3 94       	inc	r13
			nextNode.Y = Y;
    19ba:	ac 2c       	mov	r10, r12
		}
		
		if(((Y-1)>=0) && (details1[X][Y-1].status != BLOCK))
    19bc:	33 23       	and	r19, r19
    19be:	04 f1       	brlt	.+64     	; 0x1a00 <DETECT_NEXT_NODE+0x482>
    19c0:	89 01       	movw	r16, r18
    19c2:	00 0f       	add	r16, r16
    19c4:	11 1f       	adc	r17, r17
    19c6:	a9 01       	movw	r20, r18
    19c8:	44 0f       	add	r20, r20
    19ca:	55 1f       	adc	r21, r21
    19cc:	44 0f       	add	r20, r20
    19ce:	55 1f       	adc	r21, r21
    19d0:	44 0f       	add	r20, r20
    19d2:	55 1f       	adc	r21, r21
    19d4:	04 0f       	add	r16, r20
    19d6:	15 1f       	adc	r17, r21
    19d8:	0f 2e       	mov	r0, r31
    19da:	f6 e4       	ldi	r31, 0x46	; 70
    19dc:	ff 2e       	mov	r15, r31
    19de:	f0 2d       	mov	r31, r0
    19e0:	f6 9e       	mul	r15, r22
    19e2:	a0 01       	movw	r20, r0
    19e4:	f7 9e       	mul	r15, r23
    19e6:	50 0d       	add	r21, r0
    19e8:	11 24       	eor	r1, r1
    19ea:	40 0f       	add	r20, r16
    19ec:	51 1f       	adc	r21, r17
    19ee:	4e 51       	subi	r20, 0x1E	; 30
    19f0:	5d 4f       	sbci	r21, 0xFD	; 253
    19f2:	ea 01       	movw	r28, r20
    19f4:	48 81       	ld	r20, Y
    19f6:	42 30       	cpi	r20, 0x02	; 2
    19f8:	19 f0       	breq	.+6      	; 0x1a00 <DETECT_NEXT_NODE+0x482>
		{
			nextNode.X = X;
			nextNode.Y = Y-1;
    19fa:	ac 2c       	mov	r10, r12
    19fc:	aa 94       	dec	r10
			nextNode.Y = Y;
		}
		
		if(((Y-1)>=0) && (details1[X][Y-1].status != BLOCK))
		{
			nextNode.X = X;
    19fe:	db 2c       	mov	r13, r11
			nextNode.Y = Y-1;
		}
		
		if(((X-1)>=0) && (details1[X-1][Y].status != BLOCK))
    1a00:	ff 23       	and	r31, r31
    1a02:	04 f1       	brlt	.+64     	; 0x1a44 <DETECT_NEXT_NODE+0x4c6>
    1a04:	8c 01       	movw	r16, r24
    1a06:	00 0f       	add	r16, r16
    1a08:	11 1f       	adc	r17, r17
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	44 0f       	add	r20, r20
    1a0e:	55 1f       	adc	r21, r21
    1a10:	44 0f       	add	r20, r20
    1a12:	55 1f       	adc	r21, r21
    1a14:	44 0f       	add	r20, r20
    1a16:	55 1f       	adc	r21, r21
    1a18:	04 0f       	add	r16, r20
    1a1a:	15 1f       	adc	r17, r21
    1a1c:	0f 2e       	mov	r0, r31
    1a1e:	f6 e4       	ldi	r31, 0x46	; 70
    1a20:	ff 2e       	mov	r15, r31
    1a22:	f0 2d       	mov	r31, r0
    1a24:	fe 9e       	mul	r15, r30
    1a26:	a0 01       	movw	r20, r0
    1a28:	ff 9e       	mul	r15, r31
    1a2a:	50 0d       	add	r21, r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	40 0f       	add	r20, r16
    1a30:	51 1f       	adc	r21, r17
    1a32:	4e 51       	subi	r20, 0x1E	; 30
    1a34:	5d 4f       	sbci	r21, 0xFD	; 253
    1a36:	ea 01       	movw	r28, r20
    1a38:	48 81       	ld	r20, Y
    1a3a:	42 30       	cpi	r20, 0x02	; 2
    1a3c:	19 f0       	breq	.+6      	; 0x1a44 <DETECT_NEXT_NODE+0x4c6>
		{
			nextNode.X = X-1;
    1a3e:	db 2c       	mov	r13, r11
    1a40:	da 94       	dec	r13
			nextNode.Y = Y;
    1a42:	ac 2c       	mov	r10, r12
		}
		
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status != BLOCK))
    1a44:	a7 30       	cpi	r26, 0x07	; 7
    1a46:	b1 05       	cpc	r27, r1
    1a48:	04 f5       	brge	.+64     	; 0x1a8a <DETECT_NEXT_NODE+0x50c>
    1a4a:	8d 01       	movw	r16, r26
    1a4c:	00 0f       	add	r16, r16
    1a4e:	11 1f       	adc	r17, r17
    1a50:	ad 01       	movw	r20, r26
    1a52:	44 0f       	add	r20, r20
    1a54:	55 1f       	adc	r21, r21
    1a56:	44 0f       	add	r20, r20
    1a58:	55 1f       	adc	r21, r21
    1a5a:	44 0f       	add	r20, r20
    1a5c:	55 1f       	adc	r21, r21
    1a5e:	04 0f       	add	r16, r20
    1a60:	15 1f       	adc	r17, r21
    1a62:	0f 2e       	mov	r0, r31
    1a64:	f6 e4       	ldi	r31, 0x46	; 70
    1a66:	ff 2e       	mov	r15, r31
    1a68:	f0 2d       	mov	r31, r0
    1a6a:	f6 9e       	mul	r15, r22
    1a6c:	a0 01       	movw	r20, r0
    1a6e:	f7 9e       	mul	r15, r23
    1a70:	50 0d       	add	r21, r0
    1a72:	11 24       	eor	r1, r1
    1a74:	40 0f       	add	r20, r16
    1a76:	51 1f       	adc	r21, r17
    1a78:	4e 51       	subi	r20, 0x1E	; 30
    1a7a:	5d 4f       	sbci	r21, 0xFD	; 253
    1a7c:	ea 01       	movw	r28, r20
    1a7e:	48 81       	ld	r20, Y
    1a80:	42 30       	cpi	r20, 0x02	; 2
    1a82:	19 f0       	breq	.+6      	; 0x1a8a <DETECT_NEXT_NODE+0x50c>
		{
			nextNode.X = X;
			nextNode.Y = Y+1;
    1a84:	ac 2c       	mov	r10, r12
    1a86:	a3 94       	inc	r10
			nextNode.Y = Y;
		}
		
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status != BLOCK))
		{
			nextNode.X = X;
    1a88:	db 2c       	mov	r13, r11
			nextNode.Y = Y+1;
		}
		details1[X][Y].status = BLOCK;
    1a8a:	7c 01       	movw	r14, r24
    1a8c:	ee 0c       	add	r14, r14
    1a8e:	ff 1c       	adc	r15, r15
    1a90:	8c 01       	movw	r16, r24
    1a92:	00 0f       	add	r16, r16
    1a94:	11 1f       	adc	r17, r17
    1a96:	00 0f       	add	r16, r16
    1a98:	11 1f       	adc	r17, r17
    1a9a:	00 0f       	add	r16, r16
    1a9c:	11 1f       	adc	r17, r17
    1a9e:	e0 0e       	add	r14, r16
    1aa0:	f1 1e       	adc	r15, r17
    1aa2:	46 e4       	ldi	r20, 0x46	; 70
    1aa4:	46 9f       	mul	r20, r22
    1aa6:	80 01       	movw	r16, r0
    1aa8:	47 9f       	mul	r20, r23
    1aaa:	10 0d       	add	r17, r0
    1aac:	11 24       	eor	r1, r1
    1aae:	0e 0d       	add	r16, r14
    1ab0:	1f 1d       	adc	r17, r15
    1ab2:	0e 51       	subi	r16, 0x1E	; 30
    1ab4:	1d 4f       	sbci	r17, 0xFD	; 253
    1ab6:	42 e0       	ldi	r20, 0x02	; 2
    1ab8:	e8 01       	movw	r28, r16
    1aba:	48 83       	st	Y, r20
	}
	
	loop_count--;
    1abc:	40 91 d6 00 	lds	r20, 0x00D6
    1ac0:	41 50       	subi	r20, 0x01	; 1
    1ac2:	40 93 d6 00 	sts	0x00D6, r20
	if (loop_count > 4 && currentMode == BLOCK_SEARCH_MODE)
    1ac6:	45 30       	cpi	r20, 0x05	; 5
    1ac8:	08 f4       	brcc	.+2      	; 0x1acc <DETECT_NEXT_NODE+0x54e>
    1aca:	80 c0       	rjmp	.+256    	; 0x1bcc <DETECT_NEXT_NODE+0x64e>
    1acc:	40 91 de 00 	lds	r20, 0x00DE
    1ad0:	41 11       	cpse	r20, r1
    1ad2:	7c c0       	rjmp	.+248    	; 0x1bcc <DETECT_NEXT_NODE+0x64e>
	{	
		loop_count = 5;
    1ad4:	45 e0       	ldi	r20, 0x05	; 5
    1ad6:	40 93 d6 00 	sts	0x00D6, r20
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status != BLOCK))
    1ada:	a7 30       	cpi	r26, 0x07	; 7
    1adc:	b1 05       	cpc	r27, r1
    1ade:	dc f4       	brge	.+54     	; 0x1b16 <DETECT_NEXT_NODE+0x598>
    1ae0:	ad 01       	movw	r20, r26
    1ae2:	44 0f       	add	r20, r20
    1ae4:	55 1f       	adc	r21, r21
    1ae6:	aa 0f       	add	r26, r26
    1ae8:	bb 1f       	adc	r27, r27
    1aea:	aa 0f       	add	r26, r26
    1aec:	bb 1f       	adc	r27, r27
    1aee:	aa 0f       	add	r26, r26
    1af0:	bb 1f       	adc	r27, r27
    1af2:	a4 0f       	add	r26, r20
    1af4:	b5 1f       	adc	r27, r21
    1af6:	16 e4       	ldi	r17, 0x46	; 70
    1af8:	16 9f       	mul	r17, r22
    1afa:	a0 01       	movw	r20, r0
    1afc:	17 9f       	mul	r17, r23
    1afe:	50 0d       	add	r21, r0
    1b00:	11 24       	eor	r1, r1
    1b02:	a4 0f       	add	r26, r20
    1b04:	b5 1f       	adc	r27, r21
    1b06:	ae 51       	subi	r26, 0x1E	; 30
    1b08:	bd 4f       	sbci	r27, 0xFD	; 253
    1b0a:	4c 91       	ld	r20, X
    1b0c:	42 30       	cpi	r20, 0x02	; 2
    1b0e:	19 f0       	breq	.+6      	; 0x1b16 <DETECT_NEXT_NODE+0x598>
		{
			nextNode.X = X;
			nextNode.Y = Y+1;
    1b10:	ac 2c       	mov	r10, r12
    1b12:	a3 94       	inc	r10
	if (loop_count > 4 && currentMode == BLOCK_SEARCH_MODE)
	{	
		loop_count = 5;
		if(((Y+1)<MAX_GRID_Y) && (details1[X][Y+1].status != BLOCK))
		{
			nextNode.X = X;
    1b14:	db 2c       	mov	r13, r11
			nextNode.Y = Y+1;
		}
		
		if(((X-1)>=0) && (details1[X-1][Y].status != BLOCK))
    1b16:	ff 23       	and	r31, r31
    1b18:	ec f0       	brlt	.+58     	; 0x1b54 <DETECT_NEXT_NODE+0x5d6>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	aa 0f       	add	r26, r26
    1b1e:	bb 1f       	adc	r27, r27
    1b20:	ac 01       	movw	r20, r24
    1b22:	44 0f       	add	r20, r20
    1b24:	55 1f       	adc	r21, r21
    1b26:	44 0f       	add	r20, r20
    1b28:	55 1f       	adc	r21, r21
    1b2a:	44 0f       	add	r20, r20
    1b2c:	55 1f       	adc	r21, r21
    1b2e:	a4 0f       	add	r26, r20
    1b30:	b5 1f       	adc	r27, r21
    1b32:	16 e4       	ldi	r17, 0x46	; 70
    1b34:	1e 9f       	mul	r17, r30
    1b36:	a0 01       	movw	r20, r0
    1b38:	1f 9f       	mul	r17, r31
    1b3a:	50 0d       	add	r21, r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	fd 01       	movw	r30, r26
    1b40:	e4 0f       	add	r30, r20
    1b42:	f5 1f       	adc	r31, r21
    1b44:	ee 51       	subi	r30, 0x1E	; 30
    1b46:	fd 4f       	sbci	r31, 0xFD	; 253
    1b48:	40 81       	ld	r20, Z
    1b4a:	42 30       	cpi	r20, 0x02	; 2
    1b4c:	19 f0       	breq	.+6      	; 0x1b54 <DETECT_NEXT_NODE+0x5d6>
		{
			nextNode.X = X-1;
    1b4e:	db 2c       	mov	r13, r11
    1b50:	da 94       	dec	r13
			nextNode.Y = Y;
    1b52:	ac 2c       	mov	r10, r12
		}
		
		if(((X+1)<MAX_GRID_X) && (details1[X+1][Y].status != BLOCK))
    1b54:	d3 e0       	ldi	r29, 0x03	; 3
    1b56:	8d 16       	cp	r8, r29
    1b58:	91 04       	cpc	r9, r1
    1b5a:	dc f4       	brge	.+54     	; 0x1b92 <DETECT_NEXT_NODE+0x614>
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	ee 0f       	add	r30, r30
    1b60:	ff 1f       	adc	r31, r31
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	e8 0f       	add	r30, r24
    1b70:	f9 1f       	adc	r31, r25
    1b72:	86 e4       	ldi	r24, 0x46	; 70
    1b74:	88 9d       	mul	r24, r8
    1b76:	a0 01       	movw	r20, r0
    1b78:	89 9d       	mul	r24, r9
    1b7a:	50 0d       	add	r21, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	e4 0f       	add	r30, r20
    1b80:	f5 1f       	adc	r31, r21
    1b82:	ee 51       	subi	r30, 0x1E	; 30
    1b84:	fd 4f       	sbci	r31, 0xFD	; 253
    1b86:	80 81       	ld	r24, Z
    1b88:	82 30       	cpi	r24, 0x02	; 2
    1b8a:	19 f0       	breq	.+6      	; 0x1b92 <DETECT_NEXT_NODE+0x614>
		{
			nextNode.X = X+1;
    1b8c:	db 2c       	mov	r13, r11
    1b8e:	d3 94       	inc	r13
			nextNode.Y = Y;
    1b90:	ac 2c       	mov	r10, r12
		}
		
		if(((Y-1)>=0) && (details1[X][Y-1].status != BLOCK))
    1b92:	33 23       	and	r19, r19
    1b94:	dc f0       	brlt	.+54     	; 0x1bcc <DETECT_NEXT_NODE+0x64e>
    1b96:	f9 01       	movw	r30, r18
    1b98:	ee 0f       	add	r30, r30
    1b9a:	ff 1f       	adc	r31, r31
    1b9c:	22 0f       	add	r18, r18
    1b9e:	33 1f       	adc	r19, r19
    1ba0:	22 0f       	add	r18, r18
    1ba2:	33 1f       	adc	r19, r19
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	e2 0f       	add	r30, r18
    1baa:	f3 1f       	adc	r31, r19
    1bac:	26 e4       	ldi	r18, 0x46	; 70
    1bae:	26 9f       	mul	r18, r22
    1bb0:	c0 01       	movw	r24, r0
    1bb2:	27 9f       	mul	r18, r23
    1bb4:	90 0d       	add	r25, r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	e8 0f       	add	r30, r24
    1bba:	f9 1f       	adc	r31, r25
    1bbc:	ee 51       	subi	r30, 0x1E	; 30
    1bbe:	fd 4f       	sbci	r31, 0xFD	; 253
    1bc0:	80 81       	ld	r24, Z
    1bc2:	82 30       	cpi	r24, 0x02	; 2
    1bc4:	19 f0       	breq	.+6      	; 0x1bcc <DETECT_NEXT_NODE+0x64e>
		{
			nextNode.X = X;
			nextNode.Y = Y-1;
    1bc6:	ac 2c       	mov	r10, r12
    1bc8:	aa 94       	dec	r10
			nextNode.Y = Y;
		}
		
		if(((Y-1)>=0) && (details1[X][Y-1].status != BLOCK))
		{
			nextNode.X = X;
    1bca:	db 2c       	mov	r13, r11
			nextNode.Y = Y-1;
		}	
	}
		
	LCD_CLEAR();
    1bcc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
	LCD_SET_CURSER(2,1);
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
	LCD_DATA('(');
    1bd8:	88 e2       	ldi	r24, 0x28	; 40
    1bda:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(X+0x30);
    1bde:	80 91 e3 00 	lds	r24, 0x00E3
    1be2:	80 5d       	subi	r24, 0xD0	; 208
    1be4:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(',');
    1be8:	8c e2       	ldi	r24, 0x2C	; 44
    1bea:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(Y+0x30);
    1bee:	80 91 e2 00 	lds	r24, 0x00E2
    1bf2:	80 5d       	subi	r24, 0xD0	; 208
    1bf4:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(')');
    1bf8:	89 e2       	ldi	r24, 0x29	; 41
    1bfa:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_PRINT(" --> ");
    1bfe:	8d ec       	ldi	r24, 0xCD	; 205
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
	LCD_PRINT("(");
    1c06:	83 ed       	ldi	r24, 0xD3	; 211
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_PRINT>
	LCD_DATA(nextNode.X+0x30);
    1c0e:	8d 2d       	mov	r24, r13
    1c10:	80 5d       	subi	r24, 0xD0	; 208
    1c12:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(',');
    1c16:	8c e2       	ldi	r24, 0x2C	; 44
    1c18:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(nextNode.Y+0x30);
    1c1c:	8a 2d       	mov	r24, r10
    1c1e:	80 5d       	subi	r24, 0xD0	; 208
    1c20:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_DATA(')');
    1c24:	89 e2       	ldi	r24, 0x29	; 41
    1c26:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DATA>
	LCD_SET_CURSER(1,7);
    1c2a:	67 e0       	ldi	r22, 0x07	; 7
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	0e 94 03 01 	call	0x206	; 0x206 <LCD_SET_CURSER>
	LCD_NUM(coord_count);
    1c32:	80 91 61 00 	lds	r24, 0x0061
    1c36:	0e 94 11 01 	call	0x222	; 0x222 <LCD_NUM>
	if(currentMode == BLOCK_SEARCH_MODE)
    1c3a:	80 91 de 00 	lds	r24, 0x00DE
    1c3e:	81 11       	cpse	r24, r1
    1c40:	08 c0       	rjmp	.+16     	; 0x1c52 <DETECT_NEXT_NODE+0x6d4>
	{
		MOVE_NEXT_NODE(X,Y,nextNode.X,nextNode.Y);
    1c42:	2a 2d       	mov	r18, r10
    1c44:	4d 2d       	mov	r20, r13
    1c46:	60 91 e2 00 	lds	r22, 0x00E2
    1c4a:	80 91 e3 00 	lds	r24, 0x00E3
    1c4e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <MOVE_NEXT_NODE>
	}
}
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	ef 90       	pop	r14
    1c5e:	df 90       	pop	r13
    1c60:	cf 90       	pop	r12
    1c62:	bf 90       	pop	r11
    1c64:	af 90       	pop	r10
    1c66:	9f 90       	pop	r9
    1c68:	8f 90       	pop	r8
    1c6a:	08 95       	ret

00001c6c <MOVE_TO_NEAREST_BLOCK>:
		destinationCounter--;
	}
}

void MOVE_TO_NEAREST_BLOCK()
{
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
	unsigned char j=0, i;
	unsigned char distance,tempd;
	block_caught = FALSE;
    1c74:	10 92 db 00 	sts	0x00DB, r1
	distance = DIGKSTRA(X,Y,block[0].X,block[0].Y,FALSE);
    1c78:	00 e0       	ldi	r16, 0x00	; 0
    1c7a:	20 91 e7 00 	lds	r18, 0x00E7
    1c7e:	40 91 e6 00 	lds	r20, 0x00E6
    1c82:	60 91 e2 00 	lds	r22, 0x00E2
    1c86:	80 91 e3 00 	lds	r24, 0x00E3
    1c8a:	0e 94 81 07 	call	0xf02	; 0xf02 <DIGKSTRA>
    1c8e:	d8 2f       	mov	r29, r24
	for(i=1;i<blockCounter;i++)
    1c90:	80 91 d7 00 	lds	r24, 0x00D7
    1c94:	82 30       	cpi	r24, 0x02	; 2
    1c96:	90 f1       	brcs	.+100    	; 0x1cfc <MOVE_TO_NEAREST_BLOCK+0x90>
    1c98:	c1 e0       	ldi	r28, 0x01	; 1
	}
}

void MOVE_TO_NEAREST_BLOCK()
{
	unsigned char j=0, i;
    1c9a:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char distance,tempd;
	block_caught = FALSE;
	distance = DIGKSTRA(X,Y,block[0].X,block[0].Y,FALSE);
	for(i=1;i<blockCounter;i++)
	{
		tempd = DIGKSTRA(X,Y,block[i].X,block[i].Y,FALSE);
    1c9c:	2c 2f       	mov	r18, r28
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	22 0f       	add	r18, r18
    1ca2:	33 1f       	adc	r19, r19
    1ca4:	d9 01       	movw	r26, r18
    1ca6:	aa 0f       	add	r26, r26
    1ca8:	bb 1f       	adc	r27, r27
    1caa:	aa 0f       	add	r26, r26
    1cac:	bb 1f       	adc	r27, r27
    1cae:	2a 0f       	add	r18, r26
    1cb0:	3b 1f       	adc	r19, r27
    1cb2:	d9 01       	movw	r26, r18
    1cb4:	ac 51       	subi	r26, 0x1C	; 28
    1cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb8:	2c 2f       	mov	r18, r28
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	22 0f       	add	r18, r18
    1cbe:	33 1f       	adc	r19, r19
    1cc0:	f9 01       	movw	r30, r18
    1cc2:	ee 0f       	add	r30, r30
    1cc4:	ff 1f       	adc	r31, r31
    1cc6:	ee 0f       	add	r30, r30
    1cc8:	ff 1f       	adc	r31, r31
    1cca:	2e 0f       	add	r18, r30
    1ccc:	3f 1f       	adc	r19, r31
    1cce:	f9 01       	movw	r30, r18
    1cd0:	ec 51       	subi	r30, 0x1C	; 28
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	00 e0       	ldi	r16, 0x00	; 0
    1cd6:	13 96       	adiw	r26, 0x03	; 3
    1cd8:	2c 91       	ld	r18, X
    1cda:	42 81       	ldd	r20, Z+2	; 0x02
    1cdc:	60 91 e2 00 	lds	r22, 0x00E2
    1ce0:	80 91 e3 00 	lds	r24, 0x00E3
    1ce4:	0e 94 81 07 	call	0xf02	; 0xf02 <DIGKSTRA>
		if(tempd < distance)
    1ce8:	8d 17       	cp	r24, r29
    1cea:	10 f4       	brcc	.+4      	; 0x1cf0 <MOVE_TO_NEAREST_BLOCK+0x84>
		{
			distance = tempd;
    1cec:	d8 2f       	mov	r29, r24
	block_caught = FALSE;
	distance = DIGKSTRA(X,Y,block[0].X,block[0].Y,FALSE);
	for(i=1;i<blockCounter;i++)
	{
		tempd = DIGKSTRA(X,Y,block[i].X,block[i].Y,FALSE);
		if(tempd < distance)
    1cee:	1c 2f       	mov	r17, r28
{
	unsigned char j=0, i;
	unsigned char distance,tempd;
	block_caught = FALSE;
	distance = DIGKSTRA(X,Y,block[0].X,block[0].Y,FALSE);
	for(i=1;i<blockCounter;i++)
    1cf0:	cf 5f       	subi	r28, 0xFF	; 255
    1cf2:	80 91 d7 00 	lds	r24, 0x00D7
    1cf6:	c8 17       	cp	r28, r24
    1cf8:	88 f2       	brcs	.-94     	; 0x1c9c <MOVE_TO_NEAREST_BLOCK+0x30>
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <MOVE_TO_NEAREST_BLOCK+0x92>
	}
}

void MOVE_TO_NEAREST_BLOCK()
{
	unsigned char j=0, i;
    1cfc:	10 e0       	ldi	r17, 0x00	; 0
			distance = tempd;
			j=i;
		}
	}	
	
	LCD_CLEAR();
    1cfe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
	//LCD_NUM(block[j].X);
	//LCD_NUM(block[j].Y);
	//_delay_ms(2000);
	BOT_MOVE(FORWARD);
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
    1d08:	2f ef       	ldi	r18, 0xFF	; 255
    1d0a:	31 ee       	ldi	r19, 0xE1	; 225
    1d0c:	84 e0       	ldi	r24, 0x04	; 4
    1d0e:	21 50       	subi	r18, 0x01	; 1
    1d10:	30 40       	sbci	r19, 0x00	; 0
    1d12:	80 40       	sbci	r24, 0x00	; 0
    1d14:	e1 f7       	brne	.-8      	; 0x1d0e <MOVE_TO_NEAREST_BLOCK+0xa2>
    1d16:	00 c0       	rjmp	.+0      	; 0x1d18 <MOVE_TO_NEAREST_BLOCK+0xac>
    1d18:	00 00       	nop
	_delay_ms(100);
	MOTOR_PORT = 0x00;
    1d1a:	12 ba       	out	0x12, r1	; 18
	DIGKSTRA(X,Y,block[j].X,block[j].Y,TRUE);
    1d1c:	81 2f       	mov	r24, r17
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	dc 01       	movw	r26, r24
    1d26:	aa 0f       	add	r26, r26
    1d28:	bb 1f       	adc	r27, r27
    1d2a:	aa 0f       	add	r26, r26
    1d2c:	bb 1f       	adc	r27, r27
    1d2e:	8a 0f       	add	r24, r26
    1d30:	9b 1f       	adc	r25, r27
    1d32:	dc 01       	movw	r26, r24
    1d34:	ac 51       	subi	r26, 0x1C	; 28
    1d36:	bf 4f       	sbci	r27, 0xFF	; 255
    1d38:	81 2f       	mov	r24, r17
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	fc 01       	movw	r30, r24
    1d42:	ee 0f       	add	r30, r30
    1d44:	ff 1f       	adc	r31, r31
    1d46:	ee 0f       	add	r30, r30
    1d48:	ff 1f       	adc	r31, r31
    1d4a:	8e 0f       	add	r24, r30
    1d4c:	9f 1f       	adc	r25, r31
    1d4e:	fc 01       	movw	r30, r24
    1d50:	ec 51       	subi	r30, 0x1C	; 28
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	01 e0       	ldi	r16, 0x01	; 1
    1d56:	13 96       	adiw	r26, 0x03	; 3
    1d58:	2c 91       	ld	r18, X
    1d5a:	42 81       	ldd	r20, Z+2	; 0x02
    1d5c:	60 91 e2 00 	lds	r22, 0x00E2
    1d60:	80 91 e3 00 	lds	r24, 0x00E3
    1d64:	0e 94 81 07 	call	0xf02	; 0xf02 <DIGKSTRA>
	details1[block[j].X][block[j].Y].status = VISITED;
    1d68:	81 2f       	mov	r24, r17
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	fc 01       	movw	r30, r24
    1d72:	ee 0f       	add	r30, r30
    1d74:	ff 1f       	adc	r31, r31
    1d76:	ee 0f       	add	r30, r30
    1d78:	ff 1f       	adc	r31, r31
    1d7a:	8e 0f       	add	r24, r30
    1d7c:	9f 1f       	adc	r25, r31
    1d7e:	fc 01       	movw	r30, r24
    1d80:	ec 51       	subi	r30, 0x1C	; 28
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	81 2f       	mov	r24, r17
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	aa 0f       	add	r26, r26
    1d90:	bb 1f       	adc	r27, r27
    1d92:	aa 0f       	add	r26, r26
    1d94:	bb 1f       	adc	r27, r27
    1d96:	8a 0f       	add	r24, r26
    1d98:	9b 1f       	adc	r25, r27
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	ac 51       	subi	r26, 0x1C	; 28
    1d9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1da0:	12 96       	adiw	r26, 0x02	; 2
    1da2:	2c 91       	ld	r18, X
    1da4:	83 81       	ldd	r24, Z+3	; 0x03
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	fc 01       	movw	r30, r24
    1dae:	ee 0f       	add	r30, r30
    1db0:	ff 1f       	adc	r31, r31
    1db2:	ee 0f       	add	r30, r30
    1db4:	ff 1f       	adc	r31, r31
    1db6:	8e 0f       	add	r24, r30
    1db8:	9f 1f       	adc	r25, r31
    1dba:	fc 01       	movw	r30, r24
    1dbc:	36 e4       	ldi	r19, 0x46	; 70
    1dbe:	23 9f       	mul	r18, r19
    1dc0:	e0 0d       	add	r30, r0
    1dc2:	f1 1d       	adc	r31, r1
    1dc4:	11 24       	eor	r1, r1
    1dc6:	ee 51       	subi	r30, 0x1E	; 30
    1dc8:	fd 4f       	sbci	r31, 0xFD	; 253
    1dca:	c1 e0       	ldi	r28, 0x01	; 1
    1dcc:	c0 83       	st	Z, r28
	REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY(j,BLOCK);
    1dce:	62 e0       	ldi	r22, 0x02	; 2
    1dd0:	81 2f       	mov	r24, r17
    1dd2:	0e 94 42 03 	call	0x684	; 0x684 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY>
	dest_coun = j;
    1dd6:	10 93 e1 00 	sts	0x00E1, r17
	BLOCK_HOLD(FORWARD);
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	0e 94 a6 01 	call	0x34c	; 0x34c <BLOCK_HOLD>
    1de0:	8f ef       	ldi	r24, 0xFF	; 255
    1de2:	93 e0       	ldi	r25, 0x03	; 3
    1de4:	26 ea       	ldi	r18, 0xA6	; 166
    1de6:	81 50       	subi	r24, 0x01	; 1
    1de8:	90 40       	sbci	r25, 0x00	; 0
    1dea:	20 40       	sbci	r18, 0x00	; 0
    1dec:	e1 f7       	brne	.-8      	; 0x1de6 <MOVE_TO_NEAREST_BLOCK+0x17a>
    1dee:	00 c0       	rjmp	.+0      	; 0x1df0 <MOVE_TO_NEAREST_BLOCK+0x184>
    1df0:	00 00       	nop
	//LCD_SET_CURSER(1,1);
	//LCD_PRINT("    Gripping    ");
	_delay_ms(3400);
	BLOCK_LIFT(FORWARD);
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	0e 94 9c 01 	call	0x338	; 0x338 <BLOCK_LIFT>
    1df8:	3f ef       	ldi	r19, 0xFF	; 255
    1dfa:	85 ea       	ldi	r24, 0xA5	; 165
    1dfc:	9e e0       	ldi	r25, 0x0E	; 14
    1dfe:	31 50       	subi	r19, 0x01	; 1
    1e00:	80 40       	sbci	r24, 0x00	; 0
    1e02:	90 40       	sbci	r25, 0x00	; 0
    1e04:	e1 f7       	brne	.-8      	; 0x1dfe <MOVE_TO_NEAREST_BLOCK+0x192>
    1e06:	00 c0       	rjmp	.+0      	; 0x1e08 <MOVE_TO_NEAREST_BLOCK+0x19c>
    1e08:	00 00       	nop
	_delay_ms(300);
	block_caught = TRUE;
    1e0a:	c0 93 db 00 	sts	0x00DB, r28
	FOLLOW_ONE_NODE(FORWARD);
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	0e 94 d5 06 	call	0xdaa	; 0xdaa <FOLLOW_ONE_NODE>
	if(dir == 'N')
    1e14:	80 91 62 00 	lds	r24, 0x0062
    1e18:	8e 34       	cpi	r24, 0x4E	; 78
    1e1a:	31 f4       	brne	.+12     	; 0x1e28 <MOVE_TO_NEAREST_BLOCK+0x1bc>
		Y--;
    1e1c:	80 91 e2 00 	lds	r24, 0x00E2
    1e20:	81 50       	subi	r24, 0x01	; 1
    1e22:	80 93 e2 00 	sts	0x00E2, r24
    1e26:	17 c0       	rjmp	.+46     	; 0x1e56 <MOVE_TO_NEAREST_BLOCK+0x1ea>
	else if(dir=='E')
    1e28:	85 34       	cpi	r24, 0x45	; 69
    1e2a:	31 f4       	brne	.+12     	; 0x1e38 <MOVE_TO_NEAREST_BLOCK+0x1cc>
		X++;
    1e2c:	80 91 e3 00 	lds	r24, 0x00E3
    1e30:	8f 5f       	subi	r24, 0xFF	; 255
    1e32:	80 93 e3 00 	sts	0x00E3, r24
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <MOVE_TO_NEAREST_BLOCK+0x1ea>
	else if(dir=='W')
    1e38:	87 35       	cpi	r24, 0x57	; 87
    1e3a:	31 f4       	brne	.+12     	; 0x1e48 <MOVE_TO_NEAREST_BLOCK+0x1dc>
		X--;
    1e3c:	80 91 e3 00 	lds	r24, 0x00E3
    1e40:	81 50       	subi	r24, 0x01	; 1
    1e42:	80 93 e3 00 	sts	0x00E3, r24
    1e46:	07 c0       	rjmp	.+14     	; 0x1e56 <MOVE_TO_NEAREST_BLOCK+0x1ea>
	else if(dir=='S')
    1e48:	83 35       	cpi	r24, 0x53	; 83
    1e4a:	29 f4       	brne	.+10     	; 0x1e56 <MOVE_TO_NEAREST_BLOCK+0x1ea>
		Y++;
    1e4c:	80 91 e2 00 	lds	r24, 0x00E2
    1e50:	8f 5f       	subi	r24, 0xFF	; 255
    1e52:	80 93 e2 00 	sts	0x00E2, r24
}
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	08 95       	ret

00001e60 <MOVE_TO_APPROPRIATE_DESTINATION>:

void MOVE_TO_APPROPRIATE_DESTINATION()
{
    1e60:	0f 93       	push	r16
	LCD_CLEAR();
    1e62:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_CLEAR>
	MOTOR_PORT = 0x00;
    1e66:	12 ba       	out	0x12, r1	; 18
	DIGKSTRA(X,Y,destination[dest_coun].X,destination[dest_coun].Y,TRUE);
    1e68:	20 91 e1 00 	lds	r18, 0x00E1
    1e6c:	82 2f       	mov	r24, r18
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	dc 01       	movw	r26, r24
    1e76:	aa 0f       	add	r26, r26
    1e78:	bb 1f       	adc	r27, r27
    1e7a:	aa 0f       	add	r26, r26
    1e7c:	bb 1f       	adc	r27, r27
    1e7e:	8a 0f       	add	r24, r26
    1e80:	9b 1f       	adc	r25, r27
    1e82:	dc 01       	movw	r26, r24
    1e84:	a8 51       	subi	r26, 0x18	; 24
    1e86:	be 4f       	sbci	r27, 0xFE	; 254
    1e88:	82 2f       	mov	r24, r18
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	fc 01       	movw	r30, r24
    1e92:	ee 0f       	add	r30, r30
    1e94:	ff 1f       	adc	r31, r31
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	8e 0f       	add	r24, r30
    1e9c:	9f 1f       	adc	r25, r31
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	e8 51       	subi	r30, 0x18	; 24
    1ea2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea4:	01 e0       	ldi	r16, 0x01	; 1
    1ea6:	13 96       	adiw	r26, 0x03	; 3
    1ea8:	2c 91       	ld	r18, X
    1eaa:	42 81       	ldd	r20, Z+2	; 0x02
    1eac:	60 91 e2 00 	lds	r22, 0x00E2
    1eb0:	80 91 e3 00 	lds	r24, 0x00E3
    1eb4:	0e 94 81 07 	call	0xf02	; 0xf02 <DIGKSTRA>
	details2[destination[dest_coun].X][destination[dest_coun].Y].status = DESTINATION;
    1eb8:	80 91 e1 00 	lds	r24, 0x00E1
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	22 0f       	add	r18, r18
    1ec2:	33 1f       	adc	r19, r19
    1ec4:	f9 01       	movw	r30, r18
    1ec6:	ee 0f       	add	r30, r30
    1ec8:	ff 1f       	adc	r31, r31
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	2e 0f       	add	r18, r30
    1ed0:	3f 1f       	adc	r19, r31
    1ed2:	f9 01       	movw	r30, r18
    1ed4:	e8 51       	subi	r30, 0x18	; 24
    1ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	22 0f       	add	r18, r18
    1ede:	33 1f       	adc	r19, r19
    1ee0:	d9 01       	movw	r26, r18
    1ee2:	aa 0f       	add	r26, r26
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	aa 0f       	add	r26, r26
    1ee8:	bb 1f       	adc	r27, r27
    1eea:	2a 0f       	add	r18, r26
    1eec:	3b 1f       	adc	r19, r27
    1eee:	d9 01       	movw	r26, r18
    1ef0:	a8 51       	subi	r26, 0x18	; 24
    1ef2:	be 4f       	sbci	r27, 0xFE	; 254
    1ef4:	12 96       	adiw	r26, 0x02	; 2
    1ef6:	9c 91       	ld	r25, X
    1ef8:	23 81       	ldd	r18, Z+3	; 0x03
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	22 0f       	add	r18, r18
    1efe:	33 1f       	adc	r19, r19
    1f00:	f9 01       	movw	r30, r18
    1f02:	ee 0f       	add	r30, r30
    1f04:	ff 1f       	adc	r31, r31
    1f06:	ee 0f       	add	r30, r30
    1f08:	ff 1f       	adc	r31, r31
    1f0a:	2e 0f       	add	r18, r30
    1f0c:	3f 1f       	adc	r19, r31
    1f0e:	f9 01       	movw	r30, r18
    1f10:	46 e4       	ldi	r20, 0x46	; 70
    1f12:	94 9f       	mul	r25, r20
    1f14:	e0 0d       	add	r30, r0
    1f16:	f1 1d       	adc	r31, r1
    1f18:	11 24       	eor	r1, r1
    1f1a:	ea 5e       	subi	r30, 0xEA	; 234
    1f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1e:	93 e0       	ldi	r25, 0x03	; 3
    1f20:	90 83       	st	Z, r25
	REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY(dest_coun,DESTINATION);
    1f22:	63 e0       	ldi	r22, 0x03	; 3
    1f24:	0e 94 42 03 	call	0x684	; 0x684 <REMOVE_DESTINATION_OR_BLOCK_FROM_ARRAY>
	MOTOR_PORT = 0x00;
    1f28:	12 ba       	out	0x12, r1	; 18
	BOT_MOVE(BACKWARD);
    1f2a:	83 e0       	ldi	r24, 0x03	; 3
    1f2c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <BOT_MOVE>
    1f30:	8f ef       	ldi	r24, 0xFF	; 255
    1f32:	98 ef       	ldi	r25, 0xF8	; 248
    1f34:	25 e1       	ldi	r18, 0x15	; 21
    1f36:	81 50       	subi	r24, 0x01	; 1
    1f38:	90 40       	sbci	r25, 0x00	; 0
    1f3a:	20 40       	sbci	r18, 0x00	; 0
    1f3c:	e1 f7       	brne	.-8      	; 0x1f36 <MOVE_TO_APPROPRIATE_DESTINATION+0xd6>
    1f3e:	00 c0       	rjmp	.+0      	; 0x1f40 <MOVE_TO_APPROPRIATE_DESTINATION+0xe0>
    1f40:	00 00       	nop
	LCD_PRINT("     (");
	LCD_DATA(X+0x30);
	LCD_DATA(',');
	LCD_DATA(Y+0x30);
	LCD_DATA(')');*/
	BLOCK_LIFT(BACKWARD);
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	0e 94 9c 01 	call	0x338	; 0x338 <BLOCK_LIFT>
    1f48:	4f ef       	ldi	r20, 0xFF	; 255
    1f4a:	87 e8       	ldi	r24, 0x87	; 135
    1f4c:	93 e1       	ldi	r25, 0x13	; 19
    1f4e:	41 50       	subi	r20, 0x01	; 1
    1f50:	80 40       	sbci	r24, 0x00	; 0
    1f52:	90 40       	sbci	r25, 0x00	; 0
    1f54:	e1 f7       	brne	.-8      	; 0x1f4e <MOVE_TO_APPROPRIATE_DESTINATION+0xee>
    1f56:	00 c0       	rjmp	.+0      	; 0x1f58 <MOVE_TO_APPROPRIATE_DESTINATION+0xf8>
    1f58:	00 00       	nop
	_delay_ms(400);
	BLOCK_HOLD(BACKWARD);
    1f5a:	83 e0       	ldi	r24, 0x03	; 3
    1f5c:	0e 94 a6 01 	call	0x34c	; 0x34c <BLOCK_HOLD>
    1f60:	2f ef       	ldi	r18, 0xFF	; 255
    1f62:	4b e7       	ldi	r20, 0x7B	; 123
    1f64:	82 e9       	ldi	r24, 0x92	; 146
    1f66:	21 50       	subi	r18, 0x01	; 1
    1f68:	40 40       	sbci	r20, 0x00	; 0
    1f6a:	80 40       	sbci	r24, 0x00	; 0
    1f6c:	e1 f7       	brne	.-8      	; 0x1f66 <MOVE_TO_APPROPRIATE_DESTINATION+0x106>
    1f6e:	00 c0       	rjmp	.+0      	; 0x1f70 <MOVE_TO_APPROPRIATE_DESTINATION+0x110>
    1f70:	00 00       	nop
	_delay_ms(3000);
	MOTOR_PORT = 0x00;
    1f72:	12 ba       	out	0x12, r1	; 18
	block_caught = FALSE;
    1f74:	10 92 db 00 	sts	0x00DB, r1
	MOVE_BACK_IF_BLOCK();
    1f78:	0e 94 69 04 	call	0x8d2	; 0x8d2 <MOVE_BACK_IF_BLOCK>
}
    1f7c:	0f 91       	pop	r16
    1f7e:	08 95       	ret

00001f80 <_exit>:
    1f80:	f8 94       	cli

00001f82 <__stop_program>:
    1f82:	ff cf       	rjmp	.-2      	; 0x1f82 <__stop_program>
